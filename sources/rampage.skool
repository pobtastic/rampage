@rom
@start

; Loading Screen
;
; #UDGTABLE
; { =h Rampage Loading Screen. }
; { #SCR$02(loading) }
; UDGTABLE#
@label=ScreenBuffer
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $4020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$FB,$E0,$0E,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FC,$39,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00 ;
 $4060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$17,$FF,$FE,$03,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $4080 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$21,$FF,$FE,$7F,$FF,$FF,$0E,$00,$00,$FF,$FF,$F0,$00,$00 ;
 $40A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FD,$08,$54,$54,$FF,$FF,$00,$00,$FF,$AB,$FF,$AF,$FA,$AA,$00,$00,$00 ;
 $40C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$BF,$FA,$BF,$FB,$FA,$AF,$22,$A7,$24,$AB,$FF,$FC,$3F,$FA,$00,$00,$2B,$FF,$07,$FF,$00,$00 ;
 $40E0 DEFB $02,$BF,$FF,$FF,$FF,$F0,$0A,$FF,$FF,$80,$BF,$FF,$FF,$FE,$AF,$B1,$0A,$A7,$EE,$FF,$EB,$FF,$EF,$FE,$00,$00,$3E,$BF,$FA,$AA,$00,$00 ;
 $4100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$C0,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$F9,$1F,$F0,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FC,$03,$F0,$07,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $4160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$F8,$00,$1F,$FF,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $4180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$45,$FF,$FF,$3F,$FF,$FF,$1F,$80,$0F,$FF,$FF,$F0,$00,$00 ;
 $41A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$F5,$0B,$22,$88,$3F,$FF,$00,$00,$FF,$55,$FF,$D7,$FD,$50,$00,$00,$00 ;
 $41C0 DEFB $00,$00,$00,$01,$F8,$00,$00,$FF,$F8,$01,$5F,$FD,$7F,$FD,$7D,$4C,$EF,$EC,$4D,$DF,$DF,$FF,$7F,$FC,$00,$00,$15,$FF,$FF,$FF,$80,$00 ;
 $41E0 DEFB $05,$5F,$FF,$55,$FF,$F0,$05,$FF,$FF,$C1,$5F,$FF,$FF,$FF,$5F,$69,$85,$1F,$A7,$FF,$D5,$FF,$F7,$FE,$00,$01,$FF,$7F,$F5,$54,$00,$00 ;
 $4200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$F8,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FE,$3F,$FC,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00 ;
 $4240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FE,$04,$0F,$F8,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$55,$FF,$E0,$1F,$E0,$3F,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $4280 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$82,$8B,$FF,$FF,$8F,$FF,$FF,$1F,$C0,$1F,$FF,$FF,$F0,$00,$00 ;
 $42A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$BE,$AC,$C5,$40,$0F,$FF,$00,$01,$FE,$AA,$FF,$AB,$FE,$00,$00,$00,$00 ;
 $42C0 DEFB $00,$00,$03,$FF,$FC,$00,$00,$FF,$F8,$00,$BF,$FE,$BF,$FA,$BC,$E5,$4D,$47,$0F,$3F,$FF,$FE,$BF,$F8,$00,$00,$0A,$FF,$FF,$FF,$80,$00 ;
 $42E0 DEFB $02,$BF,$FE,$AA,$FF,$F0,$0A,$FF,$FF,$C0,$BF,$FF,$FF,$FF,$AF,$7A,$2A,$7F,$EA,$FF,$EA,$FF,$EF,$FE,$00,$0F,$FE,$BF,$EA,$AA,$00,$00 ;
 $4300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$03,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$1F,$FE,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $4340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FE,$03,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00 ;
 $4360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$7F,$00,$3F,$FF,$C7,$F0,$00,$00,$00,$00,$00,$00,$00 ;
 $4380 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$57,$13,$FF,$FF,$C3,$FF,$FF,$1F,$F0,$0F,$FF,$FF,$F8,$00,$00 ;
 $43A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$E0,$FF,$65,$50,$45,$45,$C5,$05,$00,$03,$FD,$55,$7F,$57,$FC,$00,$00,$00,$00 ;
 $43C0 DEFB $00,$03,$FF,$FF,$FE,$00,$00,$FF,$FC,$01,$5F,$FF,$7F,$FD,$7D,$8A,$CA,$B9,$28,$7F,$DF,$FF,$5F,$FC,$00,$00,$15,$FF,$FF,$FF,$80,$00 ;
 $43E0 DEFB $01,$5F,$FD,$55,$7F,$F8,$05,$FF,$7F,$E1,$5F,$FF,$FF,$FF,$5F,$25,$51,$FF,$E5,$FF,$D5,$FF,$F7,$FE,$00,$3F,$FF,$7F,$F5,$00,$00,$00 ;
 $4400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$C7,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$8F,$FE,$FF,$FF,$FC,$00,$00,$00,$00,$00,$00,$00 ;
 $4440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FF,$0F,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00 ;
 $4460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$B5,$00,$00,$7F,$FF,$F8,$E0,$00,$00,$00,$00,$00,$00,$00 ;
 $4480 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$19,$83,$43,$FF,$FF,$FE,$07,$FF,$3F,$FC,$0F,$FF,$FF,$F8,$00,$00 ;
 $44A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$E0,$3F,$E0,$FD,$8A,$B2,$06,$36,$0A,$21,$00,$0F,$FA,$AA,$A8,$2B,$FE,$00,$00,$00,$00 ;
 $44C0 DEFB $00,$7F,$FF,$FF,$FF,$00,$00,$FF,$FE,$00,$BF,$FF,$BF,$FE,$BE,$E5,$7F,$65,$58,$FF,$EF,$FF,$BF,$F8,$00,$00,$0A,$FF,$FF,$FF,$C0,$00 ;
 $44E0 DEFB $02,$BF,$FE,$AA,$BF,$F8,$0A,$FF,$BF,$F0,$BF,$FF,$FF,$FF,$AF,$3C,$AF,$FB,$EA,$FF,$EA,$FF,$FF,$FF,$00,$7F,$FF,$BF,$F0,$00,$00,$00 ;
 $4500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$EF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$C7,$FE,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00 ;
 $4540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FF,$1F,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00 ;
 $4560 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$48,$B8,$00,$7F,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4580 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$6A,$0E,$2B,$FF,$FF,$FF,$E0,$FF,$7F,$FE,$57,$FF,$FF,$00,$00,$00 ;
 $45A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$F0,$3F,$E0,$FD,$54,$D4,$54,$C1,$55,$54,$00,$1F,$FD,$55,$50,$55,$FE,$00,$00,$00,$00 ;
 $45C0 DEFB $00,$7F,$FF,$FF,$FF,$80,$05,$FF,$FE,$01,$5F,$FF,$7F,$FD,$5E,$CA,$AA,$46,$85,$FF,$D7,$FF,$DF,$FC,$00,$00,$05,$7F,$FF,$FF,$C0,$00 ;
 $45E0 DEFB $01,$5F,$FC,$15,$5F,$F8,$05,$FF,$7F,$F1,$5F,$FF,$FF,$FF,$D7,$16,$5F,$F8,$C5,$FC,$D7,$FF,$F7,$FF,$00,$7F,$FF,$5F,$F0,$00,$00,$00 ;
 $4600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$E7,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$E3,$FE,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00 ;
 $4640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$FF,$1F,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $4660 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$28,$3F,$F8,$FF,$FF,$FF,$C0,$00,$00,$00,$07,$E0,$00,$00 ;
 $4680 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$21,$B9,$55,$FF,$FF,$FF,$FF,$FE,$FF,$FF,$AF,$FF,$EA,$80,$00,$00 ;
 $46A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$F0,$3F,$F0,$78,$AB,$49,$80,$20,$AA,$B9,$FE,$FF,$FA,$80,$A8,$2B,$FE,$00,$00,$00,$00 ;
 $46C0 DEFB $00,$3F,$FF,$FF,$FF,$80,$0A,$FF,$FF,$00,$BF,$FF,$BF,$FE,$BF,$A5,$44,$04,$02,$FF,$EF,$FF,$AF,$FC,$00,$00,$0A,$FF,$FF,$FF,$C0,$00 ;
 $46E0 DEFB $00,$AF,$FE,$02,$AF,$FC,$0A,$FF,$BF,$F8,$BF,$FF,$FF,$FF,$AF,$1D,$FF,$FF,$8B,$F8,$FF,$FF,$FB,$FF,$80,$BF,$FE,$BF,$F8,$00,$00,$00 ;
 $4700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$F3,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$F1,$FC,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00 ;
 $4740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FE,$0F,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $4760 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$52,$FF,$FC,$7F,$FF,$FF,$F0,$00,$00,$01,$FF,$E0,$00,$00 ;
 $4780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$87,$6B,$81,$FF,$FF,$FF,$FF,$F0,$D7,$FF,$57,$FD,$55,$00,$00,$00 ;
 $47A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$F9,$7F,$F7,$78,$58,$A4,$5C,$DC,$54,$43,$FC,$7F,$FD,$00,$50,$15,$FE,$00,$3F,$00,$00 ;
 $47C0 DEFB $00,$3F,$FF,$FF,$FF,$C0,$05,$FF,$FF,$01,$5F,$FF,$FF,$FF,$5F,$F2,$29,$8A,$65,$FF,$D7,$FF,$DF,$FC,$00,$00,$05,$7F,$FF,$F4,$00,$00 ;
 $47E0 DEFB $01,$5F,$FE,$01,$5F,$FC,$05,$FF,$5F,$FD,$5F,$FF,$FF,$FF,$D7,$0F,$FF,$FF,$07,$FF,$FF,$FF,$FD,$FF,$81,$5F,$FD,$5F,$F8,$00,$F0,$00 ;
 $4800 DEFB $00,$AF,$FE,$02,$AF,$FC,$0A,$FF,$AF,$FC,$BF,$FF,$FF,$FF,$EB,$FF,$FF,$FE,$0A,$FF,$FF,$FF,$FF,$FF,$C2,$AB,$FE,$BF,$F8,$7F,$F8,$00 ;
 $4820 DEFB $00,$2B,$FF,$80,$BF,$F0,$0A,$FF,$3F,$FF,$BF,$FA,$BA,$FF,$FA,$FF,$B1,$82,$0E,$FF,$E0,$AB,$FF,$AF,$FF,$FF,$F8,$AF,$FF,$EA,$80,$00 ;
 $4840 DEFB $00,$0A,$FF,$FF,$F8,$00,$0A,$FF,$EA,$AF,$BF,$F8,$02,$BF,$FE,$BF,$FC,$87,$0A,$FF,$C0,$0A,$AA,$00,$AA,$00,$00,$00,$00,$00,$00,$00 ;
 $4860 DEFB $00,$02,$BF,$FE,$FF,$FC,$0A,$FF,$00,$0A,$BF,$F8,$00,$2B,$FF,$AF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4880 DEFB $00,$00,$2B,$FF,$2A,$BF,$FA,$FF,$00,$00,$AA,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48A0 DEFB $00,$00,$0A,$A8,$00,$0A,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48C0 DEFB $00,$00,$00,$00,$00,$08,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $48E0 DEFB $00,$00,$00,$1F,$FF,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FE,$00,$00,$00,$00,$00,$00,$07,$FE,$00,$00,$00,$1F,$F0,$00 ;
 $4900 DEFB $00,$57,$FE,$01,$5F,$FC,$05,$FF,$57,$FF,$5F,$FF,$FF,$FF,$D7,$FF,$FF,$FC,$05,$FF,$FF,$FF,$FD,$FF,$C5,$57,$FF,$5F,$FF,$FF,$F8,$00 ;
 $4920 DEFB $00,$15,$FF,$C1,$7F,$E0,$05,$FF,$FF,$FF,$DF,$FD,$45,$7F,$F5,$7F,$90,$03,$85,$FF,$C0,$57,$FF,$D7,$FF,$FF,$F0,$57,$FD,$55,$40,$00 ;
 $4940 DEFB $00,$05,$7F,$FF,$FC,$00,$05,$FF,$D1,$57,$DF,$F8,$01,$5F,$FF,$5F,$FE,$00,$05,$FF,$C0,$05,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4960 DEFB $00,$01,$5F,$FD,$5F,$FF,$05,$FF,$00,$15,$5F,$F8,$00,$57,$F0,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4980 DEFB $00,$00,$57,$FF,$15,$5F,$FD,$FF,$00,$01,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $49A0 DEFB $00,$00,$15,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $49C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$00,$00,$00,$00,$00,$00 ;
 $49E0 DEFB $00,$00,$00,$3F,$FF,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$FF,$80,$00,$00,$00,$00,$00,$07,$FF,$80,$00,$00,$FF,$E0,$00 ;
 $4A00 DEFB $00,$AF,$FF,$00,$AF,$FC,$0A,$FF,$AF,$FE,$BF,$FF,$FF,$FF,$EB,$FF,$FF,$E8,$0A,$FF,$FF,$FF,$FE,$FF,$E2,$AB,$FE,$AF,$FF,$FF,$FC,$00 ;
 $4A20 DEFB $00,$2B,$FF,$C0,$FF,$C0,$0A,$FF,$FF,$FF,$BF,$FA,$82,$BF,$FA,$FF,$F8,$80,$8E,$FF,$C0,$2B,$FF,$EB,$FF,$FF,$E0,$2A,$AA,$AA,$A0,$00 ;
 $4A40 DEFB $00,$02,$BF,$FF,$FF,$00,$0A,$FF,$A0,$AB,$BF,$F8,$00,$AF,$FE,$BF,$FE,$21,$0A,$F8,$00,$02,$AA,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A60 DEFB $00,$00,$AF,$FE,$AF,$FF,$8A,$FF,$00,$0A,$BF,$F8,$00,$2A,$A0,$2A,$A0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4A80 DEFB $00,$00,$2B,$FF,$8A,$AF,$FA,$FF,$00,$00,$A0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4AA0 DEFB $00,$00,$0A,$A8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4AC0 DEFB $00,$00,$00,$00,$03,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1C,$00,$00,$00,$00,$00,$00,$00,$1F,$00,$00,$00,$00,$00,$38,$00 ;
 $4AE0 DEFB $00,$00,$00,$7F,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$FF,$C0,$00,$00,$00,$00,$00,$03,$FF,$E0,$00,$03,$FF,$E0,$00 ;
 $4B00 DEFB $00,$57,$FF,$00,$5F,$F8,$05,$FF,$57,$FF,$5F,$FF,$FF,$FF,$F5,$FF,$FF,$50,$35,$FF,$FF,$DF,$FF,$7F,$F0,$57,$FF,$5F,$FF,$FF,$FC,$00 ;
 $4B20 DEFB $00,$15,$FF,$E1,$FF,$80,$05,$FF,$FF,$FF,$DF,$F9,$05,$7F,$FD,$77,$F8,$01,$05,$FF,$C0,$15,$FF,$F5,$7F,$FF,$00,$55,$55,$50,$00,$00 ;
 $4B40 DEFB $00,$05,$7F,$FF,$FF,$80,$05,$FF,$00,$57,$DF,$F8,$01,$5F,$FF,$5F,$7E,$50,$05,$54,$00,$05,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B60 DEFB $00,$01,$5F,$FF,$57,$FF,$C5,$FF,$00,$05,$5F,$F8,$00,$55,$50,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4B80 DEFB $00,$00,$15,$FF,$81,$57,$FD,$F0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4BA0 DEFB $00,$00,$05,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4BC0 DEFB $00,$00,$00,$00,$1F,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$00,$00,$00,$00,$00,$00,$00,$1F,$80,$00,$00,$00,$00,$3C,$00 ;
 $4BE0 DEFB $00,$00,$00,$FF,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$03,$FF,$FC,$00,$1F,$FF,$E0,$00 ;
 $4C00 DEFB $00,$2B,$FF,$00,$AF,$F8,$0A,$FF,$AB,$FF,$BF,$FB,$FE,$FF,$EB,$FF,$FA,$A0,$7A,$FF,$FF,$AF,$FE,$FF,$F8,$2F,$FE,$AF,$FF,$FF,$FC,$00 ;
 $4C20 DEFB $00,$0A,$FF,$E3,$FF,$00,$0A,$FF,$FF,$FF,$BF,$F8,$82,$BF,$FA,$BB,$F8,$18,$0E,$FF,$C0,$2A,$FF,$EA,$BF,$FA,$80,$2A,$AA,$00,$00,$00 ;
 $4C40 DEFB $00,$02,$BF,$FF,$FF,$C0,$0A,$FF,$00,$AB,$BF,$F8,$00,$AF,$FF,$AF,$FF,$20,$0A,$A8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C60 DEFB $00,$00,$AF,$FE,$AB,$FF,$EA,$FF,$00,$02,$BF,$F8,$00,$2A,$A8,$2A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4C80 DEFB $00,$00,$2B,$FF,$80,$AB,$FA,$A0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4CC0 DEFB $00,$00,$00,$00,$7F,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$80,$00,$00,$00,$00,$00,$00,$1F,$C0,$00,$00,$00,$00,$FC,$00 ;
 $4CE0 DEFB $00,$00,$00,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$03,$FF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$07,$FF,$FF,$FF,$FF,$FF,$C0,$00 ;
 $4D00 DEFB $00,$57,$FF,$80,$5F,$F8,$05,$FF,$55,$FF,$DF,$FD,$FD,$FF,$F5,$FF,$F5,$00,$05,$FF,$F5,$57,$FF,$7F,$FF,$FF,$FC,$57,$FF,$FF,$FE,$00 ;
 $4D20 DEFB $00,$15,$FF,$FF,$FF,$00,$05,$FF,$FF,$DF,$DF,$F8,$05,$5F,$FD,$79,$FC,$30,$45,$FD,$C0,$15,$FF,$F5,$55,$55,$00,$15,$00,$00,$00,$00 ;
 $4D40 DEFB $00,$05,$5F,$FF,$FF,$E0,$05,$FF,$00,$55,$DF,$F8,$00,$57,$FF,$5F,$FF,$00,$05,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D60 DEFB $00,$00,$57,$FF,$55,$FF,$F5,$FF,$00,$01,$5F,$F8,$00,$15,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4D80 DEFB $00,$00,$15,$FF,$80,$55,$05,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4DA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4DC0 DEFB $00,$00,$00,$00,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$C0,$00,$00,$00,$00,$00,$00,$1F,$E0,$00,$00,$00,$01,$F8,$00 ;
 $4DE0 DEFB $00,$00,$01,$FF,$FF,$FF,$FF,$FF,$80,$00,$00,$00,$00,$00,$0F,$FF,$FF,$FF,$FC,$00,$00,$00,$00,$00,$03,$FF,$FF,$FF,$FF,$FF,$80,$00 ;
 $4E00 DEFB $00,$2B,$FF,$80,$BF,$F0,$0A,$FF,$2B,$FF,$BF,$FA,$FE,$FF,$FA,$FF,$EB,$04,$0A,$EF,$EA,$AF,$FF,$BF,$FF,$FF,$FC,$AF,$FF,$FF,$FE,$00 ;
 $4E20 DEFB $00,$0A,$FF,$FF,$FE,$00,$0A,$FF,$FE,$BF,$BF,$F8,$02,$BF,$FE,$BF,$DC,$0B,$2A,$FB,$C0,$0A,$FF,$FA,$AA,$AA,$00,$00,$00,$00,$00,$00 ;
 $4E40 DEFB $00,$02,$BF,$FF,$FF,$F0,$0A,$FF,$00,$2A,$BF,$F8,$00,$AF,$FF,$AF,$FF,$00,$0A,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E60 DEFB $00,$00,$AF,$FE,$AA,$FF,$FA,$FF,$00,$00,$BF,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4E80 DEFB $00,$00,$2A,$FF,$C0,$2A,$8A,$A0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4EC0 DEFB $00,$00,$00,$03,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$E0,$00,$00,$00,$00,$00,$00,$0F,$F8,$00,$00,$00,$03,$F8,$00 ;
 $4EE0 DEFB $00,$00,$03,$FF,$FF,$FF,$FF,$FF,$C0,$00,$00,$00,$00,$00,$1F,$FF,$FF,$FF,$FF,$00,$00,$00,$00,$00,$03,$FF,$FF,$FF,$FF,$FF,$80,$00 ;
 $4F00 DEFB $00,$55,$FF,$80,$7F,$F0,$05,$FF,$1F,$FF,$DF,$FD,$7D,$7F,$F5,$FF,$F1,$81,$15,$F7,$D4,$57,$FF,$DF,$FF,$FF,$F8,$57,$FF,$FF,$C0,$00 ;
 $4F20 DEFB $00,$05,$7F,$FF,$FC,$00,$05,$FF,$FD,$5F,$DF,$F8,$01,$5F,$FD,$7F,$FC,$07,$05,$FF,$C0,$05,$7C,$05,$55,$40,$00,$00,$00,$00,$00,$00 ;
 $4F40 DEFB $00,$01,$5F,$FD,$FF,$F8,$05,$FF,$00,$15,$DF,$F8,$00,$57,$FF,$D7,$FF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F60 DEFB $00,$00,$57,$FF,$55,$7F,$FD,$FF,$00,$01,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4F80 DEFB $00,$00,$15,$FF,$C0,$15,$05,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4FC0 DEFB $00,$00,$00,$07,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$F8,$00,$00,$00,$00,$00,$00,$0F,$FC,$00,$00,$00,$0F,$F8,$00 ;
 $4FE0 DEFB $00,$00,$03,$FF,$FF,$FF,$FF,$FF,$C0,$00,$00,$00,$00,$00,$3F,$FF,$FF,$FF,$FF,$C0,$00,$00,$00,$00,$01,$FF,$FF,$FF,$FF,$FF,$80,$00 ;
 $5000 DEFB $00,$00,$07,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E0,$00,$00,$00,$00,$03,$00,$00,$00,$00,$00,$80,$00 ;
 $5020 DEFB $00,$00,$FF,$C0,$00,$00,$00,$01,$FE,$00,$00,$00,$00,$07,$1F,$BA,$F2,$AE,$EF,$50,$00,$00,$00,$00,$03,$01,$9C,$00,$1C,$40,$C0,$00 ;
 $5040 DEFB $00,$3F,$FF,$FF,$80,$00,$1F,$FF,$FF,$F0,$00,$00,$D0,$80,$00,$04,$00,$08,$00,$02,$0F,$00,$00,$00,$30,$00,$08,$00,$00,$00,$07,$80 ;
 $5060 DEFB $00,$FF,$FF,$FF,$80,$02,$00,$3E,$00,$00,$01,$F0,$00,$00,$03,$E0,$00,$00,$7C,$00,$00,$03,$E0,$00,$00,$00,$00,$FF,$80,$3F,$C6,$2E ;
 $5080 DEFB $00,$FF,$FE,$07,$00,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F1,$FF,$C1,$03,$D4,$91 ;
 $50A0 DEFB $00,$FF,$FE,$20,$00,$00,$7F,$BF,$31,$FC,$3F,$FF,$F1,$FF,$1F,$87,$E7,$F1,$E3,$FF,$F1,$E3,$FF,$8E,$47,$CD,$F7,$FF,$DF,$0F,$7C,$AB ;
 $50C0 DEFB $00,$FF,$FF,$8E,$1F,$FF,$BF,$B9,$FE,$3C,$3F,$FF,$F1,$FF,$1F,$F1,$BF,$F1,$FF,$FC,$F1,$E3,$FF,$8E,$7C,$4D,$F8,$FF,$CE,$F8,$CF,$23 ;
 $50E0 DEFB $00,$FF,$FF,$F8,$0F,$FC,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FE,$00,$03,$FF,$B0,$56 ;
 $5100 DEFB $00,$00,$0F,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E0,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$80,$00 ;
 $5120 DEFB $00,$01,$FF,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$07,$23,$99,$FF,$FC,$CF,$F8,$00,$00,$00,$00,$03,$01,$FE,$00,$7E,$40,$E0,$00 ;
 $5140 DEFB $00,$7F,$FF,$FF,$F2,$BD,$BF,$FF,$FF,$F8,$00,$00,$E5,$C0,$00,$00,$00,$00,$00,$01,$03,$00,$00,$00,$60,$00,$00,$00,$00,$03,$01,$C0 ;
 $5160 DEFB $00,$FF,$FF,$80,$08,$00,$00,$7F,$C1,$F1,$83,$FE,$0F,$8C,$07,$FC,$1F,$18,$FF,$83,$E3,$07,$FC,$1F,$18,$0F,$80,$3E,$00,$1F,$0C,$26 ;
 $5180 DEFB $00,$FF,$FE,$0E,$00,$00,$3F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$F8,$00,$03,$0F,$81,$2B ;
 $51A0 DEFB $00,$FF,$FF,$00,$00,$07,$7F,$BE,$78,$FC,$7F,$FF,$F1,$FF,$1F,$87,$E7,$F1,$E3,$FF,$F1,$E3,$FF,$8E,$63,$CD,$F7,$FF,$FE,$07,$FA,$2B ;
 $51C0 DEFB $00,$FF,$FF,$DF,$BF,$43,$BF,$B9,$FE,$3C,$3F,$FF,$F1,$FF,$1F,$F0,$3F,$F1,$EF,$FC,$F1,$E1,$FF,$0E,$7E,$0D,$F8,$FF,$CD,$F3,$32,$AF ;
 $51E0 DEFB $00,$FF,$FF,$FC,$04,$08,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$03,$D8,$CE,$FE ;
 $5200 DEFB $00,$00,$0F,$FF,$F6,$FF,$FF,$FF,$E0,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$F0,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$80,$00 ;
 $5220 DEFB $00,$03,$FF,$00,$00,$00,$00,$00,$FF,$00,$00,$00,$00,$07,$07,$83,$81,$FE,$0E,$D8,$00,$00,$00,$00,$03,$01,$FE,$0F,$FF,$C0,$E0,$00 ;
 $5240 DEFB $00,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00,$8B,$60,$00,$00,$00,$00,$00,$01,$49,$00,$00,$01,$C0,$00,$C0,$0F,$00,$03,$01,$80 ;
 $5260 DEFB $00,$FF,$FC,$00,$10,$00,$07,$FF,$FF,$FF,$E7,$FF,$FF,$FF,$6F,$FF,$FF,$FD,$FF,$FF,$FF,$CF,$FF,$FF,$FE,$DF,$C0,$06,$00,$02,$9D,$16 ;
 $5280 DEFB $00,$FF,$FF,$1C,$00,$08,$3F,$BF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$F8,$00,$03,$17,$89,$4C ;
 $52A0 DEFB $00,$FF,$FF,$01,$80,$1F,$7F,$BE,$78,$FC,$7F,$FF,$F1,$FF,$1F,$C7,$EF,$F1,$E1,$FF,$F1,$E3,$FF,$8E,$63,$CD,$F7,$FF,$FE,$6F,$66,$DF ;
 $52C0 DEFB $00,$FF,$FF,$CE,$A4,$05,$7F,$B3,$FF,$1E,$0F,$E7,$F1,$FF,$1F,$F8,$7F,$F1,$E7,$F8,$F1,$F1,$FF,$1E,$7F,$0D,$FC,$FF,$C8,$FF,$F3,$AE ;
 $52E0 DEFB $00,$FF,$FF,$FE,$00,$04,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$80,$83,$77,$E8,$CB ;
 $5300 DEFB $00,$00,$1F,$FF,$C0,$3F,$87,$FF,$F0,$00,$00,$00,$00,$01,$00,$00,$00,$00,$00,$F0,$00,$00,$00,$00,$01,$00,$40,$00,$00,$40,$80,$00 ;
 $5320 DEFB $00,$07,$FE,$00,$00,$00,$00,$00,$FF,$80,$00,$00,$00,$0F,$13,$FF,$40,$FD,$FC,$B8,$00,$00,$00,$00,$07,$00,$FF,$9F,$FF,$C0,$C0,$00 ;
 $5340 DEFB $00,$7F,$FF,$FF,$FF,$FF,$F8,$FF,$FF,$FC,$00,$00,$FE,$C8,$00,$00,$00,$00,$00,$00,$99,$00,$00,$05,$00,$00,$00,$FC,$00,$1C,$02,$80 ;
 $5360 DEFB $00,$FF,$FC,$00,$38,$00,$0F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$0B,$5C,$11 ;
 $5380 DEFB $00,$FF,$FE,$1C,$00,$00,$7F,$BF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$FE,$7F,$03,$87,$05,$6F ;
 $53A0 DEFB $00,$FF,$FF,$03,$80,$08,$7F,$BE,$78,$FC,$7F,$FF,$F1,$FF,$1F,$C3,$CF,$F1,$F0,$07,$F1,$E3,$FF,$8E,$71,$CD,$F7,$FF,$FE,$5E,$83,$5C ;
 $53C0 DEFB $00,$FF,$FF,$E0,$00,$01,$7F,$B3,$FF,$1F,$00,$0F,$F1,$FF,$1F,$F8,$7F,$F1,$E1,$E1,$F1,$F8,$7C,$3E,$7F,$0D,$FC,$00,$08,$B7,$AF,$1C ;
 $53E0 DEFB $78,$FF,$FF,$FE,$00,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F0,$FF,$07,$B8,$D4,$4C ;
 $5400 DEFB $00,$00,$1F,$FE,$00,$70,$00,$3F,$F0,$00,$00,$00,$00,$01,$05,$3A,$00,$00,$BA,$F0,$00,$00,$00,$00,$01,$01,$E0,$00,$03,$C0,$80,$00 ;
 $5420 DEFB $00,$0F,$FE,$00,$00,$00,$00,$00,$FF,$80,$00,$00,$00,$1F,$58,$00,$80,$5A,$00,$0C,$00,$00,$00,$00,$07,$00,$7F,$FF,$FF,$C0,$A0,$00 ;
 $5440 DEFB $00,$7F,$FF,$FF,$1F,$D7,$F1,$FF,$FF,$FE,$00,$00,$54,$30,$10,$00,$00,$00,$01,$0B,$06,$00,$00,$0C,$80,$08,$03,$FC,$78,$0E,$2B,$A0 ;
 $5460 DEFB $00,$FF,$FC,$00,$40,$00,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$E0,$00,$00,$0B,$D0,$2A ;
 $5480 DEFB $00,$FF,$FE,$1C,$00,$00,$7F,$BF,$83,$FF,$C0,$1E,$00,$0C,$04,$0F,$E0,$C0,$78,$03,$C0,$7E,$00,$F8,$1F,$05,$FF,$FF,$C7,$AF,$56,$AB ;
 $54A0 DEFB $00,$FF,$FF,$02,$02,$00,$7F,$BC,$FC,$7C,$7F,$FF,$F1,$FF,$1F,$C3,$CF,$F1,$F8,$01,$F1,$E3,$FF,$8E,$71,$CD,$FB,$FF,$FF,$5E,$69,$9C ;
 $54C0 DEFB $00,$FF,$FF,$E0,$00,$02,$7F,$80,$FC,$07,$C0,$1F,$C0,$7C,$07,$F8,$7F,$C0,$78,$03,$C0,$7E,$00,$F8,$1F,$8D,$FC,$00,$19,$F7,$B9,$36 ;
 $54E0 DEFB $90,$FF,$FF,$FF,$00,$00,$8F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$F5,$1E,$94,$56,$C6 ;
 $5500 DEFB $00,$00,$3F,$FE,$00,$30,$00,$3F,$F8,$00,$00,$00,$00,$01,$0F,$FE,$00,$05,$7E,$F8,$00,$00,$00,$00,$03,$00,$F0,$00,$07,$C0,$80,$00 ;
 $5520 DEFB $00,$1F,$FE,$00,$00,$03,$00,$E0,$FF,$C0,$00,$00,$00,$3F,$08,$00,$80,$09,$00,$06,$80,$00,$00,$00,$07,$00,$60,$80,$9F,$80,$D0,$00 ;
 $5540 DEFB $00,$7F,$FF,$FF,$8F,$C7,$FF,$FF,$FF,$FE,$00,$00,$85,$38,$60,$00,$00,$00,$00,$0C,$A7,$00,$00,$0B,$80,$10,$C1,$F4,$FA,$0E,$07,$E8 ;
 $5560 DEFB $00,$FF,$FC,$00,$41,$86,$1F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00,$1F,$C1,$22 ;
 $5580 DEFB $00,$FF,$FE,$18,$00,$00,$3F,$BF,$83,$FF,$00,$06,$00,$0F,$1F,$1F,$FB,$F1,$F0,$F0,$F1,$F8,$7C,$3E,$1F,$CD,$F9,$FF,$CF,$17,$AB,$33 ;
 $55A0 DEFB $00,$FF,$FF,$06,$02,$00,$3F,$BC,$FC,$7C,$7F,$FF,$F1,$FF,$1F,$E3,$DF,$F1,$FC,$00,$F1,$E3,$FF,$8E,$78,$CD,$FD,$FF,$FE,$6B,$D2,$2F ;
 $55C0 DEFB $00,$FF,$FF,$F0,$00,$00,$7F,$BF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FD,$FD,$FF,$E1,$FB,$DC,$15 ;
 $55E0 DEFB $20,$FF,$FF,$FF,$C0,$05,$8B,$FF,$6F,$FF,$FF,$FF,$FF,$FF,$FF,$7F,$FF,$F9,$FF,$FF,$FF,$DF,$6F,$FF,$FF,$FF,$E0,$00,$1F,$FB,$DC,$3E ;
 $5600 DEFB $00,$00,$7F,$FE,$00,$1E,$00,$3F,$FC,$00,$00,$00,$00,$03,$6F,$FD,$A5,$03,$FF,$F8,$00,$00,$00,$00,$01,$01,$F8,$00,$0F,$C0,$80,$00 ;
 $5620 DEFB $00,$1F,$FE,$1C,$00,$03,$01,$FC,$FF,$C0,$00,$00,$00,$7F,$00,$03,$81,$83,$00,$06,$80,$00,$00,$00,$0F,$00,$00,$00,$00,$00,$FC,$00 ;
 $5640 DEFB $00,$7F,$FE,$1F,$FE,$09,$FF,$C1,$FF,$FE,$00,$00,$09,$56,$91,$00,$00,$00,$02,$1D,$0B,$00,$00,$1F,$60,$00,$20,$FF,$F2,$C7,$83,$68 ;
 $5660 DEFB $00,$FF,$FC,$01,$03,$87,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00,$07,$EA,$40 ;
 $5680 DEFB $00,$FF,$FE,$00,$00,$00,$3F,$BF,$31,$FE,$0F,$F6,$F1,$EF,$1F,$0F,$F3,$F1,$E3,$FC,$F1,$F1,$FF,$1E,$0F,$CD,$F9,$FF,$CF,$2F,$BE,$AA ;
 $56A0 DEFB $00,$FF,$FF,$0E,$00,$0D,$3F,$BC,$00,$7C,$7F,$FF,$F1,$FF,$1F,$E1,$9F,$F1,$FF,$F8,$F1,$E3,$FF,$8E,$78,$CD,$FD,$FF,$FF,$77,$43,$CF ;
 $56C0 DEFB $00,$FF,$FF,$F0,$39,$C0,$7F,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FC,$FF,$83,$72,$FD,$DE ;
 $56E0 DEFB $48,$FF,$FF,$FF,$F7,$FF,$D8,$3E,$03,$1F,$07,$FC,$CF,$83,$FE,$7C,$1F,$F0,$63,$E0,$FF,$9E,$03,$1F,$07,$FC,$70,$DF,$FD,$FD,$DF,$C6 ;
 $5700 DEFB $00,$00,$FF,$F8,$00,$01,$00,$17,$FE,$00,$00,$00,$00,$07,$5F,$B3,$A5,$56,$6E,$FC,$00,$00,$00,$00,$03,$01,$8C,$00,$1F,$C0,$C0,$00 ;
 $5720 DEFB $00,$3F,$FF,$7E,$00,$00,$07,$FF,$FF,$E0,$00,$00,$01,$FF,$00,$06,$00,$E0,$00,$02,$C0,$00,$00,$00,$1F,$00,$00,$00,$00,$00,$FE,$00 ;
 $5740 DEFB $00,$FF,$FC,$0F,$F8,$00,$1E,$00,$FF,$FE,$00,$00,$2A,$5D,$85,$A6,$00,$05,$D2,$82,$91,$00,$00,$57,$58,$01,$00,$FF,$E0,$6F,$C6,$BA ;
 $5760 DEFB $00,$FF,$FF,$07,$03,$03,$3F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$F1,$00,$70,$0F,$F2,$90 ;
 $5780 DEFB $00,$FF,$FE,$00,$00,$00,$3F,$BF,$31,$FC,$3F,$F7,$F1,$FF,$1F,$8F,$F7,$F1,$E3,$FE,$F1,$E1,$FF,$0E,$47,$CD,$F9,$FF,$DF,$03,$8F,$54 ;
 $57A0 DEFB $00,$FF,$FF,$8F,$1B,$FE,$BF,$B9,$FE,$3C,$7F,$FF,$F1,$FF,$1F,$E1,$9F,$F1,$FF,$FC,$F1,$E3,$FF,$8E,$7C,$4D,$F8,$FF,$DE,$7E,$EF,$56 ;
 $57C0 DEFB $00,$FF,$FF,$F8,$3F,$F8,$7F,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FC,$00,$03,$ED,$E0,$D6 ;
 $57E0 DEFB $F0,$FF,$FF,$FF,$FF,$FF,$F8,$00,$00,$00,$00,$F8,$00,$00,$7C,$00,$03,$E0,$00,$00,$1F,$00,$00,$00,$00,$F8,$00,$FE,$F9,$4C,$40,$E2 ; }
@label=AttributeBuffer
 $5800 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$45,$45,$45,$45,$47,$47,$47,$47,$47,$47,$47 ; {Attributes.
 $5820 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$45,$45,$45,$45,$47,$47,$47,$47,$47,$47,$47 ;
 $5840 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$45,$45,$45,$45,$45,$47,$47,$47,$47,$47,$47,$47 ;
 $5860 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$47,$47,$47,$47,$47,$47 ;
 $5880 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$45,$45,$45,$45,$7D,$6F,$47,$47,$47,$47,$47,$47,$47 ;
 $58A0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$68,$68,$45,$45,$45,$45,$6F,$6F,$47,$47,$47,$47,$47,$47,$46,$47,$47 ;
 $58C0 DEFB $47,$47,$47,$47,$47,$47,$46,$47,$47,$47,$47,$47,$47,$47,$47,$68,$45,$45,$45,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$47 ;
 $58E0 DEFB $47,$47,$47,$47,$47,$47,$46,$47,$47,$47,$46,$46,$46,$46,$46,$70,$46,$46,$46,$46,$46,$46,$46,$46,$47,$46,$46,$46,$46,$46,$42,$46 ;
 $5900 DEFB $47,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$42,$42,$42,$42,$42 ;
 $5920 DEFB $47,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42 ;
 $5940 DEFB $47,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$47,$47,$47 ;
 $5960 DEFB $42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5980 DEFB $47,$47,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$47,$47,$47,$47 ;
 $59A0 DEFB $47,$47,$42,$42,$42,$42,$42,$42,$42,$42,$47,$47,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$47,$47,$47,$47 ;
 $59C0 DEFB $47,$48,$48,$48,$48,$48,$48,$48,$48,$48,$47,$47,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$4C,$47,$47,$4F,$4F,$4F,$4F,$4F,$4F,$4F,$4F,$4F ;
 $59E0 DEFB $47,$48,$48,$48,$48,$68,$48,$48,$48,$48,$47,$47,$4C,$4C,$4C,$4C,$6C,$4C,$4C,$4C,$4C,$47,$47,$4F,$4F,$4F,$4F,$4F,$4F,$4F,$4F,$4F ;
 $5A00 DEFB $47,$48,$48,$70,$70,$70,$70,$70,$48,$48,$47,$47,$4C,$4C,$60,$60,$60,$60,$60,$4C,$4C,$47,$47,$4F,$4F,$78,$78,$78,$78,$78,$4F,$4F ;
 $5A20 DEFB $47,$48,$70,$70,$70,$70,$70,$70,$48,$48,$47,$47,$4C,$4C,$60,$60,$60,$60,$60,$60,$4C,$47,$47,$4F,$4F,$78,$78,$78,$78,$78,$4F,$4F ;
 $5A40 DEFB $47,$48,$70,$70,$70,$70,$70,$70,$48,$48,$47,$47,$60,$60,$60,$60,$60,$60,$60,$60,$60,$47,$47,$4F,$78,$78,$78,$78,$78,$78,$78,$4F ;
 $5A60 DEFB $47,$70,$70,$70,$70,$70,$70,$70,$68,$68,$68,$68,$60,$60,$60,$60,$60,$60,$60,$60,$60,$68,$68,$78,$78,$78,$78,$78,$78,$78,$78,$78 ;
 $5A80 DEFB $47,$70,$70,$70,$70,$70,$70,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$78,$38,$38,$78,$78,$78 ;
 $5AA0 DEFB $47,$70,$70,$70,$70,$70,$70,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$78,$38,$38,$78,$78,$78 ;
 $5AC0 DEFB $47,$70,$70,$70,$70,$70,$70,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$68,$78,$78,$78,$78,$78,$78 ;
 $5AE0 DEFB $41,$70,$70,$70,$70,$70,$70,$68,$68,$68,$68,$68,$60,$60,$60,$60,$60,$60,$60,$60,$68,$68,$68,$78,$78,$78,$78,$78,$78,$78,$78,$78 ; }
 $5B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5B98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5BF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C00 DEFB $FF,$00,$00,$00,$FF,$00,$23,$0D
 $5C08 DEFB $0D,$23,$05,$00,$00,$00,$11,$00
 $5C10 DEFB $01,$00,$06,$00,$0B,$00,$01,$00
 $5C18 DEFB $01,$00,$06,$00,$10,$00,$00,$00
 $5C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C30 DEFB $00,$00,$00,$00,$00,$00,$00,$3C
 $5C38 DEFB $40,$00,$FF,$CD,$00,$FC,$7F,$00
 $5C40 DEFB $00,$00,$0A,$00,$FF,$1E,$00,$01
 $5C48 DEFB $07,$00,$00,$96,$5D,$00,$00,$B6
 $5C50 DEFB $5C,$BB,$5C,$CB,$5C,$1D,$5D,$CA
 $5C58 DEFB $5C,$97,$5D,$9A,$5D,$1C,$5D,$CF
 $5C60 DEFB $5D,$9C,$5D,$9C,$5D,$9C,$5D,$2D
 $5C68 DEFB $92,$5C,$00,$02,$00,$00,$00,$00
 $5C70 DEFB $00,$00,$00,$00,$B6,$1A,$00,$00
 $5C78 DEFB $05,$00,$00,$58,$FF,$00,$00,$21
 $5C80 DEFB $00,$5B,$21,$17,$40,$40,$E0,$50
 $5C88 DEFB $21,$16,$21,$17,$03,$00,$00,$00
 $5C90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5C98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5CB0 DEFB $00,$00,$FF,$7F,$FF,$FF,$F4,$09
 $5CB8 DEFB $A8,$10,$4B,$F4,$09,$C4,$15,$53
 $5CC0 DEFB $81,$0F,$C4,$15,$52,$F4,$09,$C4
 $5CC8 DEFB $15,$50,$80,$00,$0A,$28,$00,$E7
 $5CD0 DEFB $30,$0E,$00,$00,$00,$00,$00,$3A
 $5CD8 DEFB $D9,$30,$0E,$00,$00,$00,$00,$00
 $5CE0 DEFB $3A,$DA,$30,$0E,$00,$00,$00,$00
 $5CE8 DEFB $00,$3A,$FD,$33,$32,$37,$36,$37
 $5CF0 DEFB $0E,$00,$00,$FF,$7F,$00,$0D,$00
 $5CF8 DEFB $14,$10,$00,$EF,$22,$22,$AF,$36
 $5D00 DEFB $35,$30,$38,$38,$0E,$00,$00,$40
 $5D08 DEFB $FE,$00,$0D,$00,$1E,$0E,$00,$F9
 $5D10 DEFB $C0,$36,$35,$30,$38,$38,$0E,$00
 $5D18 DEFB $00,$40,$FE,$00,$0D,$00,$28,$16
 $5D20 DEFB $00,$F4,$32,$33,$34,$31,$38,$0E
 $5D28 DEFB $00,$00,$7A,$5B,$00,$2C,$38,$34
 $5D30 DEFB $0E,$00,$00,$54,$00,$00,$0D,$00
 $5D38 DEFB $29,$14,$00,$EF,$22,$6C,$6F,$61
 $5D40 DEFB $64,$22,$AF,$33,$32,$37,$36,$38
 $5D48 DEFB $0E,$00,$00,$00,$80,$00,$0D,$00
 $5D50 DEFB $32,$14,$00,$F8,$22,$52,$61,$6D
 $5D58 DEFB $70,$61,$67,$65,$22,$CA,$31,$30
 $5D60 DEFB $0E,$00,$00,$0A,$00,$00,$0D,$00
 $5D68 DEFB $33,$1E,$00,$F8,$22,$6C,$6F,$61
 $5D70 DEFB $64,$22,$AF,$33,$32,$37,$36,$38
 $5D78 DEFB $0E,$00,$00,$00,$80,$00,$2C,$34
 $5D80 DEFB $34,$38,$0E,$00,$00,$C0,$01,$00
 $5D88 DEFB $0D,$00,$3C,$09,$00,$EF,$22,$6D
 $5D90 DEFB $61,$73,$74,$30,$22,$0D,$80,$EF
 $5D98 DEFB $22,$22,$0D,$80,$00,$00,$40,$FE
 $5DA0 DEFB $00,$20,$20,$20,$20,$20,$20,$00
 $5DA8 DEFB $00,$40,$FE,$00,$00,$03,$6C,$6F
 $5DB0 DEFB $61,$64,$20,$20,$20,$20,$20,$20
 $5DB8 DEFB $C0,$01,$00,$80,$CB,$80,$00,$00
 $5DC0 DEFB $F3,$21,$00,$FE,$11,$00,$00,$01
 $5DC8 DEFB $00,$95,$ED,$B8,$AF,$D3,$FE,$FB
 $5DD0 DEFB $C3,$00,$DE,$00,$00,$00,$00,$00
 $5DD8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5DF8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E08 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E10 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E18 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E28 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E30 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E38 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E40 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E48 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E50 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E58 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E60 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E68 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E70 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E78 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E80 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E88 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E90 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5E98 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EB8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5ED8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $5EF0 DEFB $00,$00,$00,$00,$00,$00,$00,$E6
 $5EF8 DEFB $FE,$CD,$FE,$93,$00,$4A,$FF,$00

; Data block at 5F00
b$5F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $5F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $5F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $5F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $5F80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $5FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $5FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $5FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6080 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $60A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $60C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $60E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $61A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $61C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $61E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Data block at 6200
b$6200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6280 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $62A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $62C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $62E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6380 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $63A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $63C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $63E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6480 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $64A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $64C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $64E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Data block at 6500
b$6500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6560 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6580 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $65A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $65C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $65E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6660 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6680 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $66A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $66C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $66E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6760 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $67A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $67C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $67E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Data block at 6800
b$6800 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6820 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6840 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6860 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6880 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $68A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $68C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $68E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6900 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6920 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$F0,$07,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00
 $6940 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$C7,$FF,$E3,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00
 $6960 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$E1,$CF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00
 $6980 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$F0,$7F,$FF,$FF,$C0,$00,$00,$00,$00,$01,$86,$30
 $69A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E1,$41,$FF,$C7,$FF,$FF,$FF,$00,$00,$00,$00,$3F,$00,$00,$00
 $69C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$C0,$51,$5F,$FF,$FF,$FF,$00,$07,$FF,$FA,$BF,$FF,$F8,$00,$00,$00
 $69E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$FF,$07,$FC,$59,$90,$31,$B0,$50,$3F,$FF,$FF,$EA,$AA,$82,$BF,$F0,$00,$00,$00,$00
 $6A00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $6A20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FC,$1F,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00
 $6A40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$F1,$FF,$E7,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00
 $6A60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$E0,$1F,$80,$3F,$C0,$00,$00,$00,$00,$0F,$F6,$30
 $6A80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$BF,$FF,$F0,$1F,$FF,$FF,$C0,$00,$00,$00,$00,$01,$86,$30
 $6AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$22,$97,$FF,$E3,$FF,$FF,$FF,$00,$00,$00,$0F,$FF,$00,$00,$00
 $6AC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0C,$8A,$AF,$FF,$FF,$FF,$00,$0F,$FF,$FD,$7F,$FF,$50,$00,$00,$00
 $6AE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$81,$FF,$07,$FA,$A7,$22,$A6,$02,$AA,$7F,$D5,$FF,$D5,$55,$45,$5F,$F0,$00,$00,$00,$00

; Shadow Buffer
@label=ShadowScreenBuffer
b$6B00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Pixels.
 $6B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$F0,$07,$FF,$E0,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6B40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$C7,$FF,$E3,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6B60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$E1,$CF,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00 ;
 $6B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$F0,$7F,$FF,$FF,$C0,$00,$00,$00,$00,$01,$86,$30 ;
 $6BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E1,$41,$FF,$C7,$FF,$FF,$FF,$00,$00,$00,$00,$3F,$00,$00,$00 ;
 $6BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$C0,$51,$5F,$FF,$FF,$FF,$00,$07,$FF,$FA,$BF,$FF,$F8,$00,$00,$00 ;
 $6BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$01,$FF,$07,$FC,$59,$90,$31,$B0,$50,$3F,$FF,$FF,$EA,$AA,$82,$BF,$F0,$00,$00,$00,$00 ;
 $6C00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FC,$1F,$FF,$F0,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6C40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$F1,$FF,$E7,$FF,$FF,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $6C60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$E0,$1F,$80,$3F,$C0,$00,$00,$00,$00,$0F,$F6,$30 ;
 $6C80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$BF,$FF,$F0,$1F,$FF,$FF,$C0,$00,$00,$00,$00,$01,$86,$30 ;
 $6CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$22,$97,$FF,$E3,$FF,$FF,$FF,$00,$00,$00,$0F,$FF,$00,$00,$00 ;
 $6CC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0C,$8A,$AF,$FF,$FF,$FF,$00,$0F,$FF,$FD,$7F,$FF,$50,$00,$00,$00 ;
 $6CE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$81,$FF,$07,$FA,$A7,$22,$A6,$02,$AA,$7F,$D5,$FF,$D5,$55,$45,$5F,$F0,$00,$00,$00,$00 ;
 $6D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6D20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FE,$3F,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6D40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$F8,$FF,$F7,$FF,$FF,$C0,$00,$00,$00,$00,$00,$00,$00 ;
 $6D60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$F0,$20,$7F,$C0,$00,$00,$00,$00,$00,$0F,$F6,$30 ;
 $6D80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1F,$FF,$C0,$00,$FF,$FF,$C0,$00,$00,$00,$00,$01,$86,$30 ;
 $6DA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E1,$0F,$FF,$F3,$FF,$FF,$FF,$00,$00,$07,$FF,$FF,$80,$00,$00 ;
 $6DC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3B,$54,$0F,$FF,$FF,$FF,$00,$1F,$FF,$FA,$BF,$EA,$A8,$00,$00,$00 ;
 $6DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$81,$FF,$83,$FB,$BA,$8C,$01,$05,$14,$FF,$EB,$FF,$EA,$0A,$82,$AF,$F0,$00,$00,$00,$00 ;
 $6E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$7F,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6E40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FC,$7F,$F7,$FF,$FF,$E0,$00,$00,$00,$00,$00,$00,$00 ;
 $6E60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$F0,$1F,$FF,$FF,$00,$00,$00,$00,$00,$01,$87,$70 ;
 $6E80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$AF,$FF,$00,$FF,$01,$FF,$C0,$00,$00,$00,$00,$01,$86,$30 ;
 $6EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$02,$2F,$FF,$F9,$FF,$FF,$FF,$00,$00,$7F,$FF,$FF,$80,$00,$00 ;
 $6EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$52,$A2,$A7,$FF,$FF,$FF,$00,$3F,$5F,$FD,$7F,$D5,$50,$00,$00,$00 ;
 $6EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$C1,$FF,$D7,$FC,$55,$20,$44,$C0,$23,$FF,$F5,$FF,$D4,$05,$01,$5F,$F0,$01,$F8,$00,$00 ;
 $6F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$FF,$3F,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $6F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FE,$3F,$F7,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00 ;
 $6F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$F8,$7F,$FF,$FF,$00,$00,$00,$00,$00,$01,$87,$70 ;
 $6F80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$53,$F8,$01,$FF,$FE,$3F,$80,$00,$00,$00,$00,$01,$86,$30 ;
 $6FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$14,$5F,$FF,$FC,$7F,$FF,$FE,$F8,$00,$FF,$FF,$FF,$80,$00,$00 ;
 $6FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$59,$14,$41,$FF,$FF,$FF,$00,$7E,$AF,$FE,$BF,$EA,$A8,$00,$00,$00 ;
 $6FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$EB,$FF,$AB,$FC,$68,$15,$28,$24,$4F,$FF,$EB,$FF,$E8,$00,$02,$AF,$F8,$3F,$F8,$00,$00 ;
 $7000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$FF,$FF,$9F,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3F,$FF,$1F,$F7,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00 ;
 $7060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$F8,$FF,$FF,$FF,$80,$00,$00,$00,$00,$01,$87,$F0 ;
 $7080 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A8,$00,$03,$FF,$FF,$C7,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $70A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$30,$9F,$FF,$FE,$1F,$FF,$FE,$FF,$80,$7F,$FF,$FF,$C0,$00,$00 ;
 $70C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$F5,$26,$2A,$00,$7F,$FF,$FF,$00,$FD,$57,$FD,$5F,$F5,$00,$00,$00,$00 ;
 $70E0 DEFB $00,$00,$00,$00,$00,$00,$07,$FF,$80,$15,$FF,$F5,$FF,$D7,$FD,$50,$8E,$5C,$9E,$3F,$FF,$F5,$FF,$D0,$00,$01,$57,$FF,$FF,$F8,$00,$00 ;
 $7100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$FF,$DF,$00,$70,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$8F,$E7,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00 ;
 $7160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$FF,$FF,$F8,$FF,$FF,$FF,$C0,$00,$00,$00,$00,$01,$87,$F0 ;
 $7180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$45,$C0,$03,$FF,$FF,$F8,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $71A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C5,$5F,$FF,$FF,$81,$FF,$FC,$FF,$E0,$7F,$FF,$FF,$C0,$00,$00 ;
 $71C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$FF,$E2,$98,$44,$63,$07,$FF,$FF,$03,$FA,$AB,$FE,$BF,$E0,$00,$00,$00,$00 ;
 $71E0 DEFB $00,$00,$00,$0F,$C0,$00,$07,$FF,$C0,$0A,$FF,$EB,$FF,$EB,$F6,$C5,$55,$62,$46,$FE,$FF,$FB,$FF,$E8,$00,$00,$AF,$FF,$FF,$FC,$00,$00 ;
 $7200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0F,$FF,$FF,$C8,$FF,$80,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$C7,$EF,$FF,$FF,$F0,$00,$00,$00,$00,$00,$00,$00 ;
 $7260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$7F,$FF,$F8,$FF,$FF,$FF,$C0,$00,$00,$00,$00,$01,$86,$30 ;
 $7280 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C0,$2A,$3F,$87,$FF,$FF,$FE,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $72A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$DC,$0A,$1F,$FF,$FF,$F0,$3F,$F8,$FF,$F0,$7F,$FF,$FF,$C0,$00,$00 ;
 $72C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$FF,$07,$FF,$2D,$02,$2A,$2E,$29,$FF,$FF,$0F,$F5,$55,$FD,$5F,$E0,$00,$00,$00,$00 ;
 $72E0 DEFB $00,$00,$1F,$FF,$E0,$00,$07,$FF,$C0,$15,$FF,$F5,$FF,$D5,$EB,$6B,$2A,$28,$29,$FF,$FF,$F5,$FF,$D0,$00,$01,$57,$FF,$FF,$FC,$00,$00 ;
 $7300 DEFB $00,$1F,$FF,$FF,$F0,$00,$07,$FF,$E0,$0A,$FF,$FB,$FF,$EB,$EA,$F4,$5D,$C1,$43,$FE,$FF,$FA,$FF,$E0,$00,$00,$AF,$FF,$FF,$FC,$00,$00 ;
 $7320 DEFB $2A,$FF,$EA,$AB,$FF,$80,$AF,$FF,$FE,$0A,$FF,$FF,$FF,$FA,$FF,$D1,$53,$FF,$AF,$FE,$AF,$FF,$BF,$F0,$00,$7F,$FB,$FF,$AA,$80,$00,$00 ;
 $7340 DEFB $0A,$BF,$F0,$0A,$FF,$E0,$AF,$FA,$BF,$FA,$FF,$FF,$FF,$FE,$BF,$AF,$FF,$C0,$AF,$FF,$FF,$FF,$EF,$FE,$2A,$BF,$FA,$FF,$FF,$FF,$C0,$00 ;
 $7360 DEFB $02,$AF,$FC,$0B,$FF,$80,$AF,$FB,$FF,$FE,$FF,$EA,$EB,$FF,$AF,$FD,$8C,$20,$AF,$FE,$0A,$BF,$FE,$FF,$FF,$FF,$CA,$BF,$FF,$A8,$00,$00 ;
 $7380 DEFB $00,$AB,$FF,$FF,$E0,$00,$AF,$FF,$EA,$FE,$FF,$C0,$2A,$FF,$EB,$FF,$E0,$38,$AF,$FE,$00,$AB,$E0,$AA,$AA,$80,$00,$00,$00,$00,$00,$00 ;
 $73A0 DEFB $00,$2A,$FF,$FF,$FF,$80,$AF,$F8,$02,$8E,$FF,$C0,$0A,$BF,$FA,$BF,$F8,$20,$AA,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $73C0 DEFB $00,$0A,$BF,$FA,$AF,$FF,$AF,$F8,$00,$0A,$FF,$C0,$02,$AA,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $73E0 DEFB $00,$02,$AF,$FC,$2A,$AF,$EA,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7400 DEFB $03,$FF,$FF,$FF,$F8,$00,$07,$FF,$F0,$15,$FF,$FD,$FF,$F5,$F7,$2A,$AF,$2A,$87,$FF,$7F,$FD,$FF,$D0,$00,$01,$57,$FF,$FF,$FE,$00,$00 ;
 $7420 DEFB $15,$FF,$F5,$55,$FF,$C0,$57,$FF,$FF,$15,$FF,$FF,$FF,$FD,$7F,$EA,$8F,$FF,$57,$FF,$57,$FF,$7F,$F0,$01,$FF,$FD,$FF,$D0,$00,$00,$00 ;
 $7440 DEFB $05,$7F,$F8,$15,$7F,$E0,$57,$FD,$7F,$F5,$FF,$FF,$FF,$FF,$5F,$DF,$FF,$41,$57,$FF,$FF,$FF,$F7,$FF,$15,$5F,$F5,$7F,$FF,$FF,$E0,$00 ;
 $7460 DEFB $01,$5F,$FE,$07,$FF,$00,$57,$FF,$FF,$FD,$FF,$D4,$57,$FF,$D7,$FC,$80,$5C,$77,$FE,$05,$5F,$FF,$7F,$FF,$FF,$85,$5F,$D5,$54,$00,$00 ;
 $7480 DEFB $00,$57,$FF,$FF,$C0,$00,$57,$FF,$55,$7D,$FF,$C0,$15,$FF,$F5,$FF,$E0,$38,$57,$FE,$00,$55,$40,$55,$54,$00,$00,$00,$00,$00,$00,$00 ;
 $74A0 DEFB $00,$15,$FF,$F7,$FF,$C0,$57,$F8,$01,$15,$FF,$C0,$05,$7F,$FD,$7F,$F9,$00,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $74C0 DEFB $00,$05,$7F,$F5,$57,$FF,$D7,$F8,$00,$15,$F8,$00,$01,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $74E0 DEFB $00,$01,$5F,$FC,$15,$50,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7500 DEFB $03,$FF,$FF,$FF,$FC,$00,$AF,$FF,$F0,$0A,$FF,$FB,$FF,$EA,$FF,$55,$5A,$96,$87,$FE,$BF,$FE,$FF,$E0,$00,$00,$AB,$FF,$FF,$FE,$00,$00 ;
 $7520 DEFB $2A,$FF,$EA,$AB,$FF,$C0,$AF,$FB,$FF,$8A,$FF,$FF,$FF,$FA,$BF,$E5,$3F,$EF,$AF,$FE,$AB,$FF,$BF,$F8,$03,$FF,$FB,$FF,$80,$00,$00,$00 ;
 $7540 DEFB $0A,$BF,$F8,$0A,$FF,$C0,$AF,$FA,$BF,$FA,$FF,$FF,$FF,$FF,$AF,$AF,$FA,$81,$AF,$FF,$FE,$FF,$FB,$FF,$AA,$BF,$FA,$FF,$FF,$FF,$E0,$00 ;
 $7560 DEFB $02,$AF,$FE,$0F,$FE,$00,$AF,$FF,$FF,$FE,$FF,$E8,$AB,$FF,$EB,$FF,$C4,$04,$BF,$FE,$02,$AF,$FE,$BF,$FF,$FF,$02,$AA,$AA,$AA,$00,$00 ;
 $7580 DEFB $00,$AB,$FF,$FF,$E0,$00,$AF,$FE,$AA,$BE,$FF,$C0,$2A,$FF,$FA,$FF,$F8,$00,$AF,$FE,$00,$AA,$A0,$0A,$A0,$00,$00,$00,$00,$00,$00,$00 ;
 $75A0 DEFB $00,$2A,$FF,$EB,$FF,$E0,$AF,$F8,$02,$8A,$FF,$C0,$0A,$BF,$FE,$BF,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $75C0 DEFB $00,$0A,$BF,$FA,$AB,$FF,$EF,$F8,$00,$0A,$A8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $75E0 DEFB $00,$02,$AF,$FE,$0A,$A8,$AA,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7600 DEFB $01,$FF,$FF,$FF,$FC,$00,$57,$FF,$F8,$15,$FF,$FD,$FF,$F5,$FF,$2A,$24,$60,$57,$FF,$7F,$FD,$7F,$E0,$00,$00,$57,$FF,$FF,$FE,$00,$00 ;
 $7620 DEFB $15,$7F,$F5,$55,$FF,$C0,$57,$FD,$FF,$95,$FF,$FF,$FF,$FD,$7F,$F0,$FF,$C6,$57,$E7,$5F,$FF,$DF,$F8,$03,$FF,$F5,$FF,$80,$00,$00,$00 ;
 $7640 DEFB $05,$5F,$F8,$05,$7F,$C0,$57,$FD,$5F,$FD,$FF,$DF,$F7,$FF,$5F,$FF,$D5,$03,$D7,$FF,$FD,$7F,$F7,$FF,$C5,$7F,$F5,$7F,$FF,$FF,$E0,$00 ;
 $7660 DEFB $01,$57,$FE,$17,$FC,$00,$57,$FF,$FF,$FD,$FF,$D4,$55,$FF,$D7,$FF,$C4,$00,$47,$FE,$05,$5F,$FF,$5F,$FF,$FC,$05,$55,$55,$54,$00,$00 ;
 $7680 DEFB $00,$55,$FF,$FF,$F0,$00,$57,$FD,$15,$3D,$FF,$C0,$15,$7F,$F5,$FF,$F0,$01,$D7,$FE,$00,$55,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $76A0 DEFB $00,$15,$7F,$F5,$FF,$F0,$57,$F8,$01,$15,$FF,$C0,$05,$5F,$FD,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $76C0 DEFB $00,$05,$5F,$FD,$55,$FF,$D7,$F8,$00,$15,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $76E0 DEFB $00,$01,$57,$FE,$05,$50,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7700 DEFB $01,$FF,$FF,$FF,$FE,$00,$AF,$FF,$F8,$0A,$FF,$FF,$FF,$FA,$FF,$91,$44,$53,$2F,$FE,$BF,$FE,$FF,$E0,$00,$00,$AB,$FF,$FF,$80,$00,$00 ;
 $7720 DEFB $0A,$FF,$F0,$AA,$FF,$C0,$AF,$FA,$FF,$CA,$FF,$FF,$FF,$FE,$B9,$FB,$FF,$EE,$BF,$C6,$FF,$FF,$BF,$F8,$01,$FF,$EA,$FF,$80,$00,$00,$00 ;
 $7740 DEFB $02,$BF,$F8,$0A,$FF,$C0,$AF,$FA,$AF,$FE,$FF,$EF,$FF,$FF,$AF,$FF,$AA,$02,$AF,$BF,$EA,$BF,$FB,$FF,$F2,$FF,$FA,$FF,$FF,$FF,$F0,$00 ;
 $7760 DEFB $00,$AF,$FF,$2F,$FC,$00,$AF,$FF,$FF,$FE,$FF,$E8,$2B,$FF,$EB,$BF,$C0,$00,$A7,$FE,$02,$AF,$FF,$AB,$FF,$F8,$02,$AA,$AA,$80,$00,$00 ;
 $7780 DEFB $00,$2B,$FF,$FF,$F8,$00,$AF,$FA,$0A,$9E,$FF,$C0,$0A,$FF,$FA,$FB,$F2,$08,$AF,$C0,$00,$2A,$A0,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $77A0 DEFB $00,$0A,$FF,$EA,$FF,$F8,$AF,$F8,$00,$8A,$FF,$C0,$02,$BF,$8A,$AA,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $77C0 DEFB $00,$02,$BF,$FA,$AA,$FF,$EF,$F8,$00,$0A,$A8,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $77E0 DEFB $00,$00,$AF,$FE,$02,$A8,$A0,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7800 DEFB $01,$FF,$FF,$FF,$FF,$00,$57,$FF,$FC,$15,$FF,$FF,$FF,$F5,$FF,$8D,$3A,$8F,$77,$FF,$5F,$FF,$7F,$E0,$00,$00,$57,$FF,$FD,$00,$00,$00 ;
 $7820 DEFB $15,$7F,$F0,$55,$7F,$E0,$57,$FD,$FF,$D5,$FF,$FF,$FF,$FD,$7B,$FF,$FF,$FC,$5F,$C7,$FF,$FF,$DF,$FC,$05,$FF,$F5,$FF,$C0,$00,$00,$00 ;
 $7840 DEFB $05,$5F,$FC,$05,$FF,$C0,$57,$FD,$5F,$FD,$FF,$D7,$F7,$FF,$57,$FF,$50,$00,$57,$FF,$D5,$7F,$FD,$FF,$FF,$FF,$E5,$7F,$FF,$FF,$F0,$00 ;
 $7860 DEFB $01,$57,$FF,$1F,$F8,$00,$57,$FF,$FF,$FD,$FF,$D0,$55,$FF,$D5,$DF,$C0,$C4,$77,$FE,$01,$57,$FF,$55,$FF,$D0,$05,$55,$40,$00,$00,$00 ;
 $7880 DEFB $00,$55,$FF,$FF,$FC,$00,$57,$F8,$05,$1D,$FF,$C0,$15,$7F,$FD,$77,$F5,$00,$55,$40,$00,$54,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $78A0 DEFB $00,$15,$7F,$F5,$7F,$FC,$57,$F8,$00,$15,$FF,$C0,$05,$55,$05,$55,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $78C0 DEFB $00,$05,$5F,$F9,$55,$7F,$D7,$F8,$00,$15,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $78E0 DEFB $00,$01,$55,$00,$01,$50,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7900 DEFB $2B,$FF,$FF,$FF,$FF,$80,$AF,$FF,$FC,$0A,$FF,$FF,$FF,$FA,$FC,$88,$65,$3F,$BF,$FE,$AF,$FE,$FF,$F0,$00,$01,$EB,$FF,$AA,$80,$00,$00 ;
 $7920 DEFB $0A,$FF,$F0,$2A,$FF,$E0,$AF,$FA,$FF,$EA,$FF,$FF,$FF,$FE,$B9,$FF,$FF,$F8,$BF,$FF,$FF,$FF,$EF,$FC,$2A,$FF,$EA,$FF,$C0,$0F,$C0,$00 ;
 $7940 DEFB $02,$BF,$FC,$0A,$FF,$80,$AF,$FA,$BF,$FE,$FF,$EB,$EB,$FF,$AF,$FF,$A8,$20,$AF,$FE,$AA,$BF,$FA,$FF,$FF,$FF,$EA,$BF,$FF,$FF,$F0,$00 ;
 $7960 DEFB $00,$AF,$FF,$FF,$F8,$00,$AF,$FF,$FE,$FE,$FF,$C0,$2A,$FF,$EB,$CF,$E3,$80,$AF,$CE,$02,$AF,$FF,$AA,$AA,$A0,$02,$A8,$00,$00,$00,$00 ;
 $7980 DEFB $00,$2B,$FF,$FF,$FE,$00,$AF,$F8,$0A,$8E,$FF,$C0,$0A,$BF,$FA,$FF,$FA,$00,$AA,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $79A0 DEFB $00,$0A,$FF,$FA,$BF,$FE,$AF,$F8,$00,$8A,$FF,$C0,$02,$AA,$82,$AA,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $79C0 DEFB $00,$02,$BF,$FC,$AA,$BF,$EF,$F8,$00,$0A,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $79E0 DEFB $00,$00,$AA,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7A00 DEFB $55,$FF,$FD,$5F,$FF,$80,$57,$FF,$FE,$15,$FF,$FF,$FF,$FD,$7B,$CC,$28,$FD,$77,$FF,$5F,$FF,$7F,$F0,$00,$0F,$F5,$FF,$55,$40,$00,$00 ;
 $7A20 DEFB $15,$7F,$F0,$15,$7F,$E0,$57,$FD,$7F,$F5,$FF,$FF,$FF,$FF,$5F,$1F,$FF,$F0,$57,$FF,$FF,$FF,$FF,$FE,$55,$5F,$F5,$FF,$C3,$FF,$C0,$00 ;
 $7A40 DEFB $05,$5F,$FC,$05,$FF,$80,$57,$FD,$7F,$FD,$FF,$D5,$D7,$FF,$D7,$FF,$8C,$10,$D7,$FF,$45,$5F,$FD,$7F,$FF,$FF,$C5,$7F,$FF,$FC,$00,$00 ;
 $7A60 DEFB $01,$57,$FF,$FF,$F0,$00,$57,$FF,$F5,$FD,$FF,$C0,$15,$FF,$F5,$FE,$E0,$1C,$57,$DE,$01,$57,$FF,$D5,$55,$40,$00,$00,$00,$00,$00,$00 ;
 $7A80 DEFB $00,$55,$FF,$FF,$FF,$00,$57,$F8,$05,$1D,$FF,$C0,$05,$7F,$FD,$7F,$F8,$00,$55,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7AA0 DEFB $00,$15,$7F,$F5,$5F,$FF,$57,$F8,$00,$15,$FF,$C0,$01,$55,$05,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7AC0 DEFB $00,$05,$5F,$FC,$55,$5F,$D7,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7AE0 DEFB $00,$01,$55,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7B00 DEFB $00,$00,$AA,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7B20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7B40 DEFB $00,$00,$00,$00,$00,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7B60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7B80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7BA0 DEFB $00,$3E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7C00 DEFB $00,$00,$55,$40,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7C20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7C40 DEFB $FF,$63,$00,$18,$00,$41,$00,$1C,$3E,$3E,$3E,$00,$7E,$3E,$60,$60,$C3,$00,$63,$3F,$7C,$63,$3E,$C3,$00,$63,$7F,$3E,$00,$3E,$3E,$00 ;
 $7C60 DEFB $00,$00,$00,$00,$00,$00,$3E,$60,$60,$00,$7E,$3F,$3E,$63,$FF,$3E,$00,$7E,$7F,$3E,$7F,$7E,$63,$7F,$7C,$00,$00,$00,$00,$00,$00,$00 ;
 $7C80 DEFB $3E,$3E,$FF,$3F,$63,$3F,$3E,$3F,$3E,$63,$00,$3F,$63,$3E,$00,$00,$3E,$63,$FF,$63,$3E,$7E,$3F,$3E,$7F,$7C,$00,$63,$3E,$7F,$7E,$00 ;
 $7CA0 DEFB $00,$41,$00,$3E,$3E,$7E,$C3,$7E,$3F,$3E,$63,$FF,$00,$3E,$3E,$FF,$3F,$63,$3F,$3E,$3F,$3E,$63,$00,$1C,$3E,$3E,$7F,$00,$00,$00,$00 ;
 $7CC0 DEFB $00,$00,$00,$3E,$3E,$7C,$3F,$63,$3E,$00,$7E,$C3,$00,$3E,$3E,$FF,$3E,$60,$C3,$3E,$FF,$00,$3E,$3E,$7C,$7F,$7E,$3E,$00,$00,$00,$00 ;
 $7CE0 DEFB $00,$3E,$00,$3E,$3E,$7F,$FF,$63,$3E,$7E,$7F,$00,$3E,$FF,$63,$7C,$3F,$3E,$3E,$00,$7E,$7E,$3E,$7C,$63,$3E,$FF,$3F,$3E,$63,$00,$00 ;
 $7D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7D20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7D40 DEFB $18,$77,$00,$3C,$00,$5D,$00,$3C,$63,$63,$60,$00,$63,$63,$60,$60,$66,$00,$77,$0C,$66,$63,$63,$66,$00,$77,$60,$63,$00,$63,$63,$00 ;
 $7D60 DEFB $00,$00,$00,$00,$00,$00,$63,$60,$60,$00,$63,$0C,$63,$63,$18,$60,$00,$63,$60,$60,$60,$63,$63,$60,$66,$00,$00,$00,$00,$00,$00,$00 ;
 $7D80 DEFB $63,$63,$18,$0C,$63,$0C,$60,$0C,$63,$73,$00,$0C,$73,$63,$00,$00,$63,$63,$18,$63,$63,$63,$0C,$60,$60,$66,$00,$63,$60,$60,$63,$00 ;
 $7DA0 DEFB $00,$5D,$00,$63,$63,$63,$66,$63,$0C,$63,$63,$18,$00,$63,$63,$18,$0C,$63,$0C,$60,$0C,$63,$73,$00,$3C,$63,$63,$03,$00,$00,$00,$00 ;
 $7DC0 DEFB $00,$00,$00,$63,$63,$66,$0C,$73,$63,$00,$63,$66,$00,$63,$63,$18,$63,$60,$66,$60,$18,$00,$63,$63,$66,$60,$63,$60,$00,$00,$00,$00 ;
 $7DE0 DEFB $00,$63,$00,$60,$63,$60,$18,$63,$63,$63,$60,$00,$60,$18,$63,$66,$0C,$63,$60,$00,$63,$63,$63,$66,$63,$63,$18,$0C,$63,$73,$00,$00 ;
 $7E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7E40 DEFB $18,$7F,$00,$18,$00,$51,$00,$0C,$63,$3E,$7E,$00,$7E,$63,$60,$60,$3C,$00,$7F,$0C,$63,$63,$63,$3C,$00,$7F,$7E,$60,$00,$60,$63,$00 ;
 $7E60 DEFB $00,$00,$00,$00,$00,$00,$63,$60,$60,$00,$63,$0C,$60,$7F,$18,$3E,$00,$63,$7E,$3E,$7E,$63,$63,$7E,$63,$00,$00,$00,$00,$00,$00,$00 ;
 $7E80 DEFB $63,$60,$18,$0C,$63,$0C,$3E,$0C,$63,$7B,$00,$0C,$7B,$60,$00,$00,$63,$63,$18,$7F,$63,$63,$0C,$3E,$7E,$63,$00,$63,$3E,$7E,$63,$00 ;
 $7EA0 DEFB $00,$51,$00,$60,$63,$63,$3C,$63,$0C,$60,$7F,$18,$00,$63,$60,$18,$0C,$63,$0C,$3E,$0C,$63,$7B,$00,$0C,$63,$3E,$06,$00,$00,$00,$00 ;
 $7EC0 DEFB $00,$00,$00,$60,$63,$63,$0C,$7B,$60,$00,$7E,$3C,$00,$60,$63,$18,$63,$60,$3C,$3E,$18,$00,$60,$63,$63,$7E,$63,$3E,$00,$00,$00,$00 ;
 $7EE0 DEFB $00,$63,$00,$3E,$63,$7E,$18,$63,$63,$63,$7E,$00,$3E,$18,$63,$63,$0C,$63,$3E,$00,$63,$63,$63,$63,$63,$60,$18,$0C,$63,$7B,$00,$00 ;
 $7F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $7F40 DEFB $18,$63,$00,$3F,$00,$5D,$00,$0C,$3F,$63,$63,$00,$63,$7F,$60,$60,$18,$00,$63,$0C,$63,$63,$7F,$18,$00,$63,$60,$6F,$00,$60,$63,$00 ;
 $7F60 DEFB $00,$00,$00,$00,$00,$00,$7F,$60,$60,$00,$7E,$0C,$6F,$63,$18,$03,$00,$7E,$60,$03,$60,$7E,$63,$60,$63,$00,$00,$00,$00,$00,$00,$00 ;
 $7F80 DEFB $7F,$60,$18,$0C,$63,$0C,$03,$0C,$63,$6F,$00,$0C,$6F,$60,$00,$00,$7F,$63,$18,$63,$63,$7E,$0C,$03,$60,$63,$00,$63,$03,$60,$7E,$00 ;
 $7FA0 DEFB $00,$5D,$00,$60,$63,$7E,$18,$7E,$0C,$6F,$63,$18,$00,$7F,$60,$18,$0C,$63,$0C,$03,$0C,$63,$6F,$00,$0C,$3F,$63,$0C,$00,$00,$00,$00 ;
 $7FC0 DEFB $00,$00,$00,$60,$63,$63,$0C,$6F,$6F,$00,$63,$18,$00,$60,$7F,$18,$7F,$60,$18,$03,$18,$00,$60,$63,$63,$60,$7E,$03,$00,$00,$00,$00 ;
 $7FE0 DEFB $00,$7F,$00,$03,$63,$60,$18,$63,$7F,$7E,$60,$00,$03,$18,$63,$63,$0C,$63,$03,$00,$7E,$7E,$63,$63,$63,$60,$18,$0C,$63,$6F,$00,$00 ;
 $8000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $8020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $8040 DEFB $18,$63,$00,$66,$00,$41,$00,$0C,$03,$63,$63,$00,$63,$63,$60,$60,$18,$00,$63,$0C,$66,$7F,$63,$18,$00,$63,$60,$63,$00,$63,$63,$1C ;
 $8060 DEFB $00,$00,$00,$00,$00,$00,$63,$60,$60,$00,$66,$0C,$63,$63,$18,$63,$00,$66,$60,$63,$60,$66,$36,$60,$66,$1C,$00,$00,$00,$00,$00,$00 ;
 $8080 DEFB $63,$63,$18,$0C,$36,$0C,$63,$0C,$63,$67,$00,$0C,$67,$63,$1C,$00,$63,$63,$18,$63,$63,$66,$0C,$63,$60,$66,$00,$63,$63,$60,$66,$1C ;
 $80A0 DEFB $00,$41,$00,$63,$63,$60,$18,$66,$0C,$63,$63,$18,$00,$63,$63,$18,$0C,$36,$0C,$63,$0C,$63,$67,$00,$0C,$03,$63,$18,$1C,$00,$00,$00 ;
 $80C0 DEFB $00,$00,$00,$63,$63,$66,$0C,$67,$63,$00,$63,$18,$00,$63,$63,$18,$63,$60,$18,$63,$18,$00,$63,$63,$66,$60,$66,$63,$1C,$00,$00,$00 ;
 $80E0 DEFB $00,$63,$00,$63,$63,$60,$18,$7F,$63,$66,$60,$00,$63,$18,$63,$66,$0C,$63,$63,$00,$60,$66,$63,$66,$63,$63,$18,$0C,$63,$67,$1C,$00 ;
 $8100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $8120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $8140 DEFB $18,$63,$00,$3F,$00,$3E,$00,$3F,$3E,$3E,$3E,$00,$7E,$63,$7F,$7F,$18,$00,$63,$3F,$7C,$36,$63,$18,$00,$63,$60,$3E,$00,$3E,$3E,$1C ;
 $8160 DEFB $00,$00,$00,$00,$00,$00,$63,$7F,$7F,$00,$63,$3F,$3E,$63,$18,$3E,$00,$63,$7F,$3E,$7F,$63,$1C,$7F,$7C,$1C,$00,$00,$00,$00,$00,$00 ;
 $8180 DEFB $63,$3E,$18,$3F,$1C,$3F,$3E,$3F,$3E,$63,$00,$3F,$63,$3E,$1C,$00,$63,$3E,$18,$63,$3E,$63,$3F,$3E,$7F,$7C,$00,$3E,$3E,$7F,$63,$1C ;
 $81A0 DEFB $00,$3E,$00,$3E,$3E,$60,$18,$63,$3F,$3E,$63,$18,$00,$63,$3E,$18,$3F,$1C,$3F,$3E,$3F,$3E,$63,$00,$3F,$3E,$3E,$18,$1C,$00,$00,$00 ;
 $81C0 DEFB $00,$00,$00,$3E,$3E,$7C,$3F,$63,$3E,$00,$7E,$18,$00,$3E,$63,$18,$63,$7F,$18,$3E,$18,$00,$3E,$3E,$7C,$7F,$63,$3E,$1C,$00,$00,$00 ;
 $81E0 DEFB $00,$63,$00,$3E,$3E,$60,$18,$36,$63,$63,$7F,$00,$3E,$18,$3E,$7C,$3F,$3E,$3E,$00,$60,$63,$3E,$7C,$3E,$3E,$18,$3F,$3E,$63,$1C,$00 ;
 $8200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $8220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $8240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $8260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $8280 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $82A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $82C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $82E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; }
@label=ShadowAttributeBuffer
 $8300 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$47,$47,$47,$47 ; {Attributes.
 $8320 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$47,$47,$47,$47 ;
 $8340 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$45,$45,$45,$45,$47,$47,$47,$47,$43,$43,$43 ;
 $8360 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$45,$45,$45,$45,$45,$47,$47,$47,$47,$44,$44,$44 ;
 $8380 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$47,$47,$47,$43,$43,$43 ;
 $83A0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$45,$45,$45,$45,$7D,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $83C0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$45,$45,$45,$6F,$6F,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $83E0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$45,$47,$47,$47,$46,$46,$47,$47,$46,$46,$46,$46,$46,$46 ;
 $8400 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$45,$46,$46,$46,$46,$46,$46,$47,$46,$46,$46,$46,$46,$46,$46 ;
 $8420 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$42,$42,$42,$42,$42,$42,$42,$42 ;
 $8440 DEFB $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42 ;
 $8460 DEFB $46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$46,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42 ;
 $8480 DEFB $46,$46,$46,$46,$46,$46,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42 ;
 $84A0 DEFB $42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42 ;
 $84C0 DEFB $42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42 ;
 $84E0 DEFB $42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42 ;
 $8500 DEFB $42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42,$42 ;
 $8520 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$46,$46,$46,$47,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $8540 DEFB $45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45 ;
 $8560 DEFB $45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45 ;
 $8580 DEFB $45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45 ;
 $85A0 DEFB $45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45 ;
 $85C0 DEFB $45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45 ;
 $85E0 DEFB $45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45 ; }

; Data block at 8600
b$8600 DEFB $68,$00,$00,$00,$00,$00,$00,$00,$00,$78,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$68,$18,$18,$3C,$7E,$7E,$FF,$FF,$FF,$68,$00,$00,$00,$00 ; {Pixels.
 $8620 DEFB $00,$22,$66,$EE,$68,$00,$1F,$1F,$1F,$1F,$1F,$04,$04,$68,$00,$F8,$F8,$F8,$F8,$F8,$20,$20,$68,$04,$04,$04,$24,$24,$24,$24,$24,$68 ;
 $8640 DEFB $40,$40,$40,$40,$48,$48,$48,$48,$68,$00,$00,$20,$34,$38,$1C,$1E,$18,$68,$18,$18,$18,$18,$18,$18,$18,$18,$68,$03,$03,$03,$03,$03 ;
 $8660 DEFB $03,$03,$03,$68,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$68,$33,$33,$33,$33,$33,$33,$33,$33,$68,$CC,$CC,$CC,$CC,$CC,$CC,$CC,$CC,$68,$34 ;
 $8680 DEFB $2C,$34,$2C,$34,$2C,$34,$2C,$68,$4C,$54,$64,$54,$4C,$54,$64,$7C,$68,$38,$7C,$FE,$FE,$7C,$7C,$7C,$54,$60,$FF,$FF,$FE,$FE,$FE,$FC ;
 $86A0 DEFB $FE,$FD,$60,$3F,$5F,$1F,$9F,$2F,$5F,$0F,$2F,$60,$FC,$FA,$FD,$F0,$FC,$F0,$F1,$E4,$60,$87,$07,$17,$83,$17,$6F,$0B,$63,$60,$FF,$FF ;
 $86C0 DEFB $FF,$FF,$FF,$EA,$A2,$00,$60,$3F,$3F,$3F,$3F,$3F,$2A,$22,$00,$60,$FF,$FF,$FF,$FF,$FE,$F4,$FA,$E4,$60,$FF,$FF,$FF,$FF,$3F,$47,$83 ;
 $86E0 DEFB $29,$60,$D6,$C8,$D3,$E0,$D4,$E5,$F1,$EA,$60,$41,$45,$09,$53,$C3,$23,$0B,$17,$60,$C5,$80,$15,$80,$21,$8A,$81,$A2,$60,$C1,$F3,$F3 ;
 $8700 DEFB $F3,$F3,$A2,$82,$00,$60,$F9,$E4,$D0,$85,$50,$90,$08,$90,$60,$2F,$4C,$01,$A4,$00,$BC,$09,$20,$60,$6F,$01,$89,$00,$48,$0C,$01,$30 ;
 $8720 DEFB $60,$43,$11,$00,$94,$C6,$F0,$E2,$F1,$60,$50,$15,$21,$20,$8A,$20,$12,$14,$60,$02,$84,$11,$05,$82,$12,$09,$27,$78,$FF,$FF,$FF,$FF ;
 $8740 DEFB $FF,$FF,$FF,$FF,$78,$01,$80,$FF,$FF,$FF,$FF,$FF,$FF,$78,$FF,$20,$40,$80,$00,$00,$FF,$FF,$78,$FF,$02,$04,$08,$10,$20,$FF,$DF,$78 ;
 $8760 DEFB $FF,$00,$00,$00,$01,$02,$FF,$FD,$78,$FF,$00,$00,$00,$80,$40,$FF,$BF,$78,$FF,$40,$20,$10,$08,$04,$FF,$FB,$78,$FF,$04,$02,$01,$00 ;
 $8780 DEFB $00,$FF,$FF,$78,$FF,$40,$40,$80,$80,$80,$FF,$7F,$78,$FF,$02,$02,$01,$01,$01,$FF,$FE,$78,$FF,$00,$00,$00,$00,$00,$FF,$FF,$78,$FF ;
 $87A0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$78,$FF,$FE,$FC,$F8,$F0,$E0,$FF,$EF,$78,$FF,$7F,$3F,$1F,$0F,$07,$FF,$FF,$78,$AA,$55,$AA,$57,$FF,$FF ;
 $87C0 DEFB $EA,$75,$78,$BA,$5D,$FF,$FF,$AE,$55,$AA,$55,$78,$FF,$00,$00,$00,$00,$00,$FF,$FF,$38,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$38,$FE,$FE ;
 $87E0 DEFB $FE,$FE,$FE,$FE,$FE,$FE,$38,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$FC,$38,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$F8,$38,$F0,$F0,$F0,$F0,$F0,$F0,$F0 ;
 $8800 DEFB $F0,$38,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$E0,$38,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$C0,$38,$80,$80,$80,$80,$80,$80,$80,$80,$68,$00,$00,$00 ;
 $8820 DEFB $00,$00,$00,$00,$00,$79,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$4F,$2E,$16,$2E,$16,$2E,$16,$2E,$16,$79,$FF,$03,$07,$0F,$1F,$3F,$7F,$FF ;
 $8840 DEFB $79,$FF,$FE,$FC,$F8,$F0,$E0,$C0,$FF,$79,$FF,$00,$00,$00,$00,$00,$00,$FF,$60,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF,$78,$00,$01,$38,$7D ;
 $8860 DEFB $7C,$7D,$38,$01,$78,$00,$00,$00,$00,$00,$00,$00,$AA,$78,$00,$80,$1C,$BE,$3E,$BE,$1C,$80,$79,$00,$00,$00,$00,$00,$00,$00,$00,$68 ;
 $8880 DEFB $00,$00,$00,$00,$00,$00,$18,$1C,$68,$00,$00,$00,$00,$00,$00,$80,$80,$68,$1D,$0F,$FF,$0F,$0F,$0C,$08,$18,$68,$80,$00,$00,$A0,$E0 ;
 $88A0 DEFB $00,$00,$00,$79,$FF,$C0,$E0,$F0,$F8,$FC,$FE,$FF,$68,$01,$01,$03,$03,$07,$3F,$FF,$FF,$68,$18,$19,$1F,$1F,$3F,$3F,$7F,$FF,$68,$00 ;
 $88C0 DEFB $01,$03,$03,$07,$0F,$1F,$3F,$68,$00,$00,$00,$00,$00,$01,$0F,$7F,$68,$08,$08,$18,$19,$1F,$FF,$FF,$FF,$68,$00,$00,$00,$FF,$FF,$FF ;
 $88E0 DEFB $FF,$FF,$68,$00,$00,$00,$C0,$FC,$FF,$FF,$FF,$68,$00,$00,$00,$00,$00,$80,$E0,$FC,$68,$00,$E0,$FC,$FF,$FF,$FF,$FF,$FF,$38,$FF,$FF ;
 $8900 DEFB $38,$00,$00,$00,$00,$00,$00,$00,$00,$78,$00,$3F,$3F,$35,$3A,$35,$3A,$20,$78,$00,$F8,$F8,$50,$A8,$50,$A8,$00,$78,$3A,$35,$3A,$35 ;
 $8920 DEFB $3A,$20,$00,$00,$78,$A8,$50,$A8,$50,$A8,$00,$00,$00,$78,$3F,$3F,$3A,$35,$3A,$35,$00,$00,$78,$F8,$F8,$A8,$50,$A8,$50,$00,$00,$78 ;
 $8940 DEFB $3F,$3F,$3F,$3F,$3F,$3F,$00,$00,$78,$F8,$F8,$F8,$F8,$F8,$F8,$00,$00,$78,$00,$7E,$00,$7E,$00,$7E,$00,$00,$78,$00,$00,$7E,$00,$7E ;
 $8960 DEFB $00,$00,$00,$78,$00,$FF,$FF,$00,$FF,$55,$00,$00,$78,$FF,$55,$FF,$AA,$55,$22,$00,$00,$78,$FF,$00,$FF,$FF,$AA,$55,$AA,$00,$38,$BF ;
 $8980 DEFB $7F,$3F,$7F,$3F,$3F,$3E,$27,$38,$FF,$FF,$FF,$FC,$FC,$FC,$F4,$14,$78,$00,$00,$00,$00,$00,$00,$00,$00,$78,$00,$00,$00,$00,$00,$00 ;
 $89A0 DEFB $00,$00,$38,$E4,$7C,$FC,$FC,$FE,$FC,$FE,$FD,$38,$FC,$FA,$FC,$FC,$FF,$90,$10,$08,$78,$00,$00,$00,$00,$00,$00,$00,$00,$38,$28,$2F ;
 $89C0 DEFB $3F,$3F,$3F,$FF,$FF,$FF,$38,$FF,$FF,$7F,$7F,$FF,$7F,$7D,$7C,$38,$3C,$66,$66,$66,$66,$66,$3C,$00,$38,$7C,$66,$66,$7C,$60,$60,$60 ;
 $89E0 DEFB $00,$78,$00,$00,$3F,$3F,$3A,$35,$3A,$35,$78,$00,$00,$FF,$FF,$AA,$55,$AA,$55,$78,$00,$00,$FC,$FC,$A8,$54,$A8,$54,$78,$3A,$35,$3A ;
 $8A00 DEFB $35,$3A,$35,$3A,$35,$78,$AA,$55,$AA,$55,$AA,$55,$AA,$55,$78,$A8,$54,$A8,$54,$A8,$54,$A8,$54,$78,$3A,$35,$3A,$35,$3A,$35,$3A,$3F ;
 $8A20 DEFB $78,$AA,$55,$AA,$55,$AA,$55,$AA,$FF,$78,$A8,$54,$A8,$54,$A8,$54,$A8,$FC,$78,$00,$00,$FC,$FC,$88,$44,$A0,$54,$78,$00,$3C,$3C,$3C ;
 $8A40 DEFB $3C,$00,$00,$00,$78,$00,$0F,$0F,$0F,$0F,$00,$00,$00,$78,$00,$F0,$F0,$F0,$F0,$00,$00,$00,$78,$00,$03,$05,$06,$05,$06,$03,$00,$78 ;
 $8A60 DEFB $00,$C0,$60,$A0,$60,$A0,$C0,$00,$78,$00,$00,$FF,$81,$81,$81,$81,$81,$78,$BD,$AD,$B5,$AD,$B5,$AD,$B5,$BD,$78,$81,$81,$81,$81,$81 ;
 $8A80 DEFB $81,$81,$81,$78,$00,$DB,$00,$DB,$00,$DB,$00,$00,$38,$3C,$66,$60,$3C,$06,$66,$3C,$00,$38,$7E,$60,$60,$7C,$60,$60,$60,$00,$38,$66 ;
 $8AA0 DEFB $66,$66,$7E,$66,$66,$66,$00,$38,$7E,$18,$18,$18,$18,$18,$18,$00,$38,$28,$2F,$3F,$3F,$3F,$FF,$FF,$FF,$38,$E4,$7C,$FC,$FC,$FE,$FC ;
 $8AC0 DEFB $FE,$FD,$38,$FF,$FF,$7F,$7F,$FF,$7F,$7D,$7C,$38,$FC,$FA,$FC,$FC,$FF,$90,$10,$08,$78,$00,$00,$3F,$20,$20,$27,$25,$26,$78,$00,$00 ;
 $8AE0 DEFB $F8,$08,$08,$C8,$48,$C8,$78,$25,$27,$20,$20,$20,$20,$2C,$2C,$78,$48,$C8,$08,$08,$08,$08,$08,$08,$78,$20,$20,$20,$20,$20,$20,$20 ;
 $8B00 DEFB $20,$78,$08,$08,$08,$08,$08,$08,$08,$08,$38,$7E,$60,$60,$7C,$60,$60,$7E,$00,$38,$60,$60,$60,$60,$60,$60,$7E,$00,$38,$3C,$66,$66 ;
 $8B20 DEFB $7E,$66,$66,$66,$00,$38,$3C,$66,$60,$60,$60,$66,$3C,$00,$38,$3C,$18,$18,$18,$18,$18,$3C,$00,$38,$00,$00,$FF,$FF,$AA,$55,$00,$00 ;
 $8B40 DEFB $38,$08,$10,$08,$16,$AD,$44,$08,$30,$38,$87,$88,$48,$30,$10,$08,$10,$60,$38,$02,$82,$4C,$54,$22,$22,$40,$20,$38,$00,$E0,$16,$09 ;
 $8B60 DEFB $30,$C0,$00,$00,$38,$1C,$B7,$23,$6E,$7E,$BD,$48,$02,$38,$00,$9C,$76,$D2,$F3,$FD,$3F,$DE,$38,$00,$1E,$73,$DF,$FF,$EE,$FC,$F3,$38 ;
 $8B80 DEFB $20,$44,$73,$DF,$ED,$F2,$39,$4F,$38,$32,$F9,$8C,$4F,$9F,$DB,$FF,$78,$38,$10,$88,$C7,$7E,$7C,$E5,$FF,$0F,$38,$80,$03,$8F,$FF,$63 ;
 $8BA0 DEFB $7B,$FE,$0C,$38,$1C,$F6,$BF,$E7,$3F,$BC,$79,$0F,$38,$02,$F4,$9C,$E4,$FE,$FA,$FE,$38,$78,$28,$6F,$BF,$7F,$60,$EC,$E8,$68,$78,$E4 ;
 $8BC0 DEFB $7E,$FD,$FE,$1E,$07,$16,$14,$78,$E0,$F0,$78,$60,$F0,$7F,$FD,$35,$78,$06,$3F,$7E,$1F,$3E,$FF,$77,$AA,$70,$28,$6F,$BF,$77,$63,$F3 ;
 $8BE0 DEFB $F2,$62,$70,$E4,$7E,$FD,$FE,$FE,$FF,$7E,$1C,$70,$E1,$E8,$60,$70,$F8,$7F,$FD,$35,$70,$0E,$07,$06,$07,$0E,$FF,$77,$AA,$58,$28,$6F ;
 $8C00 DEFB $BF,$71,$71,$F1,$E0,$68,$58,$E4,$7E,$FD,$FE,$FE,$FF,$FE,$80,$58,$E0,$E8,$68,$68,$E0,$7F,$FD,$35,$58,$BA,$BB,$86,$D7,$C6,$FF,$77 ;
 $8C20 DEFB $AA,$70,$28,$6F,$B8,$76,$6F,$ED,$E9,$69,$60,$E4,$7E,$3D,$0E,$06,$03,$02,$00,$70,$E9,$E9,$6B,$6F,$F6,$78,$FD,$35,$60,$02,$03,$02 ;
 $8C40 DEFB $07,$0E,$3F,$77,$AA,$50,$28,$6F,$BF,$7C,$7C,$F0,$E7,$65,$50,$E4,$7E,$FD,$7E,$7E,$1F,$CE,$4C,$50,$E3,$E1,$6C,$63,$EC,$70,$FD,$35 ;
 $8C60 DEFB $50,$8E,$0F,$6E,$8F,$6E,$1F,$77,$AA,$70,$28,$6F,$F2,$60,$7F,$80,$9F,$3B,$70,$E4,$7E,$85,$0A,$F2,$23,$22,$80,$70,$B6,$BD,$3B,$1F ;
 $8C80 DEFB $80,$7F,$FD,$35,$70,$A2,$83,$A6,$2F,$1E,$FF,$77,$AA,$78,$28,$7F,$A7,$67,$66,$E5,$E4,$60,$78,$E4,$7E,$ED,$9E,$7E,$FF,$06,$04,$78 ;
 $8CA0 DEFB $FC,$FE,$71,$60,$E4,$64,$FF,$35,$78,$06,$0F,$0E,$1F,$1E,$1F,$77,$AA,$60,$BE,$6A,$D0,$62,$68,$F5,$E8,$7E,$60,$E4,$7A,$29,$B2,$28 ;
 $8CC0 DEFB $43,$14,$8E,$68,$F8,$FD,$7B,$70,$F4,$7A,$FC,$35,$68,$16,$3F,$DE,$0F,$0E,$1F,$3F,$AA,$70,$28,$6F,$FF,$5E,$0E,$D6,$F9,$78,$70,$E4 ;
 $8CE0 DEFB $7E,$7D,$3E,$76,$C3,$36,$FC,$50,$E0,$E8,$64,$74,$F0,$78,$F8,$35,$50,$1E,$1F,$1E,$3F,$3E,$7F,$7F,$AA,$68,$28,$6F,$BF,$7C,$7B,$F7 ;
 $8D00 DEFB $E0,$6F,$68,$E4,$7E,$FD,$02,$F2,$EB,$1A,$D8,$68,$EB,$E1,$6B,$6F,$E0,$7F,$FD,$35,$68,$DA,$5B,$D6,$CF,$1E,$FF,$77,$AA,$70,$28,$71 ;
 $8D20 DEFB $F9,$7C,$7C,$F8,$E1,$41,$70,$E4,$9E,$1F,$3E,$1E,$87,$C2,$82,$70,$C1,$C0,$41,$60,$E0,$78,$FD,$35,$70,$C2,$C3,$C2,$87,$06,$1F,$77 ;
 $8D40 DEFB $AA,$78,$28,$6F,$BC,$78,$71,$F2,$F2,$78,$78,$E4,$7E,$7D,$3E,$1E,$1F,$1E,$3C,$78,$F8,$FC,$7C,$7F,$FC,$7C,$FF,$34,$78,$3E,$7F,$7E ;
 $8D60 DEFB $FF,$7E,$7F,$F7,$AA,$78,$28,$6F,$9C,$6B,$76,$F5,$D5,$7B,$38,$00,$00,$00,$00,$00,$00,$00,$00,$38,$00,$00,$00,$00,$00,$00,$00,$00 ; }
 $8D80 DEFB $36,$38,$00,$00,$00,$00,$01,$03
 $8D88 DEFB $02,$07,$38,$00,$1F,$7F,$EF,$BC
 $8D90 DEFB $79,$B3,$75,$38,$00,$80,$40,$E0
 $8D98 DEFB $30,$90,$60,$F0,$36,$36,$38,$0E
 $8DA0 DEFB $3B,$41,$85,$AA,$95,$89,$D7,$38
 $8DA8 DEFB $FA,$76,$FC,$F8,$F9,$FD,$FC,$FE
 $8DB0 DEFB $38,$88,$24,$02,$AA,$F4,$C0,$EA
 $8DB8 DEFB $54,$36,$38,$00,$00,$00,$01,$01
 $8DC0 DEFB $02,$03,$04,$38,$69,$82,$94,$94
 $8DC8 DEFB $89,$97,$C2,$E8,$38,$FF,$FF,$FF
 $8DD0 DEFB $FD,$F8,$F8,$02,$29,$38,$0C,$FE
 $8DD8 DEFB $FE,$9F,$2F,$0F,$1E,$2E,$36,$38
 $8DE0 DEFB $05,$06,$07,$07,$03,$01,$00,$00
 $8DE8 DEFB $38,$55,$BA,$5F,$AA,$D5,$FA,$7F
 $8DF0 DEFB $17,$38,$54,$BC,$D3,$28,$D4,$8A
 $8DF8 DEFB $D6,$4A,$38,$1E,$3F,$FF,$FF,$FE
 $8E00 DEFB $7E,$7E,$7F,$36,$36,$38,$0F,$1F
 $8E08 DEFB $2F,$53,$9B,$81,$60,$1F,$38,$94
 $8E10 DEFB $AC,$D4,$67,$00,$F8,$27,$C0,$38
 $8E18 DEFB $3F,$3F,$1F,$1F,$FF,$1F,$E7,$0E
 $8E20 DEFB $38,$00,$00,$00,$00,$80,$80,$00
 $8E28 DEFB $00
 $8E29 DEFB $36,$38,$FF,$FF,$FF,$FE,$FD,$FB
 $8E31 DEFB $FA,$F7,$38,$E0,$9F,$7F,$EF,$BC
 $8E39 DEFB $79,$B3,$75,$38,$7F,$BF,$5F,$EF
 $8E41 DEFB $37,$97,$6F,$F7,$36,$36,$38,$CE
 $8E49 DEFB $BB,$41,$85,$AA,$95,$89,$D7,$36
 $8E51 DEFB $38,$8B,$25,$02,$AA,$F5,$C1,$EA
 $8E59 DEFB $55,$36,$38,$FF,$FE,$FE,$FD,$FD
 $8E61 DEFB $FA,$FB,$F4,$36,$36,$36,$36,$38
 $8E69 DEFB $F5,$F6,$F7,$F7,$FB,$FD,$FE,$FF
 $8E71 DEFB $36,$36,$38,$1E,$3F,$FF,$FF,$FE
 $8E79 DEFB $7E,$7E,$7F,$36,$36,$38,$EF,$DF
 $8E81 DEFB $AF,$53,$9B,$81,$60,$9F,$36,$38
 $8E89 DEFB $BF,$BF,$5F,$1F,$FF,$1F,$E7,$0E
 $8E91 DEFB $38,$7F,$7F,$7F,$7F,$BF,$BF,$7F
 $8E99 DEFB $FF
 $8E9A DEFB $36,$38,$00,$01,$07,$0F,$1E,$3B
 $8EA2 DEFB $7E,$7B,$38,$00,$FC,$BF,$FF,$71
 $8EAA DEFB $26,$DB,$76,$38,$00,$00,$00,$80
 $8EB2 DEFB $C0,$C0,$E0,$E0,$38,$00,$01,$0F
 $8EBA DEFB $30,$55,$7B,$6D,$5B,$38,$F8,$BD
 $8EC2 DEFB $5E,$1F,$04,$A0,$D4,$2D,$38,$88
 $8ECA DEFB $DD,$71,$06,$1F,$00,$8E,$01,$38
 $8ED2 DEFB $E0,$E0,$E0,$E0,$C0,$C0,$C0,$C0
 $8EDA DEFB $38,$26,$1B,$0D,$0B,$15,$1B,$37
 $8EE2 DEFB $2A,$38,$58,$CF,$FF,$7F,$FF,$7F
 $8EEA DEFB $FF,$FF,$38,$0E,$03,$FC,$00,$00
 $8EF2 DEFB $00,$00,$00,$38,$C0,$C0,$00,$00
 $8EFA DEFB $00,$00,$00,$00
 $8EFE DEFB $36,$38,$FE,$F9,$F7,$EF,$DE,$BB
 $8F06 DEFB $7E,$7B,$38,$03,$FC,$BF,$FF,$71
 $8F0E DEFB $26,$DB,$76,$38,$FF,$FF,$7F,$BF
 $8F16 DEFB $DF,$DF,$EF,$EF,$38,$FE,$F1,$CF
 $8F1E DEFB $B0,$55,$7B,$6D,$5B,$36,$36,$38
 $8F26 DEFB $EF,$EF,$EF,$EF,$DF,$DF,$DF,$DF
 $8F2E DEFB $38,$A6,$DB,$ED,$EB,$D5,$DB,$B7
 $8F36 DEFB $AA,$36,$38,$0E,$03,$FD,$FF,$FF
 $8F3E DEFB $FF,$FF,$FF,$38,$DF,$DF,$FF,$FF
 $8F46 DEFB $FF,$FF,$FF,$FF
 $8F4A DEFB $36,$36,$38,$00,$01,$07,$0E,$1B
 $8F52 DEFB $37,$2B,$77,$38,$00,$F8,$F4,$FE
 $8F5A DEFB $C3,$99,$36,$5F,$36,$36,$38,$00
 $8F62 DEFB $03,$04,$08,$0A,$09,$08,$0D,$38
 $8F6A DEFB $EF,$B7,$1F,$5F,$AF,$5F,$9F,$7F
 $8F72 DEFB $38,$A8,$62,$C0,$8A,$9F,$DC,$CE
 $8F7A DEFB $E5,$38,$80,$40,$20,$A0,$40,$00
 $8F82 DEFB $A0,$40,$36,$38,$06,$08,$09,$19
 $8F8A DEFB $18,$29,$3C,$4E,$38,$9F,$2F,$4F
 $8F92 DEFB $4F,$9F,$7F,$20,$82,$38,$F0,$FF
 $8F9A DEFB $FF,$D9,$82,$80,$21,$92,$38,$C0
 $8FA2 DEFB $C0,$C0,$E0,$E0,$E0,$E0,$E0,$36
 $8FAA DEFB $38,$55,$6B,$75,$7A,$35,$3A,$1F
 $8FB2 DEFB $0F,$38,$55,$AB,$FC,$03,$50,$AA
 $8FBA DEFB $55,$F8,$38,$41,$C3,$3F,$BF,$5F
 $8FC2 DEFB $2F,$6F,$4F,$38,$E0,$E0,$E0,$C0
 $8FCA DEFB $C0,$C0,$C0,$C0,$36,$38,$03,$01
 $8FD2 DEFB $02,$02,$01,$00,$00,$00,$38,$F2
 $8FDA DEFB $65,$6A,$64,$DB,$59,$80,$7F,$38
 $8FE2 DEFB $C7,$4F,$8F,$9F,$3F,$CF,$37,$FA
 $8FEA DEFB $38,$80,$80,$80,$80,$00,$00,$00
 $8FF2 DEFB $00
 $8FF3 DEFB $36,$36,$38,$FE,$F9,$F7,$EE,$DB
 $8FFB DEFB $B7,$AB,$77,$38,$07,$FB,$F5,$FE
 $9003 DEFB $C3,$99,$36,$5F,$38,$FF,$FF,$FF
 $900B DEFB $FF,$7F,$7F,$FF,$7F,$36,$38,$FC
 $9013 DEFB $FB,$F4,$E8,$EA,$E9,$E8,$ED,$36
 $901B DEFB $36,$38,$BF,$5F,$2F,$AF,$5F,$1F
 $9023 DEFB $AF,$5F,$36,$38,$F6,$E8,$E9,$D9
 $902B DEFB $D8,$A9,$BC,$4E,$36,$36,$38,$DF
 $9033 DEFB $DF,$DF,$EF,$EF,$EF,$EF,$EF,$36
 $903B DEFB $38,$55,$6B,$75,$7A,$B5,$BA,$DF
 $9043 DEFB $EF,$36,$36,$38,$EF,$EF,$EF,$DF
 $904B DEFB $DF,$DF,$DF,$DF,$36,$38,$F3,$FD
 $9053 DEFB $FA,$FA,$FD,$FE,$FE,$FF,$36,$38
 $905B DEFB $C7,$4F,$8F,$9F,$3F,$CF,$37,$FA
 $9063 DEFB $38,$BF,$BF,$BF,$BF,$7F,$7F,$7F
 $906B DEFB $FF
 $906C DEFB $36,$38,$00,$00,$00,$00,$00,$01
 $9074 DEFB $07,$0E,$38,$00,$00,$00,$00,$00
 $907C DEFB $F8,$F4,$FE,$36,$38,$00,$00,$00
 $9084 DEFB $00,$00,$03,$04,$08,$38,$1B,$37
 $908C DEFB $2B,$77,$EF,$B7,$1F,$5F,$38,$C3
 $9094 DEFB $99,$36,$5F,$A8,$62,$C0,$8A,$38
 $909C DEFB $00,$00,$00,$00,$80,$40,$20,$A0
 $90A4 DEFB $38,$0A,$09,$08,$0D,$06,$08,$09
 $90AC DEFB $08,$38,$AF,$5F,$9F,$7F,$9F,$2F
 $90B4 DEFB $4F,$AF,$38,$9F,$DC,$4E,$25,$10
 $90BC DEFB $0F,$00,$26,$38,$40,$00,$A0,$40
 $90C4 DEFB $80,$00,$00,$00,$38,$19,$18,$29
 $90CC DEFB $3C,$4E,$55,$6B,$75,$38,$4F,$9F
 $90D4 DEFB $7F,$20,$82,$55,$AB,$FF,$38,$59
 $90DC DEFB $82,$80,$21,$92,$41,$C2,$FC,$38
 $90E4 DEFB $00,$80,$80,$00,$80,$00,$00,$C0
 $90EC DEFB $38,$7A,$35,$3A,$1F,$03,$00,$00
 $90F4 DEFB $00,$38,$01,$50,$AA,$D5,$FA,$3F
 $90FC DEFB $00,$00,$38,$C1,$21,$39,$06,$94
 $9104 DEFB $C2,$66,$30,$38,$20,$20,$20,$20
 $910C DEFB $40,$40,$40,$80,$36,$36,$38,$0C
 $9114 DEFB $03,$00,$00,$00,$00,$00,$00,$38
 $911C DEFB $80,$00,$00,$00,$00,$00,$00,$00
 $9124 DEFB $36,$38,$FF,$FF,$FF,$FF,$FE,$F9
 $912C DEFB $F7,$EE,$38,$FF,$FF,$FF,$FF,$07
 $9134 DEFB $FB,$F5,$FE,$36,$38,$FF,$FF,$FF
 $913C DEFB $FF,$FC,$FB,$F4,$E8,$38,$DB,$B7
 $9144 DEFB $AB,$77,$EF,$B7,$1F,$5F,$36,$38
 $914C DEFB $7F,$7F,$FF,$7F,$BF,$5F,$2F,$AF
 $9154 DEFB $38,$EA,$E9,$E8,$ED,$F6,$E8,$E9
 $915C DEFB $E8,$36,$36,$38,$5F,$1F,$AF,$5F
 $9164 DEFB $BF,$7F,$FF,$FF,$38,$D9,$D8,$A9
 $916C DEFB $BC,$4E,$55,$6B,$75,$36,$36,$38
 $9174 DEFB $7F,$BF,$BF,$7F,$BF,$7F,$3F,$DF
 $917C DEFB $38,$7A,$B5,$BA,$DF,$E3,$FC,$FF
 $9184 DEFB $FF,$38,$01,$50,$AA,$D5,$FA,$3F
 $918C DEFB $C0,$FF,$38,$C1,$25,$39,$06,$94
 $9194 DEFB $C2,$66,$B0,$38,$2F,$2F,$2F,$2F
 $919C DEFB $5F,$5F,$5F,$BF,$36,$36,$38,$CC
 $91A4 DEFB $F3,$FC,$FF,$FF,$FF,$FF,$FF,$38
 $91AC DEFB $BF,$7F,$FF,$FF,$FF,$FF,$FF,$FF
 $91B4 DEFB $36,$38,$00,$01,$07,$0E,$1B,$37
 $91BC DEFB $2B,$77,$38,$00,$F8,$F4,$FE,$C3
 $91C4 DEFB $99,$36,$5F,$36,$38,$00,$03,$04
 $91CC DEFB $08,$0A,$09,$08,$0D,$38,$EF,$B7
 $91D4 DEFB $1F,$5F,$AF,$5F,$9F,$7F,$38,$A8
 $91DC DEFB $62,$C0,$8A,$9F,$DC,$4E,$25,$38
 $91E4 DEFB $80,$40,$20,$A0,$40,$00,$A0,$40
 $91EC DEFB $38,$06,$08,$09,$08,$19,$18,$29
 $91F4 DEFB $3C,$38,$9F,$2F,$4F,$AF,$4F,$9F
 $91FC DEFB $7F,$20,$38,$10,$0F,$00,$26,$59
 $9204 DEFB $82,$80,$21,$38,$80,$00,$00,$00
 $920C DEFB $00,$80,$80,$00,$38,$4E,$55,$6B
 $9214 DEFB $75,$7A,$35,$3A,$1F,$38,$82,$55
 $921C DEFB $AB,$FF,$03,$50,$AA,$55,$38,$92
 $9224 DEFB $41,$C2,$FC,$80,$40,$30,$29,$38
 $922C DEFB $80,$00,$00,$00,$00,$60,$90,$10
 $9234 DEFB $38,$07,$00,$00,$00,$00,$00,$00
 $923C DEFB $00,$38,$FA,$FF,$03,$00,$00,$00
 $9244 DEFB $00,$00,$38,$95,$46,$A0,$D2,$66
 $924C DEFB $30,$18,$07,$38,$10,$20,$20,$20
 $9254 DEFB $40,$C0,$80,$00,$36,$36,$36,$36
 $925C DEFB $36,$38,$FE,$F9,$F7,$EE,$DB,$B7
 $9264 DEFB $AB,$77,$38,$07,$FB,$F5,$FE,$C3
 $926C DEFB $99,$36,$5F,$38,$FF,$FF,$FF,$FF
 $9274 DEFB $7F,$7F,$FF,$7F,$38,$FC,$FB,$F4
 $927C DEFB $E8,$EA,$E9,$E8,$ED,$36,$36,$38
 $9284 DEFB $BF,$5F,$2F,$AF,$5F,$1F,$AF,$5F
 $928C DEFB $38,$F6,$E8,$E9,$E8,$D9,$D8,$A9
 $9294 DEFB $BC,$36,$38,$50,$6F,$51,$26,$59
 $929C DEFB $82,$80,$21,$38,$BF,$7F,$FF,$FF
 $92A4 DEFB $7F,$BF,$BF,$7F,$38,$4E,$55,$6B
 $92AC DEFB $75,$7A,$B5,$BA,$DF,$36,$38,$92
 $92B4 DEFB $41,$C2,$FD,$82,$4F,$36,$29,$38
 $92BC DEFB $BF,$7F,$FF,$FF,$1F,$6F,$97,$17
 $92C4 DEFB $38,$E7,$F8,$FF,$FF,$FF,$FF,$FF
 $92CC DEFB $FF,$38,$FA,$FF,$03,$FC,$FF,$FF
 $92D4 DEFB $FF,$FF,$38,$95,$46,$A0,$D2,$66
 $92DC DEFB $B0,$D8,$E7,$38,$17,$2F,$2F,$2F
 $92E4 DEFB $5F,$DF,$BF,$7F,$36,$36,$36,$36
 $92EC DEFB $36,$38,$00,$00,$03,$0E,$1B,$37
 $92F4 DEFB $2B,$7E,$38,$00,$FF,$AF,$DF,$7F
 $92FC DEFB $E8,$5E,$36,$38,$00,$00,$C0,$E0
 $9304 DEFB $F0,$F0,$78,$78,$36,$38,$00,$03
 $930C DEFB $04,$08,$0A,$09,$08,$0D,$38,$EE
 $9314 DEFB $BD,$1E,$5C,$AD,$58,$88,$54,$38
 $931C DEFB $B3,$DF,$04,$A3,$D5,$E9,$76,$BF
 $9324 DEFB $38,$98,$B0,$E0,$80,$00,$00,$00
 $932C DEFB $00,$36,$38,$06,$0E,$0B,$0D,$1A
 $9334 DEFB $2B,$35,$4F,$38,$A7,$51,$28,$95
 $933C DEFB $D8,$B6,$F9,$7E,$38,$5F,$FF,$FF
 $9344 DEFB $7F,$9F,$23,$55,$6A,$38,$00,$00
 $934C DEFB $00,$80,$80,$80,$80,$F0,$36,$38
 $9354 DEFB $55,$6B,$75,$7A,$35,$3A,$1F,$0F
 $935C DEFB $38,$FF,$FF,$FF,$03,$50,$AA,$55
 $9364 DEFB $F8,$38,$95,$E2,$B9,$BF,$5F,$2F
 $936C DEFB $6F,$5F,$38,$4F,$A0,$49,$82,$D1
 $9374 DEFB $F2,$CF,$C0,$38,$00,$80,$80,$80
 $937C DEFB $80,$80,$00,$00,$38,$03,$01,$02
 $9384 DEFB $02,$01,$00,$00,$00,$38,$F2,$65
 $938C DEFB $6A,$64,$DB,$59,$80,$7F,$38,$CF
 $9394 DEFB $4F,$8F,$BF,$7F,$CF,$37,$FA,$38
 $939C DEFB $80,$80,$80,$80,$00,$00,$00,$00
 $93A4 DEFB $36,$36,$38,$FF,$FC,$F3,$EE,$DB
 $93AC DEFB $B7,$AB,$7E,$38,$00,$FF,$AF,$DF
 $93B4 DEFB $7F,$E8,$5E,$36,$38,$FF,$3F,$DF
 $93BC DEFB $EF,$F7,$F7,$7B,$7B,$36,$38,$FC
 $93C4 DEFB $FB,$F4,$E8,$EA,$E9,$E8,$ED,$36
 $93CC DEFB $36,$38,$9B,$B7,$EF,$BF,$7F,$7F
 $93D4 DEFB $FF,$7F,$36,$38,$F6,$EE,$EB,$ED
 $93DC DEFB $DA,$AB,$B5,$4F,$36,$36,$38,$7F
 $93E4 DEFB $7F,$7F,$BF,$BF,$BF,$8F,$F0,$36
 $93EC DEFB $38,$55,$6B,$75,$7A,$B5,$BA,$DF
 $93F4 DEFB $EF,$36,$36,$38,$4F,$A0,$49,$82
 $93FC DEFB $D1,$F2,$CF,$D0,$38,$7F,$BF,$BF
 $9404 DEFB $BF,$BF,$BF,$7F,$FF,$38,$F3,$FD
 $940C DEFB $FA,$FA,$FD,$FE,$FE,$FF,$36,$36
 $9414 DEFB $38,$BF,$BF,$BF,$BF,$7F,$7F,$7F
 $941C DEFB $FF,$36,$36,$38,$00,$01,$07,$0F
 $9424 DEFB $1E,$3B,$3E,$7B,$38,$00,$FC,$BF
 $942C DEFB $FF,$71,$26,$DB,$76,$38,$00,$00
 $9434 DEFB $00,$80,$C0,$C0,$E0,$E0,$36,$36
 $943C DEFB $36,$38,$E0,$E0,$E0,$E0,$C0,$C0
 $9444 DEFB $80,$80,$36,$36,$38,$07,$FE,$80
 $944C DEFB $26,$59,$82,$80,$21,$38,$00,$00
 $9454 DEFB $00,$00,$00,$80,$80,$00,$36,$38
 $945C DEFB $FE,$F9,$F7,$EF,$DE,$BB,$BE,$7B
 $9464 DEFB $38,$03,$FC,$BF,$FF,$71,$26,$DB
 $946C DEFB $76,$38,$FF,$FF,$7F,$BF,$DF,$DF
 $9474 DEFB $EF,$EF,$36,$36,$36,$38,$EF,$EF
 $947C DEFB $EF,$EF,$DF,$DF,$BF,$BF,$36,$36
 $9484 DEFB $36,$38,$7F,$FF,$FF,$FF,$7F,$BF
 $948C DEFB $BF,$7F,$36,$38,$00,$01,$07,$0F
 $9494 DEFB $1E,$3B,$3E,$7B,$38,$00,$FC,$BF
 $949C DEFB $FF,$71,$26,$DB,$76,$38,$00,$00
 $94A4 DEFB $00,$80,$C0,$C0,$E0,$E0,$36,$36
 $94AC DEFB $36,$38,$E0,$E0,$E0,$E0,$C0,$C0
 $94B4 DEFB $E0,$F0,$36,$36,$38,$07,$FF,$FF
 $94BC DEFB $D9,$82,$80,$21,$92,$38,$F0,$F0
 $94C4 DEFB $F0,$F0,$F0,$F0,$E0,$E0,$36,$38
 $94CC DEFB $FE,$F9,$F7,$EF,$DE,$BB,$BE,$7B
 $94D4 DEFB $38,$03,$FC,$BF,$FF,$71,$26,$DB
 $94DC DEFB $76,$38,$FF,$FF,$7F,$BF,$DF,$DF
 $94E4 DEFB $EF,$EF,$36,$36,$36,$38,$EF,$EF
 $94EC DEFB $EF,$EF,$DF,$DF,$EF,$F7,$36,$36
 $94F4 DEFB $36,$38,$F7,$F7,$F7,$F7,$F7,$F7
 $94FC DEFB $EF,$EF,$38,$F8,$BD,$1E,$5C,$AC
 $9504 DEFB $5D,$9C,$7E,$38,$88,$55,$02,$01
 $950C DEFB $01,$B5,$F9,$A3,$36,$36,$38,$F8
 $9514 DEFB $BD,$1E,$5C,$AC,$5C,$9D,$7E,$38
 $951C DEFB $88,$DD,$02,$01,$01,$F9,$C5,$33
 $9524 DEFB $36,$36,$38,$F8,$BC,$1E,$5C,$AD
 $952C DEFB $5D,$9D,$7E,$38,$88,$51,$02,$01
 $9534 DEFB $B5,$FD,$FD,$AB,$36,$36,$38,$A8
 $953C DEFB $62,$C0,$8A,$9F,$DC,$CE,$E5,$38
 $9544 DEFB $D0,$EF,$E0,$E6,$D9,$82,$80,$21
 $954C DEFB $36,$36,$38,$00,$00,$00,$00,$00
 $9554 DEFB $00,$00,$07,$38,$00,$01,$07,$0F
 $955C DEFB $1E,$3B,$7C,$80,$38,$00,$FC,$BF
 $9564 DEFB $FF,$71,$06,$1F,$00,$38,$00,$00
 $956C DEFB $00,$80,$C0,$C0,$E0,$E0,$38,$18
 $9574 DEFB $22,$45,$4A,$55,$5B,$2D,$1B,$38
 $957C DEFB $04,$A1,$D4,$BF,$FC,$FC,$7D,$7E
 $9584 DEFB $38,$8E,$01,$0E,$83,$7F,$FB,$C5
 $958C DEFB $33,$38,$E0,$E0,$E0,$E0,$C0,$80
 $9594 DEFB $80,$00,$38,$FF,$FF,$FF,$FF,$FF
 $959C DEFB $FF,$F8,$E7,$38,$FE,$F9,$F7,$EF
 $95A4 DEFB $DE,$BB,$7C,$80,$38,$03,$FC,$BF
 $95AC DEFB $FF,$71,$06,$1F,$00,$38,$FF,$FF
 $95B4 DEFB $7F,$BF,$DF,$DF,$EF,$EF,$38,$D8
 $95BC DEFB $A2,$45,$4A,$55,$5B,$AD,$DB,$36
 $95C4 DEFB $36,$38,$EF,$EF,$EF,$EF,$DF,$BF
 $95CC DEFB $BF,$7F,$38,$9F,$DC,$CE,$A5,$D0
 $95D4 DEFB $CF,$C0,$A6,$38,$D9,$82,$80,$21
 $95DC DEFB $92,$41,$C2,$FC,$36,$36,$36,$38
 $95E4 DEFB $00,$01,$07,$0E,$1B,$37,$2B,$77
 $95EC DEFB $38,$00,$F8,$F4,$FE,$C3,$99,$36
 $95F4 DEFB $5F,$36,$36,$38,$00,$03,$06,$0C
 $95FC DEFB $0A,$09,$0C,$0D,$38,$EF,$F7,$3F
 $9604 DEFB $5F,$AB,$55,$9B,$75,$38,$A8,$62
 $960C DEFB $C0,$8A,$9F,$DC,$CB,$60,$38,$80
 $9614 DEFB $40,$20,$A0,$58,$E7,$0E,$08,$38
 $961C DEFB $00,$00,$00,$00,$00,$00,$80,$80
 $9624 DEFB $38,$06,$0B,$0D,$0B,$15,$1B,$37
 $962C DEFB $2A,$38,$9A,$E5,$FA,$7F,$FF,$7F
 $9634 DEFB $FF,$FF,$38,$A0,$55,$AA,$95,$FF
 $963C DEFB $80,$00,$00,$38,$01,$22,$91,$06
 $9644 DEFB $F8,$00,$00,$00,$38,$00,$80,$00
 $964C DEFB $00,$00,$00,$00,$00,$36,$38,$FE
 $9654 DEFB $F9,$F7,$EE,$DB,$B7,$AB,$77,$38
 $965C DEFB $07,$FB,$F5,$FE,$C3,$99,$36,$5F
 $9664 DEFB $38,$FF,$FF,$FF,$FF,$7F,$7F,$FF
 $966C DEFB $7F,$36,$38,$FC,$FB,$F6,$EC,$EA
 $9674 DEFB $E9,$EC,$ED,$36,$36,$38,$BF,$5F
 $967C DEFB $2F,$A7,$58,$E7,$0E,$08,$38,$FF
 $9684 DEFB $FF,$FF,$FF,$FF,$7F,$BF,$BF,$38
 $968C DEFB $F6,$EB,$ED,$EB,$D5,$DB,$B7,$AA
 $9694 DEFB $36,$38,$A0,$55,$AA,$95,$FF,$FF
 $969C DEFB $FF,$FF,$38,$01,$22,$91,$06,$F9
 $96A4 DEFB $FF,$FF,$FF,$38,$7F,$BF,$7F,$FF
 $96AC DEFB $FF,$FF,$FF,$FF,$38,$06,$07,$0B
 $96B4 DEFB $1A,$1D,$2B,$3D,$4F,$38,$FF,$7F
 $96BC DEFB $EF,$FF,$FF,$BF,$FF,$7F,$38,$CF
 $96C4 DEFB $1F,$FF,$FF,$BF,$BF,$3F,$1F,$38
 $96CC DEFB $80,$C0,$C0,$C0,$C0,$E0,$E0,$E0
 $96D4 DEFB $38,$55,$6A,$74,$7A,$35,$3A,$1F
 $96DC DEFB $0F,$38,$FE,$FE,$3C,$03,$50,$AA
 $96E4 DEFB $55,$F8,$38,$1F,$1F,$1F,$9F,$4F
 $96EC DEFB $2F,$6F,$4F,$38,$E0,$E0,$E0,$E0
 $96F4 DEFB $C0,$C0,$C0,$C0,$38,$03,$01,$02
 $96FC DEFB $02,$01,$00,$00,$00,$38,$F2,$65
 $9704 DEFB $6A,$64,$DB,$59,$80,$7F,$38,$C7
 $970C DEFB $4F,$8F,$9F,$3F,$CF,$37,$FA,$38
 $9714 DEFB $80,$80,$80,$80,$00,$00,$00,$00
 $971C DEFB $38,$F6,$F7,$EB,$DA,$DD,$AB,$BD
 $9724 DEFB $4F,$36,$36,$38,$BF,$DF,$DF,$DF
 $972C DEFB $DF,$EF,$EF,$EF,$38,$55,$6A,$74
 $9734 DEFB $7A,$B5,$BA,$DF,$EF,$36,$38,$DF
 $973C DEFB $DF,$5F,$9F,$4F,$2F,$6F,$4F,$38
 $9744 DEFB $EF,$EF,$EF,$EF,$DF,$DF,$DF,$DF
 $974C DEFB $38,$F3,$FD,$FA,$FA,$FD,$FE,$FE
 $9754 DEFB $FF,$36,$36,$38,$BF,$BF,$BF,$BF
 $975C DEFB $7F,$7F,$7F,$FF,$38,$06,$0B,$0D
 $9764 DEFB $0B,$15,$1B,$37,$2A,$38,$FF,$7F
 $976C DEFB $FF,$7F,$FF,$7F,$FF,$FF,$38,$CF
 $9774 DEFB $1E,$F8,$C0,$80,$00,$00,$00,$36
 $977C DEFB $38,$4D,$57,$6A,$75,$7A,$35,$3A
 $9784 DEFB $1F,$38,$FF,$FF,$FF,$5F,$03,$50
 $978C DEFB $AA,$55,$38,$00,$00,$00,$80,$80
 $9794 DEFB $40,$30,$29,$38,$00,$00,$00,$00
 $979C DEFB $00,$60,$90,$10,$38,$07,$00,$00
 $97A4 DEFB $00,$00,$00,$00,$00,$38,$FA,$FF
 $97AC DEFB $03,$00,$00,$00,$00,$00,$38,$95
 $97B4 DEFB $46,$A0,$D2,$66,$30,$18,$07,$38
 $97BC DEFB $10,$20,$20,$20,$40,$C0,$80,$00
 $97C4 DEFB $38,$F6,$EB,$ED,$EB,$D5,$DB,$B7
 $97CC DEFB $AA,$36,$38,$CF,$1E,$F9,$87,$FF
 $97D4 DEFB $FF,$FF,$FF,$36,$38,$4D,$57,$6A
 $97DC DEFB $75,$7A,$B5,$BA,$DF,$36,$38,$FF
 $97E4 DEFB $FF,$FF,$7F,$BF,$4F,$36,$29,$38
 $97EC DEFB $FF,$FF,$FF,$FF,$9F,$6F,$97,$17
 $97F4 DEFB $38,$E7,$F8,$FF,$FF,$FF,$FF,$FF
 $97FC DEFB $FF,$38,$FA,$FF,$03,$FC,$FF,$FF
 $9804 DEFB $FF,$FF,$38,$95,$46,$A0,$D2,$66
 $980C DEFB $B0,$D8,$E7,$38,$17,$2F,$2F,$2F
 $9814 DEFB $5F,$DF,$BF,$7F,$38,$06,$0B,$0D
 $981C DEFB $0B,$15,$1B,$37,$2A,$38,$FF,$7F
 $9824 DEFB $FF,$7F,$FF,$7F,$FF,$FF,$38,$CF
 $982C DEFB $1E,$FC,$FC,$FE,$FE,$FE,$FF,$36
 $9834 DEFB $38,$4D,$57,$6A,$75,$7A,$35,$3A
 $983C DEFB $1F,$38,$FF,$FF,$FE,$5E,$03,$50
 $9844 DEFB $AA,$55,$38,$7F,$7F,$3F,$3F,$9F
 $984C DEFB $4F,$37,$2F,$38,$00,$00,$00,$80
 $9854 DEFB $80,$E0,$90,$10,$38,$07,$00,$00
 $985C DEFB $00,$00,$00,$00,$00,$38,$FA,$FF
 $9864 DEFB $03,$00,$00,$00,$00,$00,$38,$97
 $986C DEFB $46,$A0,$D2,$66,$30,$18,$07,$38
 $9874 DEFB $10,$20,$20,$20,$40,$C0,$80,$00
 $987C DEFB $38,$F6,$EB,$ED,$EB,$D5,$DB,$B7
 $9884 DEFB $AA,$36,$38,$CF,$1E,$FD,$FD,$FE
 $988C DEFB $FE,$FE,$FF,$36,$38,$4D,$57,$6A
 $9894 DEFB $75,$7A,$B5,$BA,$DF,$36,$36,$38
 $989C DEFB $7F,$7F,$7F,$BF,$9F,$EF,$97,$17
 $98A4 DEFB $38,$E7,$F8,$FF,$FF,$FF,$FF,$FF
 $98AC DEFB $FF,$38,$FA,$FF,$03,$FC,$FF,$FF
 $98B4 DEFB $FF,$FF,$38,$97,$46,$A0,$D2,$66
 $98BC DEFB $B0,$D8,$E7,$38,$17,$2F,$2F,$2F
 $98C4 DEFB $5F,$DF,$BF,$7F,$38,$00,$00,$00
 $98CC DEFB $00,$05,$0A,$1B,$14,$38,$00,$00
 $98D4 DEFB $00,$00,$40,$A0,$90,$50,$36,$36
 $98DC DEFB $38,$0B,$09,$04,$04,$04,$04,$08
 $98E4 DEFB $09,$38,$30,$A0,$C0,$40,$C0,$40
 $98EC DEFB $E0,$60,$36,$36,$38,$0A,$11,$12
 $98F4 DEFB $15,$12,$15,$13,$09,$38,$E0,$E1
 $98FC DEFB $A7,$EF,$FE,$FB,$FE,$FB,$38,$00
 $9904 DEFB $FC,$BF,$FF,$21,$56,$FB,$76,$38
 $990C DEFB $00,$00,$00,$80,$C0,$C0,$E0,$E0
 $9914 DEFB $38,$0B,$09,$0A,$0A,$09,$06,$06
 $991C DEFB $03,$38,$F8,$DD,$BE,$FC,$DC,$FC
 $9924 DEFB $FD,$6E,$38,$88,$DD,$00,$01,$01
 $992C DEFB $F9,$C5,$33,$38,$E0,$E0,$E0,$E0
 $9934 DEFB $C0,$C0,$80,$80,$38,$FF,$FF,$FF
 $993C DEFB $FA,$F5,$EA,$DB,$D4,$38,$FF,$FF
 $9944 DEFB $FF,$BF,$5F,$AF,$97,$57,$36,$36
 $994C DEFB $38,$EB,$E9,$F4,$F4,$F4,$F4,$E8
 $9954 DEFB $E9,$38,$37,$AF,$DF,$5F,$DF,$5F
 $995C DEFB $EF,$6F,$36,$36,$38,$EA,$D1,$D2
 $9964 DEFB $D5,$D2,$D5,$D3,$E9,$38,$EE,$E9
 $996C DEFB $A7,$EF,$FE,$FB,$FE,$FB,$38,$03
 $9974 DEFB $FC,$BF,$FF,$21,$56,$FB,$76,$38
 $997C DEFB $FF,$FF,$7F,$BF,$DF,$DF,$EF,$EF
 $9984 DEFB $38,$EB,$E9,$EA,$EA,$E9,$F6,$F6
 $998C DEFB $FB,$36,$36,$38,$EF,$EF,$EF,$EF
 $9994 DEFB $DF,$DF,$BF,$BF,$36,$38,$00,$00
 $999C DEFB $03,$0E,$1B,$37,$2B,$7E,$38,$00
 $99A4 DEFB $FF,$AF,$DF,$7F,$E8,$5E,$36,$38
 $99AC DEFB $00,$00,$C0,$E0,$F0,$F0,$78,$78
 $99B4 DEFB $36,$38,$00,$03,$04,$08,$0A,$09
 $99BC DEFB $08,$0D,$38,$EE,$BD,$1E,$5C,$AD
 $99C4 DEFB $58,$88,$54,$38,$B3,$DF,$04,$A3
 $99CC DEFB $D5,$E9,$76,$B8,$38,$98,$B0,$E0
 $99D4 DEFB $80,$00,$00,$00,$00,$36,$38,$06
 $99DC DEFB $0E,$0B,$0D,$1A,$17,$2B,$35,$38
 $99E4 DEFB $A7,$51,$28,$95,$D8,$EC,$B6,$F9
 $99EC DEFB $38,$50,$E0,$80,$40,$B0,$0C,$22
 $99F4 DEFB $55,$36,$36,$38,$4F,$55,$6B,$75
 $99FC DEFB $7A,$35,$3A,$1F,$38,$7E,$FF,$FF
 $9A04 DEFB $FF,$03,$50,$AA,$55,$38,$6A,$95
 $9A0C DEFB $62,$99,$87,$40,$30,$29,$38,$F0
 $9A14 DEFB $4F,$A0,$49,$82,$51,$B2,$1F,$38
 $9A1C DEFB $00,$00,$80,$80,$80,$80,$80,$00
 $9A24 DEFB $38,$07,$00,$00,$00,$00,$00,$00
 $9A2C DEFB $00,$38,$FA,$FF,$03,$00,$00,$00
 $9A34 DEFB $00,$00,$38,$95,$46,$A0,$D2,$66
 $9A3C DEFB $30,$18,$07,$38,$10,$20,$20,$20
 $9A44 DEFB $40,$C0,$80,$00,$36,$36,$38,$FF
 $9A4C DEFB $FC,$F3,$EE,$DB,$B7,$AB,$7E,$38
 $9A54 DEFB $00,$FF,$AF,$DF,$7F,$E8,$5E,$36
 $9A5C DEFB $38,$FF,$3F,$DF,$EF,$F7,$F7,$7B
 $9A64 DEFB $7B,$36,$38,$FC,$FB,$F4,$E8,$EA
 $9A6C DEFB $E9,$E8,$ED,$36,$38,$B3,$DF,$04
 $9A74 DEFB $A3,$D5,$E9,$76,$BB,$38,$9B,$B7
 $9A7C DEFB $EF,$BF,$7F,$7F,$FF,$FF,$36,$38
 $9A84 DEFB $F6,$EE,$EB,$ED,$DA,$D7,$AB,$B5
 $9A8C DEFB $36,$38,$57,$EF,$BF,$4F,$B3,$0D
 $9A94 DEFB $22,$55,$36,$36,$38,$4F,$55,$6B
 $9A9C DEFB $75,$7A,$B5,$BA,$DF,$36,$36,$38
 $9AA4 DEFB $F0,$4F,$A0,$49,$82,$51,$B2,$1F
 $9AAC DEFB $38,$FF,$7F,$BF,$BF,$BF,$BF,$BF
 $9AB4 DEFB $7F,$38,$E7,$F8,$FF,$FF,$FF,$FF
 $9ABC DEFB $FF,$FF,$38,$FA,$FF,$03,$FC,$FF
 $9AC4 DEFB $FF,$FF,$FF,$38,$95,$46,$A0,$D2
 $9ACC DEFB $66,$B0,$D8,$E7,$38,$10,$2F,$2F
 $9AD4 DEFB $2F,$5F,$DF,$BF,$7F,$36,$38,$78
 $9ADC DEFB $BD,$1E,$5C,$2C,$DC,$1D,$FE,$38
 $9AE4 DEFB $88,$DD,$02,$01,$01,$F9,$FD,$03
 $9AEC DEFB $36,$36,$38,$78,$BD,$1E,$5C,$2C
 $9AF4 DEFB $DC,$1C,$FE,$38,$88,$DD,$02,$01
 $9AFC DEFB $39,$7D,$71,$03,$36,$36,$38,$78
 $9B04 DEFB $BD,$1E,$5C,$28,$D9,$1C,$FE,$38
 $9B0C DEFB $88,$DD,$02,$01,$01,$E1,$71,$03
 $9B14 DEFB $36,$36,$38,$78,$BD,$1E,$5C,$28
 $9B1C DEFB $D9,$1C,$FE,$38,$88,$DD,$02,$01
 $9B24 DEFB $F1,$F9,$61,$03,$36,$36,$36,$36
 $9B2C DEFB $38,$00,$00,$1C,$3E,$2A,$36,$1C
 $9B34 DEFB $3E,$36,$38,$5D,$49,$63,$77,$3E
 $9B3C DEFB $36,$36,$77,$36,$36,$36,$38,$FF
 $9B44 DEFB $E3,$DD,$BE,$AA,$B6,$DD,$BE,$36
 $9B4C DEFB $38,$5D,$49,$63,$77,$BE,$B6,$B6
 $9B54 DEFB $77,$38,$7F,$7F,$7F,$7F,$FF,$FF
 $9B5C DEFB $FF,$7F,$38,$00,$00,$00,$00,$00
 $9B64 DEFB $00,$00,$00,$38,$00,$00,$00,$00
 $9B6C DEFB $00,$00,$00,$00,$38,$00,$01,$03
 $9B74 DEFB $02,$03,$01,$03,$03,$38,$00,$C0
 $9B7C DEFB $E0,$A0,$60,$C0,$E0,$E0,$38,$05
 $9B84 DEFB $04,$06,$02,$03,$07,$0E,$1C,$38
 $9B8C DEFB $D0,$90,$B0,$20,$E0,$70,$38,$1C
 $9B94 DEFB $38,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $9B9C DEFB $FF,$38,$FF,$FF,$FF,$FF,$FF,$FF
 $9BA4 DEFB $FF,$FF,$38,$FE,$FD,$FB,$FA,$FB
 $9BAC DEFB $FD,$FB,$FB,$38,$3F,$DF,$EF,$AF
 $9BB4 DEFB $6F,$DF,$EF,$EF,$38,$F5,$F4,$F6
 $9BBC DEFB $FA,$FB,$F7,$EE,$DD,$38,$D7,$97
 $9BC4 DEFB $B7,$2F,$EF,$77,$BB,$DD,$38,$00
 $9BCC DEFB $00,$00,$00,$00,$00,$00,$00,$38
 $9BD4 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $9BDC DEFB $38,$00,$00,$00,$00,$00,$00,$00
 $9BE4 DEFB $00,$38,$00,$00,$01,$3F,$3E,$5F
 $9BEC DEFB $6F,$77,$38,$00,$F8,$FF,$EF,$7F
 $9BF4 DEFB $3D,$C3,$FF,$38,$00,$00,$FE,$FE
 $9BFC DEFB $80,$80,$40,$E0,$38,$7B,$7C,$3A
 $9C04 DEFB $19,$0B,$04,$03,$00,$38,$FF,$00
 $9C0C DEFB $F6,$6D,$FF,$DB,$FF,$00,$38,$F0
 $9C14 DEFB $10,$D0,$B0,$F0,$50,$E0,$00,$38
 $9C1C DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $9C24 DEFB $38,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $9C2C DEFB $FF,$38,$FF,$FF,$FF,$FF,$FF,$FF
 $9C34 DEFB $FF,$FF,$38,$FF,$FE,$C1,$BF,$BE
 $9C3C DEFB $5F,$6F,$77,$38,$07,$F8,$FF,$EF
 $9C44 DEFB $7F,$3D,$C3,$FF,$38,$FF,$01,$FE
 $9C4C DEFB $FE,$81,$BF,$5F,$EF,$38,$7B,$7C
 $9C54 DEFB $BA,$D9,$EB,$F4,$FB,$FC,$38,$FF
 $9C5C DEFB $00,$F6,$6D,$FF,$DB,$FF,$00,$38
 $9C64 DEFB $F7,$17,$D7,$B7,$F7,$57,$EF,$1F
 $9C6C DEFB $38,$00,$00,$00,$00,$00,$00,$00
 $9C74 DEFB $00,$38,$00,$00,$00,$00,$00,$00
 $9C7C DEFB $00,$00,$38,$00,$00,$00,$00,$00
 $9C84 DEFB $00,$00,$00,$38,$00,$00,$00,$07
 $9C8C DEFB $0F,$13,$39,$5F,$38,$00,$00,$00
 $9C94 DEFB $F8,$FC,$FF,$01,$FF,$38,$00,$00
 $9C9C DEFB $00,$00,$00,$F0,$F8,$FC,$38,$64
 $9CA4 DEFB $7F,$3C,$5B,$2D,$0A,$07,$00,$38
 $9CAC DEFB $08,$FF,$E9,$ED,$FF,$81,$00,$00
 $9CB4 DEFB $38,$00,$FE,$9E,$FC,$B0,$50,$E0
 $9CBC DEFB $00,$38,$FF,$FF,$FF,$FF,$FF,$FF
 $9CC4 DEFB $FF,$FF,$38,$FF,$FF,$FF,$FF,$FF
 $9CCC DEFB $FF,$FF,$FF,$38,$FF,$FF,$FF,$FF
 $9CD4 DEFB $FF,$FF,$FF,$FF,$38,$FF,$FF,$F8
 $9CDC DEFB $F7,$EF,$D3,$B9,$5F,$38,$FF,$FF
 $9CE4 DEFB $07,$FB,$FC,$FF,$01,$FF,$38,$FF
 $9CEC DEFB $FF,$FF,$FF,$0F,$F7,$FB,$FD,$38
 $9CF4 DEFB $64,$7F,$BC,$5B,$AD,$CA,$F7,$F8
 $9CFC DEFB $38,$08,$FF,$E9,$ED,$FF,$81,$7E
 $9D04 DEFB $FF,$38,$01,$FE,$9E,$FD,$B3,$57
 $9D0C DEFB $EF,$1F,$38,$00,$00,$00,$00,$00
 $9D14 DEFB $00,$00,$00,$38,$00,$00,$00,$00
 $9D1C DEFB $00,$00,$00,$00,$38,$00,$00,$00
 $9D24 DEFB $00,$00,$00,$00,$00,$38,$00,$00
 $9D2C DEFB $00,$00,$03,$05,$3C,$5E,$38,$00
 $9D34 DEFB $00,$00,$18,$E6,$EF,$FF,$80,$38
 $9D3C DEFB $00,$00,$00,$00,$00,$00,$F0,$F8
 $9D44 DEFB $38,$2F,$70,$2F,$1F,$0F,$01,$00
 $9D4C DEFB $00,$38,$61,$E5,$E1,$E1,$3F,$60
 $9D54 DEFB $C0,$00,$38,$FC,$82,$FE,$FE,$9C
 $9D5C DEFB $B0,$60,$00,$38,$FF,$FF,$FF,$FF
 $9D64 DEFB $FF,$FF,$FF,$FF,$38,$FF,$FF,$FF
 $9D6C DEFB $FF,$FF,$FF,$FF,$FF,$38,$FF,$FF
 $9D74 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$38,$FF
 $9D7C DEFB $FF,$FF,$FC,$FB,$C5,$BC,$5E,$38
 $9D84 DEFB $FF,$FF,$E7,$19,$E6,$EF,$FF,$80
 $9D8C DEFB $38,$FF,$FF,$FF,$FF,$FF,$0F,$F7
 $9D94 DEFB $FB,$38,$AF,$70,$AF,$DF,$EF,$F1
 $9D9C DEFB $FE,$FF,$38,$61,$E5,$E1,$E1,$3F
 $9DA4 DEFB $60,$DF,$3F,$38,$FD,$82,$FE,$FE
 $9DAC DEFB $9D,$B3,$6F,$9F,$36,$38,$00,$00
 $9DB4 DEFB $00,$01,$03,$05,$07,$0B,$38,$00
 $9DBC DEFB $30,$D8,$7E,$E3,$CD,$FB,$DE,$38
 $9DC4 DEFB $00,$00,$00,$00,$00,$00,$00,$80
 $9DCC DEFB $36,$36,$38,$1F,$2B,$41,$85,$AA
 $9DD4 DEFB $95,$89,$D7,$38,$AD,$DE,$B5,$E5
 $9DDC DEFB $F3,$D9,$FC,$FF,$38,$60,$10,$88
 $9DE4 DEFB $68,$50,$80,$60,$10,$36,$36,$38
 $9DEC DEFB $69,$82,$94,$94,$89,$97,$C2,$E8
 $9DF4 DEFB $38,$BF,$FB,$DE,$FD,$F8,$F8,$02
 $9DFC DEFB $29,$38,$E0,$00

; Data block at 9E00
b$9E00 DEFB $60,$90,$28,$08,$10,$28,$36,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E08 DEFB $00,$01,$03,$03,$06,$06,$07,$07 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E10 DEFB $38,$55,$BA,$5F,$6A,$F5,$EA,$57 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E18 DEFB $6E,$38,$54,$BC,$FF,$0F,$43,$A2 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E20 DEFB $52,$A3,$38,$10,$20,$C0,$F0,$FC ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E28 DEFB $EE,$B6,$B6,$36,$38,$05,$06,$03 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E30 DEFB $02,$03,$01,$00,$00,$38,$DD,$BC ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E38 DEFB $65,$D1,$9B,$81,$60,$1F,$38,$55 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E40 DEFB $BC,$7C,$EE,$C1,$F8,$27,$C0,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E48 DEFB $14,$14,$00,$00,$80,$40,$80,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E50 DEFB $36,$36,$38,$FF,$FF,$FE,$FD,$FB ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E58 DEFB $F5,$F7,$EB,$38,$CF,$37,$D9,$7E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E60 DEFB $E3,$CD,$FB,$DE,$38,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E68 DEFB $FF,$7F,$7F,$7F,$9F,$36,$36,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E70 DEFB $DF,$AB,$41,$85,$AA,$95,$89,$D7 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E78 DEFB $36,$38,$6F,$17,$8B,$6B,$57,$97 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E80 DEFB $6F,$17,$36,$36,$36,$36,$38,$EF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E88 DEFB $1F,$6F,$97,$2B,$0B,$17,$2B,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E90 DEFB $38,$FE,$FD,$FB,$FB,$F6,$F6,$F7 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9E98 DEFB $F7,$36,$36,$38,$17,$2F,$CF,$F3 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EA0 DEFB $FD,$EE,$B6,$B6,$36,$38,$F5,$F6 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EA8 DEFB $FB,$FA,$FB,$FD,$FE,$FF,$36,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EB0 DEFB $38,$55,$D5,$EB,$7F,$BF,$5F,$BF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EB8 DEFB $7F,$36,$36,$38,$00,$00,$01,$03 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EC0 DEFB $04,$0B,$0F,$7D,$38,$00,$70,$FC ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EC8 DEFB $76,$A9,$DE,$77,$8D,$38,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9ED0 DEFB $00,$00,$00,$80,$80,$80,$38,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9ED8 DEFB $01,$0F,$30,$55,$7B,$6D,$5B,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EE0 DEFB $FE,$BE,$5C,$1F,$04,$A0,$D4,$2D ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EE8 DEFB $38,$53,$8B,$71,$06,$1F,$00,$8E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EF0 DEFB $01,$38,$80,$C0,$C0,$80,$80,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9EF8 DEFB $80,$00,$38,$26,$1B,$0D,$0B,$15 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F00 DEFB $0B,$17,$0A,$38,$58,$CF,$FF,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F08 DEFB $FF,$7F,$FF,$FF,$38,$0E,$03,$FC ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F10 DEFB $F0,$E0,$C0,$C0,$C0,$38,$80,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F18 DEFB $00,$00,$00,$00,$00,$00,$36,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F20 DEFB $FF,$FE,$FD,$FB,$F4,$EB,$8F,$7D ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F28 DEFB $38,$8F,$73,$FD,$76,$A9,$DE,$77 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F30 DEFB $8D,$38,$FF,$FF,$FF,$FF,$7F,$BF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F38 DEFB $BF,$BF,$38,$FE,$F1,$CF,$B0,$55 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F40 DEFB $7B,$6D,$5B,$36,$36,$38,$BF,$DF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F48 DEFB $DF,$BF,$BF,$BF,$BF,$7F,$38,$A6 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F50 DEFB $DB,$ED,$EB,$D5,$EB,$D7,$EA,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F58 DEFB $38,$0E,$03,$FD,$F7,$EF,$DF,$DF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F60 DEFB $DF,$38,$BF,$7F,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F68 DEFB $FF,$FF,$36,$36,$38,$00,$03,$0D ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F70 DEFB $17,$3E,$5C,$7F,$BD,$38,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F78 DEFB $80,$E0,$30,$D0,$B0,$E8,$36,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F80 DEFB $38,$01,$02,$04,$08,$0A,$09,$08 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F88 DEFB $0D,$38,$FA,$BD,$1B,$5E,$AF,$5D ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F90 DEFB $9F,$7F,$38,$D6,$E1,$58,$56,$35 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9F98 DEFB $98,$C6,$F1,$38,$00,$00,$80,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FA0 DEFB $00,$00,$00,$00,$36,$38,$06,$08 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FA8 DEFB $09,$09,$08,$09,$0C,$0E,$38,$9B ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FB0 DEFB $2F,$4D,$4F,$9F,$7F,$20,$82,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FB8 DEFB $FE,$B0,$E6,$D9,$82,$80,$21,$92 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FC0 DEFB $38,$00,$00,$00,$00,$80,$80,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FC8 DEFB $80,$36,$38,$05,$1B,$35,$36,$6F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FD0 DEFB $6E,$75,$76,$38,$55,$AB,$FF,$03 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FD8 DEFB $50,$AA,$55,$F8,$38,$41,$C2,$FC ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FE0 DEFB $BF,$5F,$2E,$6B,$5B,$38,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FE8 DEFB $00,$00,$C0,$E0,$60,$60,$36,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FF0 DEFB $5D,$6A,$35,$2B,$35,$1B,$0E,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $9FF8 DEFB $38,$F2,$D5,$AA,$A4,$5B,$59,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A000 DEFB $7F,$38,$D1,$41,$80,$80,$00,$C0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A008 DEFB $30,$F8,$38,$40,$40,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A010 DEFB $00,$00,$00,$36,$36,$38,$FC,$F3 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A018 DEFB $ED,$D7,$BE,$5C,$7F,$BD,$38,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A020 DEFB $7F,$9F,$EF,$37,$D7,$B7,$E9,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A028 DEFB $36,$38,$FD,$FA,$F4,$E8,$EA,$E9 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A030 DEFB $E8,$ED,$36,$36,$38,$FF,$7F,$BF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A038 DEFB $BF,$7F,$FF,$FF,$7F,$36,$38,$F6 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A040 DEFB $E8,$E9,$E9,$E8,$E9,$EC,$EE,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A048 DEFB $36,$38,$FF,$FF,$FF,$7F,$BF,$BF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A050 DEFB $7F,$BF,$36,$38,$E5,$DB,$B5,$B6 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A058 DEFB $6F,$6E,$75,$76,$36,$38,$41,$C2 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A060 DEFB $FC,$BF,$5F,$2E,$6B,$5B,$38,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A068 DEFB $FF,$FF,$3F,$DF,$EF,$6F,$6F,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A070 DEFB $38,$5D,$6A,$B5,$AB,$B5,$DB,$EE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A078 DEFB $F0,$36,$38,$D5,$4D,$BE,$BF,$3F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A080 DEFB $CF,$37,$FB,$38,$5F,$5F,$BF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A088 DEFB $FF,$FF,$FF,$FF,$36,$38,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A090 DEFB $00,$00,$00,$06,$1B,$2E,$38,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A098 DEFB $00,$00,$00,$00,$00,$80,$40,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0A0 DEFB $38,$00,$00,$00,$00,$01,$02,$04 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0A8 DEFB $08,$38,$3D,$5B,$7F,$B5,$FB,$BD ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0B0 DEFB $1A,$5F,$38,$A0,$60,$B8,$D6,$A1 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0B8 DEFB $F9,$56,$24,$36,$38,$0A,$09,$08 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0C0 DEFB $0D,$06,$08,$09,$08,$38,$AF,$5F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0C8 DEFB $9F,$7F,$9F,$2D,$4F,$AB,$38,$98 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0D0 DEFB $C4,$B2,$0C,$00,$00,$00,$26,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0D8 DEFB $38,$09,$08,$09,$0C,$0E,$05,$1B ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0E0 DEFB $35,$38,$4F,$9F,$7F,$20,$82,$55 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0E8 DEFB $AB,$FF,$38,$59,$42,$80,$21,$92 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0F0 DEFB $41,$C2,$3C,$38,$00,$80,$80,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A0F8 DEFB $80,$00,$40,$C0,$38,$36,$6F,$6E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A100 DEFB $75,$76,$5D,$6A,$35,$38,$03,$50 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A108 DEFB $AA,$55,$FA,$FF,$E0,$80,$38,$C0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A110 DEFB $21,$39,$06,$94,$C2,$E6,$30,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A118 DEFB $C0,$40,$40,$40,$80,$80,$80,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A120 DEFB $38,$2B,$35,$1B,$0E,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A128 DEFB $00,$38,$80,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A130 DEFB $00,$00,$38,$0C,$03,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A138 DEFB $00,$00,$00,$38,$80,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A140 DEFB $00,$00,$00,$00,$36,$38,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A148 DEFB $FF,$FF,$F9,$E6,$DB,$AE,$38,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A150 DEFB $FF,$FF,$FF,$FF,$7F,$BF,$5F,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A158 DEFB $38,$FF,$FF,$FF,$FE,$FD,$FA,$F4 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A160 DEFB $E8,$38,$BD,$5B,$7F,$B5,$FB,$BD ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A168 DEFB $1A,$5F,$38,$AF,$67,$B9,$D6,$A1 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A170 DEFB $F9,$56,$25,$36,$38,$EA,$E9,$E8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A178 DEFB $ED,$F6,$E8,$E9,$E8,$36,$38,$9B ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A180 DEFB $C5,$B2,$CD,$F3,$FF,$D9,$A6,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A188 DEFB $38,$E9,$E8,$E9,$EC,$EE,$E5,$DB ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A190 DEFB $B5,$36,$36,$38,$7F,$BF,$BF,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A198 DEFB $BF,$3F,$5F,$DF,$38,$B6,$6F,$6E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A1A0 DEFB $75,$76,$5D,$6A,$B5,$38,$03,$50 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A1A8 DEFB $AA,$55,$FA,$FF,$E0,$9F,$36,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A1B0 DEFB $DF,$5F,$5F,$5F,$BF,$BF,$BF,$BF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A1B8 DEFB $38,$AB,$B5,$DB,$EE,$F1,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A1C0 DEFB $FF,$38,$BF,$7F,$7F,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A1C8 DEFB $FF,$FF,$38,$CC,$F3,$FC,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A1D0 DEFB $FF,$FF,$FF,$38,$BF,$7F,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A1D8 DEFB $FF,$FF,$FF,$FF,$36,$38,$00,$06 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A1E0 DEFB $1B,$2E,$3D,$5B,$7F,$B5,$38,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A1E8 DEFB $00,$80,$40,$A0,$60,$B8,$D6,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A1F0 DEFB $38,$01,$02,$04,$08,$0A,$09,$08 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A1F8 DEFB $0D,$38,$FB,$BD,$1A,$5F,$AF,$5F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A200 DEFB $9F,$7F,$38,$A1,$F9,$56,$24,$98 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A208 DEFB $C4,$B2,$0C,$36,$38,$06,$08,$09 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A210 DEFB $08,$09,$08,$09,$0C,$38,$9F,$2D ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A218 DEFB $4F,$AB,$4F,$9F,$7F,$20,$38,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A220 DEFB $00,$00,$26,$59,$42,$80,$21,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A228 DEFB $00,$00,$00,$00,$00,$80,$80,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A230 DEFB $38,$0E,$05,$1B,$35,$36,$6F,$6E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A238 DEFB $75,$38,$82,$55,$AB,$FF,$03,$50 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A240 DEFB $AA,$55,$38,$92,$41,$C2,$3C,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A248 DEFB $40,$20,$29,$38,$80,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A250 DEFB $20,$60,$A0,$20,$38,$76,$5D,$6A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A258 DEFB $35,$2B,$35,$1B,$0E,$38,$FA,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A260 DEFB $E3,$80,$80,$00,$00,$00,$38,$95 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A268 DEFB $46,$A0,$D2,$66,$30,$18,$07,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A270 DEFB $40,$40,$40,$40,$80,$80,$80,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A278 DEFB $36,$36,$36,$36,$36,$38,$F9,$E6 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A280 DEFB $DB,$AE,$BD,$5B,$7F,$B5,$38,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A288 DEFB $7F,$BF,$5F,$AF,$67,$B9,$D6,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A290 DEFB $38,$FD,$FA,$F4,$E8,$EA,$E9,$E8 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A298 DEFB $ED,$36,$38,$A1,$F9,$56,$25,$9B ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A2A0 DEFB $C5,$B2,$CD,$36,$38,$F6,$E8,$E9 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A2A8 DEFB $E8,$E9,$E8,$E9,$EC,$36,$38,$F3 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A2B0 DEFB $FF,$D9,$A6,$D9,$C2,$80,$21,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A2B8 DEFB $FF,$FF,$FF,$FF,$7F,$BF,$BF,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A2C0 DEFB $38,$EE,$E5,$DB,$B5,$B6,$6F,$6E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A2C8 DEFB $75,$36,$38,$92,$41,$C2,$3D,$83 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A2D0 DEFB $5F,$26,$29,$38,$BF,$7F,$FF,$DF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A2D8 DEFB $AF,$6F,$AF,$2F,$38,$76,$5D,$6A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A2E0 DEFB $B5,$AB,$B5,$DB,$EE,$38,$FA,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A2E8 DEFB $E3,$9C,$BF,$7F,$7F,$FF,$38,$95 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A2F0 DEFB $46,$A0,$D2,$66,$B0,$D8,$E7,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A2F8 DEFB $5F,$5F,$5F,$5F,$BF,$BF,$BF,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A300 DEFB $36,$36,$36,$36,$36,$38,$00,$01 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A308 DEFB $06,$0B,$1F,$2C,$7F,$BD,$38,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A310 DEFB $80,$C0,$C0,$60,$B0,$D0,$B8,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A318 DEFB $36,$38,$01,$03,$04,$08,$0A,$09 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A320 DEFB $08,$0D,$38,$FB,$B5,$1A,$5E,$AE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A328 DEFB $5D,$8F,$57,$38,$C8,$D4,$B2,$49 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A330 DEFB $55,$2A,$98,$C4,$36,$36,$38,$06 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A338 DEFB $0E,$0B,$0D,$0A,$0D,$0A,$0F,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A340 DEFB $A3,$51,$28,$95,$D8,$EC,$F9,$7E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A348 DEFB $38,$F8,$B0,$E0,$60,$B0,$0E,$55 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A350 DEFB $6A,$38,$00,$00,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A358 DEFB $80,$F0,$36,$38,$05,$1A,$35,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A360 DEFB $6F,$6E,$75,$76,$38,$FF,$FF,$5F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A368 DEFB $03,$50,$AA,$55,$F8,$38,$95,$E2 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A370 DEFB $F9,$BF,$5F,$2E,$6B,$5B,$38,$4F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A378 DEFB $A0,$49,$82,$D1,$F2,$6F,$60,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A380 DEFB $00,$80,$80,$80,$80,$80,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A388 DEFB $38,$5D,$6A,$35,$2B,$35,$1B,$0E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A390 DEFB $00,$38,$F2,$D5,$AA,$A4,$5B,$59 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A398 DEFB $80,$7F,$38,$D1,$41,$80,$80,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A3A0 DEFB $C0,$30,$F8,$38,$40,$40,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A3A8 DEFB $00,$00,$00,$00,$36,$36,$38,$FE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A3B0 DEFB $F9,$F6,$EB,$DF,$AC,$7F,$BD,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A3B8 DEFB $7F,$BF,$DF,$DF,$6F,$B7,$D7,$BB ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A3C0 DEFB $36,$36,$38,$FD,$FB,$F4,$E8,$EA ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A3C8 DEFB $E9,$E8,$ED,$36,$38,$CB,$D5,$B2 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A3D0 DEFB $49,$55,$2A,$9A,$C5,$38,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A3D8 DEFB $FF,$7F,$7F,$FF,$FF,$FF,$36,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A3E0 DEFB $F6,$EE,$EB,$ED,$EA,$ED,$EA,$EF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A3E8 DEFB $36,$38,$FB,$B7,$EF,$6F,$B1,$0E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A3F0 DEFB $55,$6A,$38,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A3F8 DEFB $7F,$8F,$F0,$36,$38,$E5,$DA,$B5 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A400 DEFB $B6,$6F,$6E,$75,$76,$36,$36,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A408 DEFB $4F,$A0,$49,$82,$D1,$F2,$6F,$60 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A410 DEFB $38,$7F,$BF,$BF,$BF,$BF,$BF,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A418 DEFB $FF,$38,$5D,$6A,$B5,$AB,$B5,$DB ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A420 DEFB $EE,$F1,$36,$38,$D5,$4D,$BE,$BF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A428 DEFB $3F,$CF,$37,$FB,$38,$5F,$5F,$BF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A430 DEFB $FF,$FF,$FF,$FF,$FF,$36,$36,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A438 DEFB $00,$03,$0D,$17,$3E,$5C,$7F,$BD ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A440 DEFB $38,$00,$50,$FC,$76,$A9,$DE,$77 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A448 DEFB $8D,$38,$00,$00,$00,$00,$00,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A450 DEFB $80,$80,$36,$36,$36,$38,$80,$C0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A458 DEFB $C0,$80,$80,$00,$00,$00,$36,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A460 DEFB $38,$0C,$98,$F0,$A6,$59,$42,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A468 DEFB $21,$36,$36,$38,$FC,$F3,$ED,$D7 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A470 DEFB $BE,$5C,$7F,$BD,$38,$0F,$53,$FD ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A478 DEFB $76,$A9,$DE,$77,$8D,$38,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A480 DEFB $FF,$FF,$7F,$BF,$BF,$BF,$36,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A488 DEFB $36,$38,$BF,$DF,$DF,$BF,$BF,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A490 DEFB $7F,$FF,$36,$36,$38,$0D,$9B,$F1 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A498 DEFB $A6,$59,$42,$80,$21,$36,$36,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A4A0 DEFB $00,$03,$0D,$17,$3E,$5C,$7F,$BD ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A4A8 DEFB $38,$00,$50,$FC,$76,$A9,$DE,$77 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A4B0 DEFB $8D,$38,$00,$00,$00,$00,$00,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A4B8 DEFB $80,$80,$36,$36,$36,$38,$80,$C0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A4C0 DEFB $C0,$80,$80,$00,$00,$00,$36,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A4C8 DEFB $38,$0E,$9C,$FE,$D9,$82,$80,$21 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A4D0 DEFB $92,$38,$00,$00,$00,$00,$80,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A4D8 DEFB $00,$80,$36,$38,$FC,$F3,$ED,$D7 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A4E0 DEFB $BE,$5C,$7F,$BD,$38,$0F,$53,$FD ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A4E8 DEFB $76,$A9,$DE,$77,$8D,$38,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A4F0 DEFB $FF,$FF,$7F,$BF,$BF,$BF,$36,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A4F8 DEFB $36,$38,$BF,$DF,$DF,$BF,$BF,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A500 DEFB $7F,$FF,$36,$36,$38,$0E,$9D,$FE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A508 DEFB $D9,$82,$80,$21,$92,$38,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A510 DEFB $FF,$7F,$BF,$BF,$7F,$BF,$38,$FE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A518 DEFB $BE,$1C,$5C,$AD,$5C,$9E,$7E,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A520 DEFB $53,$8B,$01,$C9,$35,$7B,$A3,$06 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A528 DEFB $36,$36,$38,$FE,$BE,$1C,$5D,$AD ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A530 DEFB $5D,$9E,$7E,$38,$53,$03,$C9,$B5 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A538 DEFB $35,$7B,$FB,$A6,$36,$36,$38,$FE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A540 DEFB $BE,$1C,$5C,$AC,$5C,$9E,$7E,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A548 DEFB $53,$8B,$01,$01,$01,$73,$AB,$06 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A550 DEFB $36,$36,$38,$A1,$F9,$56,$24,$98 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A558 DEFB $C4,$B2,$CC,$38,$C0,$C0,$A6,$D9 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A560 DEFB $82,$80,$21,$92,$38,$A1,$F9,$56 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A568 DEFB $25,$9B,$C5,$B2,$CD,$38,$D3,$D9 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A570 DEFB $A6,$D9,$82,$80,$21,$92,$36,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A578 DEFB $00,$00,$01,$03,$04,$0B,$04,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A580 DEFB $38,$00,$70,$FC,$76,$A1,$06,$1F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A588 DEFB $00,$38,$00,$00,$00,$00,$00,$80 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A590 DEFB $80,$80,$38,$00,$03,$0D,$30,$55 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A598 DEFB $7B,$6D,$5B,$38,$D4,$AD,$50,$BF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A5A0 DEFB $57,$AF,$FF,$7F,$38,$8E,$01,$0E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A5A8 DEFB $03,$FD,$F3,$AB,$06,$38,$80,$C0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A5B0 DEFB $C0,$80,$80,$00,$00,$00,$36,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A5B8 DEFB $FF,$FE,$FD,$FB,$F4,$EB,$C4,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A5C0 DEFB $38,$8F,$73,$FD,$76,$A1,$06,$1F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A5C8 DEFB $00,$38,$FF,$FF,$FF,$FF,$7F,$BF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A5D0 DEFB $BF,$BF,$38,$FC,$F3,$CD,$B0,$55 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A5D8 DEFB $7B,$6D,$5B,$36,$36,$38,$BF,$DF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A5E0 DEFB $DF,$BF,$BF,$7F,$7F,$FF,$38,$98 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A5E8 DEFB $C4,$B2,$CC,$C0,$C0,$C0,$A6,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A5F0 DEFB $D9,$C2,$80,$21,$92,$41,$C2,$3C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A5F8 DEFB $38,$9B,$C5,$B2,$CD,$D3,$DF,$D9 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A600 DEFB $A6,$38,$D9,$C2,$80,$21,$92,$41 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A608 DEFB $C2,$3C,$36,$38,$00,$01,$06,$0B ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A610 DEFB $1F,$2E,$3F,$5E,$38,$00,$80,$C0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A618 DEFB $F0,$18,$68,$D8,$F4,$36,$36,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A620 DEFB $00,$01,$03,$06,$05,$04,$06,$06 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A628 DEFB $38,$FD,$FE,$1B,$2F,$55,$AA,$4D ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A630 DEFB $BA,$38,$6B,$F0,$AC,$2B,$9A,$CC ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A638 DEFB $E7,$BA,$38,$00,$80,$40,$40,$8C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A640 DEFB $33,$C7,$04,$38,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A648 DEFB $00,$80,$40,$40,$38,$03,$05,$06 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A650 DEFB $05,$0A,$05,$0B,$05,$38,$4D,$F2 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A658 DEFB $FD,$BF,$F7,$BF,$DD,$77,$38,$55 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A660 DEFB $AA,$55,$AA,$FF,$80,$00,$00,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A668 DEFB $00,$91,$48,$83,$FC,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A670 DEFB $38,$80,$40,$80,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A678 DEFB $00,$36,$38,$FE,$F9,$F6,$EB,$DF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A680 DEFB $AE,$BF,$5E,$38,$7F,$BF,$CF,$F7 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A688 DEFB $1B,$6B,$DB,$F4,$36,$36,$38,$FE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A690 DEFB $FD,$FB,$F6,$F5,$F4,$F6,$F6,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A698 DEFB $36,$38,$7F,$BF,$5F,$53,$8C,$33 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A6A0 DEFB $C7,$04,$38,$FF,$FF,$FF,$FF,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A6A8 DEFB $BF,$5F,$5F,$38,$FB,$F5,$F6,$F5 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A6B0 DEFB $EA,$F5,$EB,$F5,$36,$38,$55,$AA ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A6B8 DEFB $55,$AA,$FF,$FF,$FF,$FF,$38,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A6C0 DEFB $91,$48,$83,$FC,$FF,$FF,$FF,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A6C8 DEFB $BF,$5F,$BF,$7F,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A6D0 DEFB $38,$06,$07,$0D,$0B,$15,$0B,$0A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A6D8 DEFB $0D,$38,$FF,$7F,$FF,$7F,$FF,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A6E0 DEFB $FF,$FF,$38,$0E,$BC,$F8,$F0,$E0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A6E8 DEFB $C0,$C0,$E0,$36,$38,$07,$1A,$35 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A6F0 DEFB $36,$6F,$6E,$75,$76,$38,$FF,$FE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A6F8 DEFB $5C,$03,$50,$AA,$55,$F8,$38,$E0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A700 DEFB $F0,$7C,$BF,$5F,$2E,$6B,$5B,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A708 DEFB $00,$00,$00,$00,$C0,$E0,$60,$60 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A710 DEFB $38,$5D,$6A,$35,$2B,$35,$1B,$0E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A718 DEFB $00,$38,$F2,$D5,$AA,$A4,$5B,$59 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A720 DEFB $80,$7F,$38,$D1,$41,$80,$80,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A728 DEFB $C0,$30,$F8,$38,$40,$40,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A730 DEFB $00,$00,$00,$00,$38,$F6,$F7,$ED ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A738 DEFB $EB,$D5,$EB,$EA,$ED,$36,$38,$0E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A740 DEFB $BD,$FB,$F7,$EF,$DF,$DF,$EF,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A748 DEFB $38,$E7,$DA,$B5,$B6,$6F,$6E,$75 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A750 DEFB $76,$36,$38,$EF,$F3,$7C,$BF,$5F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A758 DEFB $2E,$6B,$5B,$38,$FF,$FF,$FF,$3F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A760 DEFB $DF,$EF,$6F,$6F,$38,$5D,$6A,$B5 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A768 DEFB $AB,$B5,$DB,$EE,$F0,$36,$38,$D5 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A770 DEFB $4D,$BE,$BF,$3F,$CF,$37,$FB,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A778 DEFB $5F,$5F,$BF,$FF,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A780 DEFB $38,$06,$0B,$05,$0B,$15,$0B,$17 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A788 DEFB $0A,$38,$FF,$FF,$FF,$5F,$FF,$77 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A790 DEFB $BF,$EF,$38,$0E,$9C,$F8,$F0,$C0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A798 DEFB $80,$00,$00,$36,$38,$0D,$07,$1A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A7A0 DEFB $35,$36,$6F,$6E,$75,$38,$FF,$BF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A7A8 DEFB $F7,$5F,$03,$50,$AA,$55,$38,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A7B0 DEFB $00,$00,$80,$80,$40,$20,$29,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A7B8 DEFB $00,$00,$00,$00,$20,$60,$A0,$20 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A7C0 DEFB $38,$76,$5D,$6A,$35,$2B,$35,$1B ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A7C8 DEFB $0E,$38,$FA,$FF,$E3,$80,$80,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A7D0 DEFB $00,$00,$38,$95,$46,$A0,$D2,$66 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A7D8 DEFB $30,$18,$07,$38,$40,$40,$40,$40 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A7E0 DEFB $80,$80,$80,$00,$38,$F6,$EB,$F5 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A7E8 DEFB $EB,$D5,$EB,$D7,$EA,$36,$38,$0E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A7F0 DEFB $9D,$FB,$F7,$FF,$FF,$FF,$FF,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A7F8 DEFB $38,$ED,$E7,$DA,$B5,$B6,$6F,$6E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A800 DEFB $75,$36,$38,$FF,$FF,$FF,$FF,$BF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A808 DEFB $5F,$26,$29,$38,$FF,$FF,$FF,$DF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A810 DEFB $AF,$6F,$AF,$2F,$38,$76,$5D,$6A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A818 DEFB $B5,$AB,$B5,$DB,$EE,$38,$FA,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A820 DEFB $E3,$9C,$BF,$7F,$7F,$FF,$38,$95 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A828 DEFB $46,$A0,$D2,$66,$B0,$D8,$E7,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A830 DEFB $5F,$5F,$5F,$5F,$BF,$BF,$BF,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A838 DEFB $38,$06,$0B,$15,$0B,$15,$0B,$17 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A840 DEFB $0A,$38,$FB,$FF,$FF,$7F,$FF,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A848 DEFB $FF,$FF,$38,$0C,$9C,$F8,$F0,$E0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A850 DEFB $C0,$C0,$E0,$36,$38,$0D,$05,$1A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A858 DEFB $35,$36,$6F,$6E,$75,$38,$FF,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A860 DEFB $BF,$57,$03,$50,$AA,$55,$38,$E0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A868 DEFB $F0,$F0,$FC,$FF,$7F,$3E,$2F,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A870 DEFB $00,$00,$00,$00,$20,$60,$A0,$20 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A878 DEFB $38,$76,$5D,$6A,$35,$2B,$35,$1B ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A880 DEFB $0E,$38,$FA,$FF,$E3,$80,$80,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A888 DEFB $00,$00,$38,$95,$46,$A0,$D2,$66 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A890 DEFB $30,$18,$07,$38,$40,$40,$40,$40 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A898 DEFB $80,$80,$80,$00,$38,$F6,$EB,$D5 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A8A0 DEFB $EB,$D5,$EB,$D7,$EA,$36,$38,$0D ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A8A8 DEFB $9D,$FB,$F7,$EF,$DF,$DF,$EF,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A8B0 DEFB $38,$ED,$E5,$DA,$B5,$B6,$6F,$6E ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A8B8 DEFB $75,$36,$38,$EF,$F7,$F3,$FC,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A8C0 DEFB $7F,$3E,$2F,$38,$FF,$FF,$FF,$DF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A8C8 DEFB $2F,$6F,$AF,$2F,$38,$76,$5D,$6A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A8D0 DEFB $B5,$AB,$B5,$DB,$EE,$38,$FA,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A8D8 DEFB $E3,$9C,$BF,$7F,$7F,$FF,$38,$95 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A8E0 DEFB $46,$A0,$D2,$66,$B0,$D8,$E7,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A8E8 DEFB $5F,$5F,$5F,$5F,$BF,$BF,$BF,$7F ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A8F0 DEFB $38,$00,$00,$00,$00,$05,$0A,$1B ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A8F8 DEFB $14,$38,$00,$00,$00,$00,$40,$A0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A900 DEFB $90,$50,$36,$36,$38,$0B,$09,$04 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A908 DEFB $04,$04,$04,$08,$09,$38,$30,$A0 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A910 DEFB $C0,$40,$C0,$40,$E0,$60,$36,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A918 DEFB $38,$0A,$11,$12,$15,$12,$15,$13 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A920 DEFB $09,$38,$E0,$E0,$A1,$E3,$F4,$FB ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A928 DEFB $FF,$FD,$38,$00,$70,$FC,$76,$A9 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A930 DEFB $DE,$77,$8D,$38,$00,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A938 DEFB $00,$80,$80,$80,$38,$0B,$09,$0A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A940 DEFB $0A,$09,$06,$06,$03,$38,$FE,$DE ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A948 DEFB $BC,$FC,$DC,$FC,$FE,$6E,$38,$53 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A950 DEFB $8B,$01,$01,$01,$73,$AB,$06,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A958 DEFB $80,$C0,$C0,$80,$80,$00,$00,$00 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A960 DEFB $38,$FF,$FF,$FF,$FA,$F5,$EA,$DB ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A968 DEFB $D4,$38,$FF,$FF,$FF,$BF,$5F,$AF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A970 DEFB $97,$57,$36,$36,$38,$EB,$E9,$F4 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A978 DEFB $F4,$F4,$F4,$E8,$E9,$38,$37,$AF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A980 DEFB $DF,$5F,$DF,$5F,$EF,$6F,$36,$36 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A988 DEFB $38,$EA,$D1,$D2,$D5,$D2,$D5,$D3 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A990 DEFB $E9,$38,$EF,$EE,$AD,$EB,$F4,$FB ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A998 DEFB $FF,$FD,$38,$8F,$73,$FD,$76,$A9 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A9A0 DEFB $DE,$77,$8D,$38,$FF,$FF,$FF,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A9A8 DEFB $7F,$BF,$BF,$BF,$38,$EB,$E9,$EA ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A9B0 DEFB $EA,$E9,$F6,$F6,$FB,$36,$36,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A9B8 DEFB $BF,$DF,$DF,$BF,$BF,$7F,$7F,$FF ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A9C0 DEFB $36,$38,$00,$01,$06,$0B,$1F,$2C ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A9C8 DEFB $7F,$BD,$38,$00,$80,$C0,$C0,$60 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A9D0 DEFB $B0,$D0,$B8,$36,$36,$38,$01,$03 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A9D8 DEFB $04,$08,$0A,$09,$08,$0D,$38,$FB ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A9E0 DEFB $B5,$1A,$5E,$AE,$5D,$8F,$57,$38 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A9E8 DEFB $C8,$D4,$B2,$49,$55,$2A,$9A,$44 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A9F0 DEFB $36,$36,$38,$06,$0E,$0B,$0D,$0A ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $A9F8 DEFB $17,$0B,$15,$38,$A3,$51,$28,$95 ; #UDGTABLE { #UDG(#PC) } UDGTABLE#
 $AA00 DEFB $D8,$EC,$B6,$F9,$38,$38,$00,$80
 $AA08 DEFB $40,$B0,$0C,$22,$55,$36,$36,$38
 $AA10 DEFB $0F,$05,$1A,$35,$36,$6F,$6E,$75
 $AA18 DEFB $38,$7E,$FF,$FF,$5F,$03,$50,$AA
 $AA20 DEFB $55,$38,$6A,$95,$62,$19,$87,$40
 $AA28 DEFB $20,$29,$38,$F0,$4F,$A0,$49,$82
 $AA30 DEFB $51,$F2,$2F,$38,$00,$00,$80,$80
 $AA38 DEFB $80,$80,$80,$00,$38,$76,$5D,$6A
 $AA40 DEFB $35,$2B,$35,$1B,$0E,$38,$FA,$FF
 $AA48 DEFB $E3,$80,$80,$00,$00,$00,$38,$95
 $AA50 DEFB $46,$A0,$D2,$66,$30,$18,$07,$38
 $AA58 DEFB $40,$40,$40,$40,$80,$80,$80,$00
 $AA60 DEFB $36,$36,$38,$FE,$F9,$F6,$EB,$DF
 $AA68 DEFB $AC,$7F,$BD,$38,$7F,$BF,$DF,$DF
 $AA70 DEFB $6F,$B7,$D7,$BB,$36,$36,$38,$FD
 $AA78 DEFB $FB,$F4,$E8,$EA,$E9,$E8,$ED,$36
 $AA80 DEFB $38,$CB,$D5,$B2,$49,$55,$2A,$9A
 $AA88 DEFB $45,$36,$36,$38,$F6,$EE,$EB,$ED
 $AA90 DEFB $EA,$D7,$EB,$D5,$36,$38,$3B,$47
 $AA98 DEFB $BF,$4F,$B3,$0D,$22,$55,$36,$36
 $AAA0 DEFB $38,$EF,$E5,$DA,$B5,$B6,$6F,$6E
 $AAA8 DEFB $75,$36,$36,$38,$F0,$4F,$A0,$49
 $AAB0 DEFB $82,$51,$F2,$2F,$38,$FF,$7F,$BF
 $AAB8 DEFB $BF,$BF,$BF,$BF,$7F,$38,$76,$5D
 $AAC0 DEFB $6A,$B5,$AB,$B5,$DB,$EE,$38,$FA
 $AAC8 DEFB $FF,$E3,$9C,$BF,$7F,$7F,$FF,$38
 $AAD0 DEFB $95,$46,$A0,$D2,$66,$B0,$D8,$E7
 $AAD8 DEFB $38,$50,$5F,$5F,$5F,$BF,$BF,$BF
 $AAE0 DEFB $7F,$36,$38,$FE,$BE,$1C,$5C,$AC
 $AAE8 DEFB $5C,$9C,$7E,$38,$53,$8B,$01,$00
 $AAF0 DEFB $00,$1D,$33,$06,$36,$36,$38,$FE
 $AAF8 DEFB $BE,$1C,$5C,$A8,$58,$9C,$7E,$38
 $AB00 DEFB $53,$8B,$01,$00,$F0,$01,$03,$06
 $AB08 DEFB $36,$36,$38,$FE,$BE,$1C,$5C,$A8
 $AB10 DEFB $59,$9C,$7E,$38,$53,$8B,$01,$01
 $AB18 DEFB $01,$C3,$63,$06,$36,$36,$38,$FE
 $AB20 DEFB $BE,$1C,$5C,$AC,$5C,$9E,$7E,$38
 $AB28 DEFB $53,$8B,$01,$01,$71,$FB,$73,$06
 $AB30 DEFB $36,$36,$38,$51,$1A,$CF,$77,$5D
 $AB38 DEFB $3B,$4E,$11,$36,$38,$04,$44,$2D
 $AB40 DEFB $1F,$CD,$7F,$3A,$17,$38,$00,$90
 $AB48 DEFB $38,$B8,$F2,$E4,$79,$7C,$38,$3D
 $AB50 DEFB $F7,$9E,$3B,$4D,$39,$60,$04,$38
 $AB58 DEFB $F0,$78,$F4,$F6,$D0,$88,$20,$00
 $AB60 DEFB $36,$36,$36,$36,$38,$24,$10,$09
 $AB68 DEFB $95,$43,$27,$3E,$06,$38,$08,$00
 $AB70 DEFB $79,$FE,$FE,$7F,$FB,$FB,$38,$08
 $AB78 DEFB $80,$00,$3A,$44,$98,$B8,$FC,$38
 $AB80 DEFB $07,$0F,$3E,$4F,$07,$03,$2F,$37
 $AB88 DEFB $38,$FF,$7F,$DF,$58,$3F,$7F,$F7
 $AB90 DEFB $FD,$38,$8A,$99,$F1,$74,$F0,$F0
 $AB98 DEFB $EA,$C0,$38,$23,$03,$05,$1F,$10
 $ABA0 DEFB $20,$01,$11,$38,$BF,$3F,$7F,$CB
 $ABA8 DEFB $F8,$18,$1A,$04,$38,$E0,$DC,$C2
 $ABB0 DEFB $24,$10,$E0,$10,$0C,$36,$36,$36
 $ABB8 DEFB $36,$36,$36,$36,$36,$36,$38,$01
 $ABC0 DEFB $3F,$00,$00,$00,$01,$0F,$10,$38
 $ABC8 DEFB $00,$FF,$80,$40,$20,$FF,$FF,$00
 $ABD0 DEFB $38,$3F,$7F,$57,$57,$57,$55,$55
 $ABD8 DEFB $55,$38,$FF,$80,$BE,$A2,$A6,$AA
 $ABE0 DEFB $A2,$AA,$38,$55,$55,$57,$57,$7F
 $ABE8 DEFB $7F,$7F,$40,$38,$A2,$A2,$BE,$80
 $ABF0 DEFB $FF,$FF,$FF,$01,$38,$40,$7F,$3F
 $ABF8 DEFB $3F,$1F,$01,$00,$00,$38,$01,$FD
 $AC00 DEFB $87,$33,$7B,$30,$84,$78,$38,$C1
 $AC08 DEFB $BF,$C0,$FF,$FE,$F1,$EF,$D0,$38
 $AC10 DEFB $00,$FF,$80,$5F,$20,$FF,$FF,$00
 $AC18 DEFB $36,$36,$36,$36,$38,$40,$7F,$BF
 $AC20 DEFB $BF,$DF,$E1,$FE,$FF,$38,$01,$FD
 $AC28 DEFB $87,$33,$7B,$30,$85,$7B,$38,$00
 $AC30 DEFB $FF,$00,$00,$00,$FF,$FF,$00,$38
 $AC38 DEFB $00,$FF,$00,$00,$00,$FF,$FF,$00
 $AC40 DEFB $38,$FF,$FC,$AD,$AD,$AD,$AD,$AD
 $AC48 DEFB $AD,$38,$FF,$07,$F7,$17,$97,$57
 $AC50 DEFB $17,$97,$38,$AD,$AD,$AD,$AC,$FF
 $AC58 DEFB $FF,$FF,$F0,$38,$57,$17,$F7,$07
 $AC60 DEFB $FF,$FF,$FF,$1F,$38,$E0,$E7,$F8
 $AC68 DEFB $F3,$F7,$03,$08,$07,$38,$0F,$CF
 $AC70 DEFB $7F,$3F,$BF,$20,$40,$80,$38,$00
 $AC78 DEFB $FF,$00,$00,$00,$FF,$FF,$00,$38
 $AC80 DEFB $00,$FF,$00,$00,$00,$FF,$FF,$00
 $AC88 DEFB $36,$36,$36,$36,$38,$E0,$E7,$F8
 $AC90 DEFB $F3,$F7,$03,$E8,$F7,$38,$0F,$CF
 $AC98 DEFB $7F,$3F,$BF,$20,$5F,$BF,$36,$38
 $ACA0 DEFB $00,$00,$00,$01,$03,$07,$0D,$1F
 $ACA8 DEFB $38,$00,$7F,$C9,$FF,$6C,$F6,$DB
 $ACB0 DEFB $8D,$38,$00,$FF,$25,$FF,$06,$0D
 $ACB8 DEFB $1B,$B6,$38,$00,$00,$00,$01,$03
 $ACC0 DEFB $03,$02,$03,$38,$37,$7E,$DC,$F8
 $ACC8 DEFB $7F,$FF,$49,$FF,$38,$06,$03,$01
 $ACD0 DEFB $00,$FF,$FF,$24,$FF,$38,$EC,$58
 $ACD8 DEFB $B0,$E0,$FF,$FF,$92,$FF,$36,$38
 $ACE0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FD,$FF
 $ACE8 DEFB $38,$FF,$FF,$C9,$FF,$6F,$F7,$FB
 $ACF0 DEFB $FD,$38,$FF,$FF,$25,$FF,$FE,$FD
 $ACF8 DEFB $FB,$F7,$38,$FF,$FF,$FF,$FF,$FF
 $AD00 DEFB $FF,$FE,$FF,$38,$F7,$FF,$DF,$FF
 $AD08 DEFB $7F,$FF,$49,$FF,$38,$FE,$FF,$FF
 $AD10 DEFB $FF,$FF,$FF,$24,$FF,$38,$EF,$5F
 $AD18 DEFB $BF,$FF,$FF,$FF,$92,$FF,$36,$38
 $AD20 DEFB $00,$01,$01,$01,$00,$00,$01,$07
 $AD28 DEFB $38,$00,$CC,$54,$7C,$EE,$D6,$AB
 $AD30 DEFB $FD,$38,$00,$00,$00,$00,$00,$00
 $AD38 DEFB $00,$80,$36,$36,$38,$0F,$3B,$41
 $AD40 DEFB $85,$AA,$95,$89,$D7,$38,$B0,$FB
 $AD48 DEFB $7E,$F4,$F3,$D8,$FC,$FF,$38,$60
 $AD50 DEFB $18,$DC,$B8,$50,$E8,$10,$20,$36
 $AD58 DEFB $38,$00,$00,$00,$01,$01,$02,$03
 $AD60 DEFB $04,$38,$69,$82,$94,$94,$89,$97
 $AD68 DEFB $C2,$E8,$38,$BF,$FB,$FE,$FD,$F8
 $AD70 DEFB $F8,$02,$29,$38,$C0,$00,$60,$90
 $AD78 DEFB $28,$08,$10,$28,$36,$38,$05,$06
 $AD80 DEFB $07,$03,$03,$01,$00,$00,$38,$55
 $AD88 DEFB $BA,$5F,$AA,$FD,$FE,$FF,$3E,$38
 $AD90 DEFB $54,$BC,$FF,$0F,$43,$A2,$52,$A3
 $AD98 DEFB $38,$10,$20,$C0,$F0,$FC,$EE,$B6
 $ADA0 DEFB $B6,$36,$36,$38,$0D,$1C,$25,$51
 $ADA8 DEFB $9B,$81,$60,$1F,$38,$55,$BC,$7C
 $ADB0 DEFB $EE,$C1,$F8,$27,$C0,$38,$14,$14
 $ADB8 DEFB $00,$00,$80,$40,$80,$00,$36,$36
 $ADC0 DEFB $38,$FE,$FD,$FD,$FD,$FE,$FE,$F9
 $ADC8 DEFB $F7,$38,$03,$CD,$55,$7D,$EE,$D6
 $ADD0 DEFB $AB,$FD,$38,$FF,$FF,$FF,$FF,$FF
 $ADD8 DEFB $FF,$7F,$9F,$36,$36,$38,$CF,$BB
 $ADE0 DEFB $41,$85,$AA,$95,$89,$D7,$36,$38
 $ADE8 DEFB $67,$1B,$DD,$BB,$57,$EB,$17,$2F
 $ADF0 DEFB $36,$38,$FF,$FE,$FE,$FD,$FD,$FA
 $ADF8 DEFB $FB,$F4,$36,$36,$38,$DF,$1F,$6F
 $AE00 DEFB $97,$2B,$0B,$17,$2B,$36,$38,$F5
 $AE08 DEFB $F6,$F7,$FB,$FB,$FD,$FE,$FF,$36
 $AE10 DEFB $36,$38,$17,$2F,$CF,$F3,$FD,$EE
 $AE18 DEFB $B6,$B6,$36,$36,$38,$CD,$DC,$A5
 $AE20 DEFB $51,$9B,$81,$60,$9F,$36,$38,$55
 $AE28 DEFB $D5,$EB,$7F,$BF,$5F,$BF,$7F,$36
 $AE30 DEFB $36,$38,$00,$1C,$17,$17,$0E,$1B
 $AE38 DEFB $1E,$7B,$38,$00,$01,$07,$DF,$71
 $AE40 DEFB $26,$DB,$27,$38,$00,$C0,$40,$40
 $AE48 DEFB $80,$80,$80,$C0,$38,$00,$01,$0F
 $AE50 DEFB $30,$55,$7B,$6D,$5B,$38,$FC,$BE
 $AE58 DEFB $5E,$1F,$04,$A0,$D4,$2D,$38,$F9
 $AE60 DEFB $73,$01,$06,$1F,$00,$8E,$01,$38
 $AE68 DEFB $C0,$E0,$C0,$80,$80,$80,$80,$00
 $AE70 DEFB $38,$26,$1B,$0D,$0B,$15,$1B,$37
 $AE78 DEFB $2A,$38,$58,$CF,$FF,$7F,$FF,$7F
 $AE80 DEFB $FF,$FF,$38,$0E,$03,$FC,$F0,$E0
 $AE88 DEFB $C0,$C0,$C0,$38,$80,$00,$00,$00
 $AE90 DEFB $00,$00,$00,$00,$36,$38,$E3,$DC
 $AE98 DEFB $D7,$D7,$EE,$DB,$9E,$7B,$38,$FE
 $AEA0 DEFB $F9,$27,$DF,$71,$26,$DB,$27,$38
 $AEA8 DEFB $3F,$DF,$5F,$5F,$BF,$BF,$BF,$DF
 $AEB0 DEFB $38,$FE,$F1,$CF,$B0,$55,$7B,$6D
 $AEB8 DEFB $5B,$36,$36,$38,$DF,$EF,$DF,$BF
 $AEC0 DEFB $BF,$BF,$BF,$7F,$38,$A6,$DB,$ED
 $AEC8 DEFB $EB,$D5,$DB,$B7,$AA,$36,$38,$0E
 $AED0 DEFB $03,$FD,$F7,$EF,$DF,$DF,$DF,$38
 $AED8 DEFB $BF,$7F,$FF,$FF,$FF,$FF,$FF,$FF
 $AEE0 DEFB $36,$36,$38,$00,$1C,$15,$17,$0E
 $AEE8 DEFB $0D,$1A,$7F,$38,$00,$C0,$40,$C0
 $AEF0 DEFB $E0,$60,$B0,$D8,$36,$36,$38,$00
 $AEF8 DEFB $03,$04,$08,$0A,$09,$08,$0D,$38
 $AF00 DEFB $FB,$BF,$17,$5F,$AF,$5D,$9F,$7F
 $AF08 DEFB $38,$06,$B1,$ED,$4B,$35,$8E,$C1
 $AF10 DEFB $F2,$38,$00,$80,$C0,$80,$00,$80
 $AF18 DEFB $00,$00,$36,$38,$06,$08,$09,$19
 $AF20 DEFB $18,$29,$3C,$4E,$38,$9B,$2F,$4F
 $AF28 DEFB $4F,$9F,$7F,$20,$82,$38,$FC,$B0
 $AF30 DEFB $E6,$D9,$82,$80,$21,$92,$38,$00
 $AF38 DEFB $00,$00,$00,$80,$80,$00,$80,$36
 $AF40 DEFB $38,$55,$6B,$75,$7A,$35,$3A,$1F
 $AF48 DEFB $0F,$38,$55,$AB,$FC,$03,$50,$AA
 $AF50 DEFB $55,$F8,$38,$41,$C2,$7C,$BF,$5F
 $AF58 DEFB $2E,$6B,$5B,$38,$00,$00,$00,$00
 $AF60 DEFB $C0,$E0,$60,$60,$36,$38,$03,$01
 $AF68 DEFB $02,$02,$01,$00,$00,$00,$38,$F2
 $AF70 DEFB $75,$6A,$64,$DB,$59,$80,$7F,$38
 $AF78 DEFB $D1,$41,$80,$80,$00,$C0,$30,$F8
 $AF80 DEFB $38,$40,$40,$00,$00,$00,$00,$00
 $AF88 DEFB $00,$36,$36,$38,$E3,$DC,$D5,$D7
 $AF90 DEFB $EE,$ED,$9A,$7F,$38,$3F,$DF,$5F
 $AF98 DEFB $DF,$EF,$6F,$B7,$D9,$36,$36,$38
 $AFA0 DEFB $FC,$FB,$F4,$E8,$EA,$E9,$E8,$ED
 $AFA8 DEFB $36,$38,$06,$B1,$ED,$4B,$35,$8E
 $AFB0 DEFB $C1,$F2,$38,$7F,$BF,$DF,$BF,$7F
 $AFB8 DEFB $BF,$7F,$FF,$36,$38,$F6,$E8,$E9
 $AFC0 DEFB $D9,$D8,$A9,$BC,$4E,$36,$38,$FD
 $AFC8 DEFB $B1,$E6,$D9,$82,$80,$21,$92,$38
 $AFD0 DEFB $FF,$FF,$FF,$7F,$BF,$BF,$7F,$BF
 $AFD8 DEFB $36,$38,$55,$6B,$75,$7A,$B5,$BA
 $AFE0 DEFB $DF,$EF,$36,$38,$41,$C2,$7C,$BF
 $AFE8 DEFB $5F,$2E,$6B,$5B,$38,$7F,$FF,$FF
 $AFF0 DEFB $3F,$DF,$EF,$6F,$6F,$36,$38,$F3
 $AFF8 DEFB $FD,$FA,$FA,$FD,$FE,$FE,$FF,$36
 $B000 DEFB $38,$D5,$4D,$BE,$BF,$3F,$CF,$37
 $B008 DEFB $FB,$38,$5F,$5F,$BF,$FF,$FF,$FF
 $B010 DEFB $FF,$FF,$36,$38,$00,$00,$00,$00
 $B018 DEFB $00,$77,$5A,$2F,$38,$00,$00,$00
 $B020 DEFB $00,$00,$00,$80,$40,$36,$38,$00
 $B028 DEFB $00,$00,$00,$00,$03,$04,$08,$38
 $B030 DEFB $3C,$1B,$1D,$7F,$FB,$BF,$17,$5F
 $B038 DEFB $38,$E0,$60,$3F,$A1,$40,$AA,$B5
 $B040 DEFB $DF,$38,$00,$00,$C0,$C0,$40,$80
 $B048 DEFB $00,$80,$38,$0A,$09,$08,$0D,$06
 $B050 DEFB $08,$09,$08,$38,$AF,$5D,$9F,$7F
 $B058 DEFB $9B,$2F,$4D,$AF,$38,$E5,$D1,$8E
 $B060 DEFB $00,$00,$00,$00,$26,$38,$80,$00
 $B068 DEFB $00,$00,$00,$00,$00,$00,$38,$19
 $B070 DEFB $18,$29,$3C,$4E,$55,$6B,$75,$38
 $B078 DEFB $4F,$9F,$7F,$20,$82,$55,$AB,$FF
 $B080 DEFB $38,$59,$83,$80,$21,$92,$41,$C2
 $B088 DEFB $3C,$38,$00,$80,$80,$00,$80,$00
 $B090 DEFB $00,$80,$38,$7A,$35,$3A,$1F,$07
 $B098 DEFB $00,$00,$00,$38,$03,$50,$AA,$55
 $B0A0 DEFB $FA,$FF,$03,$00,$38,$C1,$21,$39
 $B0A8 DEFB $06,$94,$C2,$E6,$30,$38,$40,$40
 $B0B0 DEFB $40,$40,$40,$80,$80,$80,$36,$36
 $B0B8 DEFB $38,$0C,$03,$00,$00,$00,$00,$00
 $B0C0 DEFB $00,$38,$80,$00,$00,$00,$00,$00
 $B0C8 DEFB $00,$00,$36,$38,$FF,$FF,$FF,$FF
 $B0D0 DEFB $88,$77,$5A,$AF,$38,$FF,$FF,$FF
 $B0D8 DEFB $FF,$FF,$7F,$BF,$5F,$36,$38,$FF
 $B0E0 DEFB $FF,$FF,$FF,$FC,$FB,$F4,$E8,$38
 $B0E8 DEFB $BC,$DB,$9D,$7F,$FB,$BF,$17,$5F
 $B0F0 DEFB $38,$EF,$60,$3F,$A1,$40,$AA,$B5
 $B0F8 DEFB $DF,$38,$FF,$3F,$DF,$DF,$5F,$BF
 $B100 DEFB $7F,$BF,$38,$EA,$E9,$E8,$ED,$F6
 $B108 DEFB $E8,$E9,$E8,$36,$38,$E5,$D1,$AE
 $B110 DEFB $F1,$FF,$FF,$D9,$A6,$38,$BF,$7F
 $B118 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$38,$D9
 $B120 DEFB $D8,$A9,$BC,$4E,$55,$6B,$75,$36
 $B128 DEFB $36,$38,$7F,$BF,$BF,$7F,$BF,$7F
 $B130 DEFB $7F,$BF,$38,$7A,$B5,$BA,$DF,$E7
 $B138 DEFB $F8,$FF,$FF,$38,$03,$50,$AA,$55
 $B140 DEFB $FA,$FF,$03,$FC,$36,$38,$5F,$5F
 $B148 DEFB $5F,$5F,$5F,$BF,$BF,$BF,$36,$36
 $B150 DEFB $38,$CC,$F3,$FC,$FF,$FF,$FF,$FF
 $B158 DEFB $FF,$38,$BF,$7F,$FF,$FF,$FF,$FF
 $B160 DEFB $FF,$FF,$36,$38,$00,$77,$5A,$2F
 $B168 DEFB $3C,$1B,$1D,$7F,$38,$00,$00,$80
 $B170 DEFB $40,$E0,$60,$3F,$A1,$38,$00,$00
 $B178 DEFB $00,$00,$00,$00,$C0,$C0,$38,$00
 $B180 DEFB $03,$04,$08,$0A,$09,$08,$0D,$38
 $B188 DEFB $FB,$BF,$17,$5F,$AF,$5D,$9F,$7F
 $B190 DEFB $38,$40,$AA,$B5,$DF,$E5,$D1,$8E
 $B198 DEFB $00,$38,$40,$80,$00,$80,$80,$00
 $B1A0 DEFB $00,$00,$38,$06,$08,$09,$08,$19
 $B1A8 DEFB $18,$29,$3C,$38,$9B,$2F,$4D,$AF
 $B1B0 DEFB $4F,$9F,$7F,$20,$38,$00,$00,$00
 $B1B8 DEFB $26,$59,$83,$80,$21,$38,$00,$00
 $B1C0 DEFB $00,$00,$00,$80,$80,$00,$38,$4E
 $B1C8 DEFB $55,$6B,$75,$7A,$35,$3A,$1F,$38
 $B1D0 DEFB $82,$55,$AB,$FF,$03,$50,$AA,$55
 $B1D8 DEFB $38,$92,$41,$C2,$3C,$80,$40,$20
 $B1E0 DEFB $29,$38,$80,$00,$00,$00,$00,$40
 $B1E8 DEFB $A0,$20,$38,$07,$00,$00,$00,$00
 $B1F0 DEFB $00,$00,$00,$38,$FA,$FF,$03,$00
 $B1F8 DEFB $00,$00,$00,$00,$38,$95,$46,$A0
 $B200 DEFB $D2,$66,$31,$19,$06,$38,$20,$40
 $B208 DEFB $40,$40,$80,$80,$00,$00,$36,$36
 $B210 DEFB $36,$36,$36,$38,$88,$77,$5A,$AF
 $B218 DEFB $BC,$DB,$9D,$7F,$38,$FF,$7F,$BF
 $B220 DEFB $5F,$EF,$60,$3F,$A1,$38,$FF,$FF
 $B228 DEFB $FF,$FF,$FF,$3F,$DF,$DF,$38,$FC
 $B230 DEFB $FB,$F4,$E8,$EA,$E9,$E8,$ED,$36
 $B238 DEFB $38,$40,$AA,$B5,$DF,$E5,$D1,$AE
 $B240 DEFB $F1,$38,$5F,$BF,$7F,$BF,$BF,$7F
 $B248 DEFB $FF,$FF,$38,$F6,$E8,$E9,$E8,$D9
 $B250 DEFB $D8,$A9,$BC,$36,$38,$FF,$FF,$D9
 $B258 DEFB $A6,$59,$83,$80,$21,$38,$FF,$FF
 $B260 DEFB $FF,$FF,$7F,$BF,$BF,$7F,$38,$4E
 $B268 DEFB $55,$6B,$75,$7A,$B5,$BA,$DF,$36
 $B270 DEFB $38,$92,$41,$C2,$3D,$82,$5F,$26
 $B278 DEFB $29,$38,$BF,$7F,$FF,$FF,$BF,$5F
 $B280 DEFB $AF,$2F,$38,$E7,$F8,$FF,$FF,$FF
 $B288 DEFB $FF,$FF,$FF,$38,$FA,$FF,$03,$FC
 $B290 DEFB $FF,$FF,$FF,$FF,$38,$95,$46,$A0
 $B298 DEFB $D2,$66,$B1,$D9,$E6,$38,$2F,$5F
 $B2A0 DEFB $5F,$5F,$BF,$BF,$7F,$FF,$36,$36
 $B2A8 DEFB $36,$36,$36,$38,$00,$1C,$15,$17
 $B2B0 DEFB $0E,$0D,$1A,$7F,$38,$00,$C0,$40
 $B2B8 DEFB $C0,$E0,$60,$B0,$D8,$36,$36,$38
 $B2C0 DEFB $00,$03,$04,$08,$0A,$09,$08,$0D
 $B2C8 DEFB $38,$FB,$BF,$17,$5F,$AF,$5D,$8F
 $B2D0 DEFB $57,$38,$06,$B1,$ED,$4B,$35,$8E
 $B2D8 DEFB $C1,$F2,$38,$00,$80,$C0,$80,$00
 $B2E0 DEFB $80,$00,$00,$36,$38,$06,$0E,$0B
 $B2E8 DEFB $0D,$17,$2B,$35,$4F,$38,$A3,$51
 $B2F0 DEFB $28,$95,$EC,$B6,$F9,$7E,$38,$FC
 $B2F8 DEFB $B0,$E0,$60,$0C,$22,$55,$6A,$38
 $B300 DEFB $00,$00,$00,$00,$00,$00,$80,$F0
 $B308 DEFB $36,$38,$55,$6B,$75,$7A,$35,$3A
 $B310 DEFB $1F,$0F,$38,$FF,$FF,$FF,$03,$50
 $B318 DEFB $AA,$55,$F8,$38,$95,$E2,$F9,$BF
 $B320 DEFB $5F,$2E,$6B,$5B,$38,$4F,$A0,$49
 $B328 DEFB $82,$D1,$F2,$6F,$60,$38,$00,$80
 $B330 DEFB $80,$80,$80,$80,$00,$00,$38,$03
 $B338 DEFB $01,$02,$02,$01,$00,$00,$00,$38
 $B340 DEFB $F2,$75,$6A,$64,$DB,$59,$80,$7F
 $B348 DEFB $38,$D1,$41,$80,$80,$00,$C0,$30
 $B350 DEFB $F8,$38,$40,$40,$00,$00,$00,$00
 $B358 DEFB $00,$00,$36,$36,$38,$E3,$DC,$D5
 $B360 DEFB $D7,$EE,$ED,$9A,$7F,$38,$3F,$DF
 $B368 DEFB $5F,$DF,$EF,$6F,$B7,$D9,$36,$36
 $B370 DEFB $38,$FC,$FB,$F4,$E8,$EA,$E9,$E8
 $B378 DEFB $ED,$36,$36,$38,$7F,$BF,$DF,$BF
 $B380 DEFB $7F,$BF,$7F,$FF,$36,$38,$F6,$EE
 $B388 DEFB $EB,$ED,$D7,$AB,$B5,$4F,$36,$38
 $B390 DEFB $FD,$B3,$EF,$63,$0D,$22,$55,$6A
 $B398 DEFB $38,$FF,$FF,$FF,$FF,$FF,$7F,$8F
 $B3A0 DEFB $F0,$36,$38,$55,$6B,$75,$7A,$B5
 $B3A8 DEFB $BA,$DF,$EF,$36,$36,$38,$4F,$A0
 $B3B0 DEFB $49,$82,$D1,$F2,$6F,$60,$38,$7F
 $B3B8 DEFB $BF,$BF,$BF,$BF,$BF,$7F,$FF,$38
 $B3C0 DEFB $F3,$FD,$FA,$FA,$FD,$FE,$FE,$FF
 $B3C8 DEFB $36,$38,$D5,$4D,$BE,$BF,$3F,$CF
 $B3D0 DEFB $37,$FB,$38,$5F,$5F,$BF,$FF,$FF
 $B3D8 DEFB $FF,$FF,$FF,$36,$36,$38,$1C,$17
 $B3E0 DEFB $17,$0E,$1B,$1E,$3B,$7C,$38,$01
 $B3E8 DEFB $07,$DF,$71,$26,$DB,$27,$F9,$38
 $B3F0 DEFB $C0,$40,$40,$80,$80,$80,$C0,$C0
 $B3F8 DEFB $36,$36,$36,$38,$E0,$C0,$80,$80
 $B400 DEFB $00,$00,$00,$00,$36,$36,$38,$F8
 $B408 DEFB $C0,$80,$26,$59,$83,$80,$21,$36
 $B410 DEFB $36,$38,$DC,$D7,$D7,$EE,$DB,$DE
 $B418 DEFB $BB,$7C,$38,$F9,$27,$DF,$71,$26
 $B420 DEFB $DB,$27,$F9,$38,$DF,$5F,$5F,$BF
 $B428 DEFB $BF,$BF,$DF,$DF,$36,$36,$36,$38
 $B430 DEFB $EF,$DF,$BF,$BF,$7F,$7F,$FF,$FF
 $B438 DEFB $36,$36,$38,$FB,$DF,$81,$26,$59
 $B440 DEFB $83,$80,$21,$36,$36,$38,$1C,$17
 $B448 DEFB $17,$0E,$1B,$1E,$3B,$7C,$38,$01
 $B450 DEFB $07,$DF,$71,$26,$DB,$27,$F9,$38
 $B458 DEFB $C0,$40,$40,$80,$80,$80,$C0,$C0
 $B460 DEFB $36,$36,$36,$38,$E0,$C0,$80,$80
 $B468 DEFB $00,$00,$00,$00,$36,$36,$36,$36
 $B470 DEFB $36,$38,$DC,$D7,$D7,$EE,$DB,$DE
 $B478 DEFB $BB,$7C,$38,$F9,$27,$DF,$71,$26
 $B480 DEFB $DB,$27,$F9,$38,$DF,$5F,$5F,$BF
 $B488 DEFB $BF,$BF,$DF,$DF,$36,$36,$36,$38
 $B490 DEFB $EF,$DF,$BF,$BF,$7F,$7F,$FF,$FF
 $B498 DEFB $36,$36,$36,$36,$38,$FE,$9C,$3D
 $B4A0 DEFB $4D,$BE,$5E,$9F,$5F,$38,$73,$01
 $B4A8 DEFB $B5,$FB,$A3,$07,$0E,$FE,$36,$36
 $B4B0 DEFB $38,$FE,$9E,$3C,$4D,$BE,$5F,$9F
 $B4B8 DEFB $5F,$38,$73,$03,$F9,$C5,$33,$87
 $B4C0 DEFB $FE,$FE,$36,$36,$38,$FE,$9C,$3C
 $B4C8 DEFB $4D,$BD,$5E,$9E,$5F,$38,$73,$01
 $B4D0 DEFB $B1,$B5,$FB,$FB,$A6,$0E,$36,$36
 $B4D8 DEFB $38,$A0,$D5,$DA,$EF,$D2,$E8,$E7
 $B4E0 DEFB $E0,$38,$E0,$E0,$D3,$EC,$C1,$C0
 $B4E8 DEFB $10,$49,$38,$A0,$D5,$DA,$EF,$D2
 $B4F0 DEFB $E8,$E7,$E8,$38,$EF,$EC,$D3,$EC
 $B4F8 DEFB $C1,$C0,$10,$49,$38,$00,$00,$00
 $B500 DEFB $00,$00,$00,$00,$07,$38,$00,$1C
 $B508 DEFB $17,$17,$0E,$1B,$7C,$80,$38,$00
 $B510 DEFB $01,$07,$DF,$71,$06,$1F,$00,$38
 $B518 DEFB $00,$C0,$40,$40,$80,$80,$80,$C0
 $B520 DEFB $38,$18,$22,$45,$4A,$55,$5B,$2D
 $B528 DEFB $1B,$38,$04,$A1,$D4,$BF,$FD,$FE
 $B530 DEFB $FF,$7F,$38,$8E,$01,$0E,$83,$FD
 $B538 DEFB $33,$87,$FE,$38,$C0,$E0,$C0,$80
 $B540 DEFB $80,$00,$00,$00,$38,$FF,$FF,$FF
 $B548 DEFB $FF,$FF,$FF,$F8,$E7,$38,$E3,$DC
 $B550 DEFB $D7,$D7,$EE,$9B,$7C,$80,$38,$FE
 $B558 DEFB $F9,$27,$DF,$71,$06,$1F,$00,$38
 $B560 DEFB $3F,$DF,$5F,$5F,$BF,$BF,$BF,$DF
 $B568 DEFB $38,$D8,$A2,$45,$4A,$55,$5B,$AD
 $B570 DEFB $DB,$36,$36,$38,$DF,$EF,$DF,$BF
 $B578 DEFB $BF,$7F,$7F,$FF,$38,$A5,$D1,$EE
 $B580 DEFB $E0,$E0,$E0,$C0,$A6,$38,$D9,$83
 $B588 DEFB $80,$21,$92,$41,$C2,$3C,$38,$A5
 $B590 DEFB $D1,$EE,$E1,$EF,$EF,$D9,$A6,$38
 $B598 DEFB $D9,$83,$80,$21,$92,$41,$C2,$3C
 $B5A0 DEFB $36,$38,$00,$3B,$2D,$27,$1E,$1D
 $B5A8 DEFB $1D,$7F,$38,$00,$80,$40,$C0,$60
 $B5B0 DEFB $A0,$78,$9F,$38,$00,$00,$00,$00
 $B5B8 DEFB $00,$00,$00,$80,$36,$38,$00,$03
 $B5C0 DEFB $06,$0C,$0A,$09,$0C,$0D,$38,$FB
 $B5C8 DEFB $FF,$37,$5E,$AB,$55,$9B,$75,$38
 $B5D0 DEFB $03,$B0,$EE,$C9,$35,$CE,$CB,$70
 $B5D8 DEFB $38,$C0,$C0,$40,$80,$18,$E7,$0E
 $B5E0 DEFB $08,$38,$00,$00,$00,$00,$00,$00
 $B5E8 DEFB $80,$80,$38,$06,$0B,$0D,$0B,$15
 $B5F0 DEFB $1B,$37,$2A,$38,$9A,$E5,$FA,$7F
 $B5F8 DEFB $FF,$7F,$FE,$FE,$38,$AA,$55,$AA
 $B600 DEFB $55,$FF,$00,$00,$00,$38,$01,$22
 $B608 DEFB $91,$06,$F8,$00,$00,$00,$38,$00
 $B610 DEFB $80,$00,$00,$00,$00,$00,$00,$36
 $B618 DEFB $38,$C4,$BB,$AD,$A7,$DE,$DD,$9D
 $B620 DEFB $7F,$38,$7F,$BF,$5F,$DF,$6F,$A7
 $B628 DEFB $78,$9F,$38,$FF,$FF,$FF,$FF,$FF
 $B630 DEFB $FF,$7F,$BF,$36,$38,$FC,$FB,$F6
 $B638 DEFB $EC,$EA,$E9,$EC,$ED,$36,$36,$38
 $B640 DEFB $DF,$DF,$5F,$A7,$18,$E7,$0E,$08
 $B648 DEFB $38,$FF,$FF,$FF,$FF,$FF,$7F,$BF
 $B650 DEFB $BF,$38,$F6,$EB,$ED,$EB,$D5,$DB
 $B658 DEFB $B7,$AA,$36,$38,$AA,$55,$AA,$55
 $B660 DEFB $FF,$FF,$FF,$FF,$38,$01,$22,$91
 $B668 DEFB $06,$FB,$FF,$FF,$FF,$38,$7F,$BF
 $B670 DEFB $7F,$FF,$FF,$FF,$FF,$FF,$38,$06
 $B678 DEFB $0B,$0D,$0B,$15,$1B,$37,$4D,$38
 $B680 DEFB $9F,$7F,$FF,$7F,$FF,$7F,$FF,$FF
 $B688 DEFB $38,$FC,$F8,$F0,$E0,$E0,$C0,$C0
 $B690 DEFB $E0,$36,$38,$57,$6A,$75,$7A,$35
 $B698 DEFB $3A,$1F,$0F,$38,$FF,$FE,$5C,$03
 $B6A0 DEFB $50,$AA,$55,$F8,$38,$E0,$F0,$7C
 $B6A8 DEFB $BF,$5F,$2E,$6B,$5B,$38,$00,$00
 $B6B0 DEFB $00,$00,$C0,$E0,$60,$60,$38,$03
 $B6B8 DEFB $01,$02,$02,$01,$00,$00,$00,$38
 $B6C0 DEFB $F2,$75,$6A,$64,$DB,$59,$80,$7F
 $B6C8 DEFB $38,$D1,$41,$80,$80,$00,$C0,$30
 $B6D0 DEFB $F8,$38,$40,$40,$00,$00,$00,$00
 $B6D8 DEFB $00,$00,$38,$F6,$EB,$ED,$EB,$D5
 $B6E0 DEFB $DB,$B7,$4D,$36,$38,$FD,$FB,$F7
 $B6E8 DEFB $EF,$EF,$DF,$DF,$EF,$36,$38,$57
 $B6F0 DEFB $6A,$75,$7A,$B5,$BA,$DF,$EF,$36
 $B6F8 DEFB $38,$EF,$F3,$7C,$BF,$5F,$2E,$6B
 $B700 DEFB $5B,$38,$FF,$FF,$FF,$3F,$DF,$EF
 $B708 DEFB $6F,$6F,$38,$F3,$FD,$FA,$FA,$FD
 $B710 DEFB $FE,$FE,$FF,$36,$38,$D5,$4D,$BE
 $B718 DEFB $BF,$3F,$CF,$37,$FB,$38,$5F,$5F
 $B720 DEFB $BF,$FF,$FF,$FF,$FF,$FF,$38,$06
 $B728 DEFB $0B,$0D,$0B,$15,$1B,$37,$2A,$38
 $B730 DEFB $9F,$7F,$FF,$7F,$FF,$7F,$FF,$FF
 $B738 DEFB $38,$F0,$C0,$80,$00,$00,$00,$00
 $B740 DEFB $00,$36,$38,$4D,$57,$6A,$75,$7A
 $B748 DEFB $35,$3A,$1F,$38,$FF,$FF,$FF,$5F
 $B750 DEFB $03,$50,$AA,$55,$38,$00,$00,$00
 $B758 DEFB $80,$80,$40,$20,$29,$38,$00,$00
 $B760 DEFB $00,$00,$00,$40,$A0,$20,$38,$07
 $B768 DEFB $00,$00,$00,$00,$00,$00,$00,$38
 $B770 DEFB $FA,$FF,$03,$00,$00,$00,$00,$00
 $B778 DEFB $38,$95,$46,$A0,$D2,$66,$31,$19
 $B780 DEFB $06,$38,$20,$40,$40,$40,$80,$80
 $B788 DEFB $00,$00,$38,$F6,$EB,$ED,$EB,$D5
 $B790 DEFB $DB,$B7,$AA,$36,$36,$36,$38,$4D
 $B798 DEFB $57,$6A,$75,$7A,$B5,$BA,$DF,$36
 $B7A0 DEFB $38,$FF,$FF,$FF,$FF,$BF,$5F,$26
 $B7A8 DEFB $29,$38,$FF,$FF,$FF,$FF,$BF,$5F
 $B7B0 DEFB $AF,$2F,$38,$E7,$F8,$FF,$FF,$FF
 $B7B8 DEFB $FF,$FF,$FF,$38,$FA,$FF,$03,$FC
 $B7C0 DEFB $FF,$FF,$FF,$FF,$38,$95,$46,$A0
 $B7C8 DEFB $D2,$66,$B1,$D9,$E6,$38,$2F,$5F
 $B7D0 DEFB $5F,$5F,$BF,$BF,$7F,$FF,$38,$06
 $B7D8 DEFB $0B,$0D,$0B,$15,$1B,$37,$2A,$38
 $B7E0 DEFB $9F,$7F,$FF,$7F,$FF,$7F,$FF,$FF
 $B7E8 DEFB $38,$FC,$F8,$F0,$E0,$E0,$C0,$C0
 $B7F0 DEFB $E0,$36,$38,$4D,$57,$6A,$75,$7A
 $B7F8 DEFB $35,$3A,$1F,$38,$FF,$FF,$FF,$5F
 $B800 DEFB $03,$50,$AA,$55,$38,$E0,$F0,$F8
 $B808 DEFB $FE,$FF,$7D,$3F,$2D,$38,$00,$00
 $B810 DEFB $00,$00,$80,$C0,$A0,$20,$38,$07
 $B818 DEFB $00,$00,$00,$00,$00,$00,$00,$38
 $B820 DEFB $FA,$FF,$03,$00,$00,$00,$00,$00
 $B828 DEFB $38,$97,$46,$A0,$D2,$66,$31,$19
 $B830 DEFB $06,$38,$20,$40,$40,$40,$80,$80
 $B838 DEFB $00,$00,$38,$F6,$EB,$ED,$EB,$D5
 $B840 DEFB $DB,$B7,$AA,$36,$38,$FD,$FB,$F7
 $B848 DEFB $EF,$EF,$DF,$DF,$EF,$36,$38,$4D
 $B850 DEFB $57,$6A,$75,$7A,$B5,$BA,$DF,$36
 $B858 DEFB $38,$EF,$F7,$F9,$FE,$FF,$7D,$3F
 $B860 DEFB $2D,$38,$FF,$FF,$FF,$7F,$BF,$DF
 $B868 DEFB $AF,$2F,$38,$E7,$F8,$FF,$FF,$FF
 $B870 DEFB $FF,$FF,$FF,$38,$FA,$FF,$03,$FC
 $B878 DEFB $FF,$FF,$FF,$FF,$38,$97,$46,$A0
 $B880 DEFB $D2,$66,$B1,$D9,$E6,$38,$2F,$5F
 $B888 DEFB $5F,$5F,$BF,$BF,$7F,$FF,$38,$00
 $B890 DEFB $00,$00,$00,$05,$0A,$1B,$14,$38
 $B898 DEFB $00,$00,$00,$00,$40,$A0,$90,$50
 $B8A0 DEFB $36,$36,$38,$0B,$09,$04,$04,$04
 $B8A8 DEFB $04,$08,$09,$38,$30,$A0,$C0,$40
 $B8B0 DEFB $C0,$40,$E0,$60,$36,$36,$38,$0A
 $B8B8 DEFB $11,$12,$15,$12,$15,$13,$09,$38
 $B8C0 DEFB $E0,$FC,$F7,$F7,$EE,$FB,$FE,$FB
 $B8C8 DEFB $38,$00,$01,$07,$DF,$71,$26,$DB
 $B8D0 DEFB $27,$38,$00,$C0,$40,$40,$80,$80
 $B8D8 DEFB $80,$C0,$38,$0B,$09,$0A,$0A,$09
 $B8E0 DEFB $06,$06,$03,$38,$FC,$BE,$9E,$DC
 $B8E8 DEFB $AD,$DE,$9F,$7F,$38,$F9,$73,$03
 $B8F0 DEFB $F9,$C5,$33,$87,$FE,$38,$C0,$E0
 $B8F8 DEFB $C0,$80,$80,$00,$00,$00,$38,$FF
 $B900 DEFB $FF,$FF,$FA,$F5,$EA,$DB,$D4,$38
 $B908 DEFB $FF,$FF,$FF,$BF,$5F,$AF,$97,$57
 $B910 DEFB $36,$36,$38,$EB,$E9,$F4,$F4,$F4
 $B918 DEFB $F4,$E8,$E9,$38,$37,$AF,$DF,$5F
 $B920 DEFB $DF,$5F,$EF,$6F,$36,$36,$38,$EA
 $B928 DEFB $D1,$D2,$D5,$D2,$D5,$D3,$E9,$38
 $B930 DEFB $E3,$FC,$F7,$F7,$EE,$FB,$FE,$FB
 $B938 DEFB $38,$FE,$F9,$27,$DF,$71,$26,$DB
 $B940 DEFB $27,$38,$3F,$DF,$5F,$5F,$BF,$BF
 $B948 DEFB $BF,$DF,$38,$EB,$E9,$EA,$EA,$E9
 $B950 DEFB $F6,$F6,$FB,$36,$36,$38,$DF,$EF
 $B958 DEFB $DF,$BF,$BF,$7F,$7F,$FF,$36,$38
 $B960 DEFB $00,$1C,$15,$17,$0E,$0D,$1A,$7F
 $B968 DEFB $38,$00,$C0,$40,$C0,$E0,$60,$B0
 $B970 DEFB $D8,$36,$36,$38,$00,$03,$04,$08
 $B978 DEFB $0A,$09,$08,$0D,$38,$FB,$BF,$17
 $B980 DEFB $5F,$AF,$5D,$8F,$57,$38,$06,$B1
 $B988 DEFB $ED,$4B,$35,$8E,$C1,$B2,$38,$00
 $B990 DEFB $80,$C0,$80,$00,$80,$00,$00,$36
 $B998 DEFB $38,$06,$0E,$0B,$0D,$1A,$17,$2B
 $B9A0 DEFB $35,$38,$A3,$51,$28,$95,$D8,$EC
 $B9A8 DEFB $B6,$F9,$38,$0C,$00,$80,$40,$B0
 $B9B0 DEFB $0C,$22,$55,$36,$36,$38,$4F,$55
 $B9B8 DEFB $6B,$75,$7A,$35,$3A,$1F,$38,$7E
 $B9C0 DEFB $FF,$FF,$FF,$03,$50,$AA,$55,$38
 $B9C8 DEFB $6A,$95,$62,$19,$87,$40,$20,$29
 $B9D0 DEFB $38,$F0,$4F,$A0,$49,$82,$51,$A2
 $B9D8 DEFB $3F,$38,$00,$00,$80,$80,$80,$80
 $B9E0 DEFB $80,$00,$38,$07,$00,$00,$00,$00
 $B9E8 DEFB $00,$00,$00,$38,$FA,$FF,$03,$00
 $B9F0 DEFB $00,$00,$00,$00,$38,$95,$46,$A0
 $B9F8 DEFB $D2,$66,$31,$19,$06,$38,$20,$40
 $BA00 DEFB $40,$40,$80,$80,$00,$00,$36,$36
 $BA08 DEFB $38,$E3,$DC,$D5,$D7,$EE,$ED,$9A
 $BA10 DEFB $7F,$38,$3F,$DF,$5F,$DF,$EF,$6F
 $BA18 DEFB $B7,$D9,$36,$36,$38,$FC,$FB,$F4
 $BA20 DEFB $E8,$EA,$E9,$E8,$ED,$36,$38,$06
 $BA28 DEFB $B1,$ED,$4B,$35,$8E,$C1,$B2,$38
 $BA30 DEFB $7F,$BF,$DF,$BF,$7F,$BF,$7F,$FF
 $BA38 DEFB $36,$38,$F6,$EE,$EB,$ED,$DA,$D7
 $BA40 DEFB $AB,$B5,$36,$38,$4D,$73,$BF,$4F
 $BA48 DEFB $B3,$0D,$22,$55,$36,$36,$38,$4F
 $BA50 DEFB $55,$6B,$75,$7A,$B5,$BA,$DF,$36
 $BA58 DEFB $36,$38,$F0,$4F,$A0,$49,$82,$51
 $BA60 DEFB $A2,$3F,$38,$FF,$7F,$BF,$BF,$BF
 $BA68 DEFB $BF,$BF,$7F,$38,$E7,$F8,$FF,$FF
 $BA70 DEFB $FF,$FF,$FF,$FF,$38,$FA,$FF,$03
 $BA78 DEFB $FC,$FF,$FF,$FF,$FF,$38,$95,$46
 $BA80 DEFB $A0,$D2,$66,$B1,$D9,$E6,$38,$20
 $BA88 DEFB $5F,$5F,$5F,$BF,$BF,$7F,$FF,$36
 $BA90 DEFB $38,$FC,$BE,$1C,$5C,$AC,$5E,$9F
 $BA98 DEFB $7F,$38,$F9,$73,$01,$00,$1D,$33
 $BAA0 DEFB $03,$86,$36,$36,$38,$FC,$BE,$1E
 $BAA8 DEFB $5C,$AC,$5E,$9F,$7F,$38,$F9,$73
 $BAB0 DEFB $03,$39,$71,$03,$03,$86,$36,$36
 $BAB8 DEFB $38,$FC,$BE,$1C,$5C,$AC,$5E,$9F
 $BAC0 DEFB $7F,$38,$F9,$73,$01,$00,$E1,$33
 $BAC8 DEFB $03,$86,$36,$36,$38,$FC,$BE,$1E
 $BAD0 DEFB $5C,$AD,$5E,$9F,$7F,$38,$F9,$73
 $BAD8 DEFB $03,$F9,$FD,$73,$03,$86,$36,$36
 $BAE0 DEFB $36,$36,$36,$36,$36,$36,$38,$FF
 $BAE8 DEFB $FF,$FF,$FE,$FE,$FF,$FF,$FF,$38
 $BAF0 DEFB $FF,$FF,$FF,$7F,$7F,$FF,$FF,$FF
 $BAF8 DEFB $38,$00,$00,$00,$00,$00,$00,$01
 $BB00 DEFB $02,$38,$00,$00,$00,$00,$00,$00
 $BB08 DEFB $80,$40,$38,$1A,$1D,$1E,$18,$14
 $BB10 DEFB $1F,$00,$00,$38,$58,$B8,$78,$18
 $BB18 DEFB $28,$F8,$00,$00,$38,$FF,$FF,$FF
 $BB20 DEFB $FF,$FF,$FE,$FD,$FA,$38,$FF,$FF
 $BB28 DEFB $FF,$FF,$FF,$7F,$BF,$5F,$38,$FA
 $BB30 DEFB $FD,$FE,$F8,$F4,$FF,$FF,$FF,$38
 $BB38 DEFB $5F,$BF,$7F,$1F,$2F,$FF,$FF,$FF
 $BB40 DEFB $38,$00,$00,$00,$00,$00,$00,$01
 $BB48 DEFB $02,$38,$00,$00,$00,$00,$00,$00
 $BB50 DEFB $80,$40,$38,$1A,$1D,$40,$1C,$18
 $BB58 DEFB $1F,$00,$00,$38,$58,$B8,$78,$38
 $BB60 DEFB $98,$F8,$00,$00,$38,$FF,$FF,$FF
 $BB68 DEFB $FF,$FF,$FE,$FD,$FA,$38,$FF,$FF
 $BB70 DEFB $FF,$FF,$FF,$7F,$BF,$5F,$38,$FA
 $BB78 DEFB $FD,$C0,$FC,$F8,$FF,$FF,$FF,$38
 $BB80 DEFB $5F,$BF,$7F,$3F,$9F,$FF,$FF,$FF
 $BB88 DEFB $38,$00,$00,$00,$00,$00,$00,$01
 $BB90 DEFB $62,$38,$00,$00,$00,$00,$00,$00
 $BB98 DEFB $80,$40,$38,$5A,$0D,$10,$1C,$18
 $BBA0 DEFB $1F,$00,$00,$38,$58,$B8,$78,$38
 $BBA8 DEFB $98,$F8,$00,$00,$38,$FF,$FF,$FF
 $BBB0 DEFB $FF,$FF,$FE,$9D,$62,$38,$FF,$FF
 $BBB8 DEFB $FF,$FF,$FF,$7F,$BF,$5F,$38,$5A
 $BBC0 DEFB $ED,$F0,$FC,$F8,$FF,$FF,$FF,$38
 $BBC8 DEFB $5F,$BF,$7F,$3F,$9F,$FF,$FF,$FF
 $BBD0 DEFB $38,$00,$00,$00,$00,$00,$00,$11
 $BBD8 DEFB $2A,$38,$00,$00,$00,$00,$00,$00
 $BBE0 DEFB $80,$40,$38,$0A,$15,$10,$18,$18
 $BBE8 DEFB $1F,$00,$00,$38,$58,$B8,$78,$38
 $BBF0 DEFB $98,$F8,$00,$00,$38,$FF,$FF,$FF
 $BBF8 DEFB $FF,$FF,$EE,$D5,$EA,$38,$FF,$FF
 $BC00 DEFB $FF,$FF,$FF,$7F,$BF,$5F,$38,$EA
 $BC08 DEFB $F5,$F0,$F8,$F8,$FF,$FF,$FF,$38
 $BC10 DEFB $5F,$BF,$7F,$3F,$9F,$FF,$FF,$FF
 $BC18 DEFB $38,$00,$00,$00,$01,$02,$02,$01
 $BC20 DEFB $06,$38,$00,$00,$00,$80,$40,$40
 $BC28 DEFB $A0,$20,$38,$08,$12,$08,$04,$02
 $BC30 DEFB $00,$00,$00,$38,$10,$D0,$E0,$C0
 $BC38 DEFB $C0,$C0,$C0,$00,$38,$FF,$FF,$FE
 $BC40 DEFB $FD,$FA,$FA,$F9,$F6,$38,$FF,$FF
 $BC48 DEFB $7F,$BF,$5F,$5F,$AF,$2F,$38,$E8
 $BC50 DEFB $D2,$E8,$F4,$FA,$FE,$FE,$FF,$38
 $BC58 DEFB $17,$D7,$EF,$DF,$DF,$DF,$DF,$3F
 $BC60 DEFB $38,$00,$00,$01,$02,$04,$0E,$04
 $BC68 DEFB $08,$38,$00,$00,$80,$40,$40,$80
 $BC70 DEFB $40,$20,$38,$16,$09,$06,$02,$02
 $BC78 DEFB $00,$00,$00,$38,$70,$38,$5C,$48
 $BC80 DEFB $40,$00,$00,$00,$38,$FF,$FE,$FD
 $BC88 DEFB $FA,$F4,$EE,$F4,$E8,$38,$FF,$7F
 $BC90 DEFB $BF,$5F,$5F,$BF,$5F,$2F,$38,$D6
 $BC98 DEFB $E9,$F6,$FA,$FA,$FF,$FF,$FF,$38
 $BCA0 DEFB $77,$3B,$5D,$4B,$57,$FF,$FF,$FF
 $BCA8 DEFB $38,$00,$00,$01,$02,$02,$02,$04
 $BCB0 DEFB $1B,$38,$00,$00,$C0,$20,$60,$80
 $BCB8 DEFB $40,$3E,$38,$19,$04,$06,$02,$02
 $BCC0 DEFB $00,$00,$00,$38,$DE,$20,$40,$40
 $BCC8 DEFB $40,$00,$00,$00,$38,$FF,$FE,$FD
 $BCD0 DEFB $FA,$FA,$FA,$E4,$DB,$38,$FF,$3F
 $BCD8 DEFB $DF,$2F,$6F,$9F,$41,$3E,$38,$D9
 $BCE0 DEFB $E4,$F6,$FA,$FA,$FF,$FF,$FF,$38
 $BCE8 DEFB $DE,$21,$5F,$5F,$5F,$FF,$FF,$FF
 $BCF0 DEFB $38,$00,$00,$01,$02,$02,$01,$06
 $BCF8 DEFB $08,$38,$00,$00,$C0,$24,$4E,$9C
 $BD00 DEFB $78,$10,$38,$14,$0E,$04,$02,$02
 $BD08 DEFB $00,$00,$00,$38,$20,$A0,$40,$40
 $BD10 DEFB $40,$00,$00,$00,$38,$FF,$FE,$FD
 $BD18 DEFB $FA,$FA,$F9,$F6,$E8,$38,$FF,$3F
 $BD20 DEFB $DB,$25,$4E,$9D,$7B,$17,$38,$D4
 $BD28 DEFB $EE,$F4,$FA,$FA,$FF,$FF,$FF,$38
 $BD30 DEFB $2F,$AF,$5F,$5F,$5F,$FF,$FF,$FF
 $BD38 DEFB $38,$00,$01,$01,$01,$02,$02,$01
 $BD40 DEFB $06,$38,$00,$80,$80,$80,$40,$40
 $BD48 DEFB $A0,$20,$38,$08,$13,$08,$04,$02
 $BD50 DEFB $00,$00,$00,$38,$10,$60,$40,$40
 $BD58 DEFB $40,$00,$00,$00,$38,$FE,$FD,$FD
 $BD60 DEFB $FD,$FA,$FA,$F9,$F6,$38,$7F,$BF
 $BD68 DEFB $BF,$BF,$5F,$5F,$AF,$2F,$38,$E8
 $BD70 DEFB $D3,$E8,$F4,$FA,$FF,$FF,$FF,$38
 $BD78 DEFB $17,$6F,$5F,$5F,$5F,$FF,$FF,$FF
 $BD80 DEFB $38,$00,$00,$0F,$02,$47,$7F,$07
 $BD88 DEFB $00,$38,$00,$00,$80,$00,$00,$80
 $BD90 DEFB $00,$00,$38,$FF,$FF,$FF,$FF,$FF
 $BD98 DEFB $FF,$FF,$FF,$38,$FF,$FF,$FF,$FF
 $BDA0 DEFB $FF,$FF,$FF,$FF,$38,$00,$00,$01
 $BDA8 DEFB $00,$11,$1F,$01,$00,$38,$00,$00
 $BDB0 DEFB $C0,$80,$C0,$E0,$C0,$00,$38,$FF
 $BDB8 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$38
 $BDC0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $BDC8 DEFB $38,$00,$00,$00,$00,$04,$07,$00
 $BDD0 DEFB $00,$38,$00,$00,$F8,$20,$70,$F8
 $BDD8 DEFB $70,$00,$38,$FF,$FF,$FF,$FF,$FF
 $BDE0 DEFB $FF,$FF,$FF,$38,$FF,$FF,$FF,$FF
 $BDE8 DEFB $FF,$FF,$FF,$FF,$38,$00,$00,$00
 $BDF0 DEFB $00,$01,$01,$00,$00,$38,$00,$00
 $BDF8 DEFB $1C,$08,$1C,$FE,$1C,$00,$38,$FF
 $BE00 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$38
 $BE08 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $BE10 DEFB $38,$00,$00,$00,$60,$3C,$3C,$2E
 $BE18 DEFB $3D,$38,$00,$00,$00,$00,$00,$00
 $BE20 DEFB $03,$FF,$38,$00,$79,$FF,$0F,$1F
 $BE28 DEFB $7D,$FB,$FB,$38,$00,$E0,$F0,$00
 $BE30 DEFB $80,$E0,$B0,$D8,$36,$38,$3F,$0F
 $BE38 DEFB $00,$00,$00,$00,$00,$00,$38,$FF
 $BE40 DEFB $FF,$01,$00,$00,$00,$00,$00,$38
 $BE48 DEFB $FB,$FB,$FB,$7C,$1F,$09,$FF,$00
 $BE50 DEFB $38,$D8,$F8,$F8,$30,$C0,$20,$C0
 $BE58 DEFB $00,$36,$38,$FF,$FF,$9F,$63,$BD
 $BE60 DEFB $BD,$AE,$BD,$38,$FF,$FF,$FE,$FF
 $BE68 DEFB $FF,$FC,$03,$FF,$38,$80,$79,$FF
 $BE70 DEFB $0F,$9F,$7D,$FB,$FB,$38,$1F,$EF
 $BE78 DEFB $F7,$0F,$9F,$EF,$B7,$DB,$36,$38
 $BE80 DEFB $BF,$CF,$F0,$FF,$FF,$FF,$FF,$FF
 $BE88 DEFB $38,$FF,$FF,$01,$FE,$FF,$FF,$FE
 $BE90 DEFB $FF,$38,$FB,$FB,$FB,$7C,$9F,$09
 $BE98 DEFB $FF,$00,$38,$DB,$FB,$FB,$37,$DF
 $BEA0 DEFB $2F,$DF,$3F,$36,$38,$00,$00,$00
 $BEA8 DEFB $00,$00,$03,$02,$03,$38,$00,$00
 $BEB0 DEFB $01,$60,$40,$C0,$C0,$FF,$38,$00
 $BEB8 DEFB $FF,$FF,$00,$01,$07,$3F,$FF,$38
 $BEC0 DEFB $00,$6F,$FF,$F0,$F8,$DE,$BB,$BD
 $BEC8 DEFB $38,$00,$F0,$F8,$00,$00,$00,$00
 $BED0 DEFB $80,$38,$07,$04,$00,$00,$00,$00
 $BED8 DEFB $00,$00,$38,$FF,$FF,$00,$00,$00
 $BEE0 DEFB $00,$00,$00,$38,$FF,$FF,$1F,$07
 $BEE8 DEFB $01,$00,$0F,$00,$38,$BD,$BF,$BF
 $BEF0 DEFB $C3,$FC,$92,$FC,$00,$38,$80,$80
 $BEF8 DEFB $80,$00,$00,$00,$00,$00,$38,$FF
 $BF00 DEFB $FF,$FF,$FF,$FC,$FB,$FA,$FB,$38
 $BF08 DEFB $FF,$FE,$9D,$6E,$5F,$DF,$C0,$FF
 $BF10 DEFB $38,$00,$FF,$FF,$00,$F9,$C7,$3F
 $BF18 DEFB $FF,$38,$00,$6F,$FF,$F0,$F9,$DE
 $BF20 DEFB $BB,$BD,$38,$0F,$F7,$FB,$07,$FF
 $BF28 DEFB $FF,$7F,$BF,$38,$F7,$F4,$FB,$FF
 $BF30 DEFB $FF,$FF,$FF,$FF,$38,$FF,$FF,$00
 $BF38 DEFB $FF,$FF,$FF,$FF,$FF,$38,$FF,$FF
 $BF40 DEFB $1F,$E7,$F9,$F0,$EF,$F0,$38,$BD
 $BF48 DEFB $BF,$BF,$C3,$FD,$92,$FD,$03,$38
 $BF50 DEFB $BF,$BF,$BF,$7F,$FF,$FF,$FF,$FF
 $BF58 DEFB $38,$00,$00,$00,$00,$00,$00,$00
 $BF60 DEFB $00,$38,$00,$00,$00,$00,$00,$00
 $BF68 DEFB $00,$00,$38,$00,$00,$00,$00,$00
 $BF70 DEFB $00,$00,$00,$38,$00,$00,$07,$0F
 $BF78 DEFB $00,$00,$00,$00,$38,$00,$00,$F5
 $BF80 DEFB $FF,$04,$1F,$30,$7F,$38,$00,$00
 $BF88 DEFB $FC,$FE,$00,$00,$80,$40,$38,$00
 $BF90 DEFB $00,$00,$00,$00,$00,$00,$00,$38
 $BF98 DEFB $7F,$7F,$7E,$3F,$31,$20,$71,$00
 $BFA0 DEFB $38,$40,$C0,$C0,$80,$80,$80,$C0
 $BFA8 DEFB $00,$38,$FF,$FF,$FF,$FF,$FF,$FF
 $BFB0 DEFB $FF,$FF,$38,$FF,$FF,$FF,$FF,$FF
 $BFB8 DEFB $FF,$FF,$FF,$38,$FF,$FF,$FF,$FF
 $BFC0 DEFB $FF,$FF,$FF,$FF,$38,$FF,$F8,$F7
 $BFC8 DEFB $EF,$F0,$FF,$FF,$FF,$38,$FF,$00
 $BFD0 DEFB $F5,$FF,$04,$DF,$B0,$7F,$38,$FF
 $BFD8 DEFB $03,$FD,$FE,$01,$7F,$BF,$5F,$38
 $BFE0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $BFE8 DEFB $38,$7F,$7F,$7E,$BF,$B1,$AE,$75
 $BFF0 DEFB $8E,$38,$5F,$DF,$DF,$BF,$BF,$BF
 $BFF8 DEFB $DF,$3F,$38,$00,$00,$00,$00,$00
 $C000 DEFB $00,$00,$00,$38,$00,$00,$00,$00
 $C008 DEFB $00,$00,$7B,$FF,$38,$00,$00,$00
 $C010 DEFB $00,$00,$00,$C0,$E0,$38,$00,$00
 $C018 DEFB $00,$00,$00,$00,$00,$00,$38,$04
 $C020 DEFB $1F,$30,$7F,$7F,$7F,$7E,$3F,$38
 $C028 DEFB $00,$00,$80,$40,$40,$C0,$C0,$80
 $C030 DEFB $38,$00,$00,$00,$00,$00,$00,$00
 $C038 DEFB $00,$38,$31,$20,$71,$00,$00,$00
 $C040 DEFB $00,$00,$38,$80,$80,$C0,$00,$00
 $C048 DEFB $00,$00,$00,$38,$FF,$FF,$FF,$FF
 $C050 DEFB $FF,$FF,$FF,$FE,$38,$FF,$FF,$FF
 $C058 DEFB $FF,$FF,$80,$7B,$FF,$38,$FF,$FF
 $C060 DEFB $FF,$FF,$FF,$3F,$DF,$EF,$38,$FF
 $C068 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$38
 $C070 DEFB $04,$DF,$B0,$7F,$7F,$7F,$7E,$BF
 $C078 DEFB $38,$1F,$7F,$BF,$5F,$5F,$DF,$DF
 $C080 DEFB $BF,$38,$FF,$FF,$FF,$FF,$FF,$FF
 $C088 DEFB $FF,$FF,$38,$B1,$AE,$75,$8E,$FF
 $C090 DEFB $FF,$FF,$FF,$38,$BF,$BF,$DF,$3F
 $C098 DEFB $FF,$FF,$FF,$FF,$38,$00,$00,$00
 $C0A0 DEFB $00,$00,$00,$00,$00,$38,$00,$00
 $C0A8 DEFB $00,$03,$07,$0E,$1C,$38,$38,$01
 $C0B0 DEFB $01,$83,$87,$06,$0F,$1F,$3E,$38
 $C0B8 DEFB $80,$00,$80,$C0,$C0,$C0,$C0,$80
 $C0C0 DEFB $38,$00,$00,$01,$03,$07,$0E,$1C
 $C0C8 DEFB $38,$38,$30,$63,$FF,$FF,$7F,$D7
 $C0D0 DEFB $BB,$BD,$38,$7D,$F8,$F0,$F0,$E0
 $C0D8 DEFB $E0,$E0,$C0,$38,$80,$00,$00,$00
 $C0E0 DEFB $00,$00,$00,$00,$38,$30,$60,$00
 $C0E8 DEFB $00,$00,$00,$00,$00,$38,$BF,$FD
 $C0F0 DEFB $FB,$77,$3E,$00,$03,$00,$38,$E4
 $C0F8 DEFB $D8,$90,$A0,$40,$80,$00,$00,$38
 $C100 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C108 DEFB $38,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $C110 DEFB $FF,$38,$FF,$FF,$FC,$FB,$F7,$EE
 $C118 DEFB $DD,$BB,$38,$FD,$79,$BB,$B7,$76
 $C120 DEFB $EF,$DF,$BE,$38,$BF,$7F,$BF,$DF
 $C128 DEFB $DF,$DF,$DF,$BF,$38,$FF,$FE,$FD
 $C130 DEFB $FB,$F7,$EE,$DC,$BA,$38,$B4,$63
 $C138 DEFB $FF,$FF,$7F,$D7,$BB,$BD,$38,$7D
 $C140 DEFB $FA,$F7,$F7,$EF,$EF,$EF,$CB,$38
 $C148 DEFB $BF,$7F,$FF,$FF,$FF,$FF,$FF,$FF
 $C150 DEFB $38,$B6,$6E,$9E,$FF,$FF,$FF,$FF
 $C158 DEFB $FF,$38,$BF,$FD,$FB,$77,$BE,$C0
 $C160 DEFB $FB,$FC,$38,$F5,$DB,$97,$AF,$5F
 $C168 DEFB $BF,$7F,$FF,$38,$FF,$FF,$FF,$FF
 $C170 DEFB $FF,$FF,$FF,$FF,$38,$00,$00,$00
 $C178 DEFB $08,$00,$00,$00,$00,$38,$FF,$FF
 $C180 DEFB $F7,$EB,$F7,$FF,$FF,$FF,$38,$00
 $C188 DEFB $00,$0C,$1C,$38,$30,$00,$00,$38
 $C190 DEFB $FF,$F3,$ED,$DD,$BB,$B7,$CF,$FF
 $C198 DEFB $38,$00,$00,$00,$00,$00,$00,$00
 $C1A0 DEFB $00

; Data block at C1A1
;
; .
;
; .
;
; #N($01+(#PC-$C1A1)/$04).
b$C1A1 DEFB $05,$05
 $C1A3 DEFW $8D80
 $C1A5 DEFB $05,$05
 $C1A7 DEFW $8E29
; #N($01+(#PC-$C1A1)/$04).
 $C1A9 DEFB $04,$03
 $C1AB DEFW $8E9A
 $C1AD DEFB $04,$03
 $C1AF DEFW $8EFE
; #N($01+(#PC-$C1A1)/$04).
 $C1B1 DEFB $05,$05
 $C1B3 DEFW $8F4A
 $C1B5 DEFB $05,$05
 $C1B7 DEFW $8FF3
; #N($01+(#PC-$C1A1)/$04).
 $C1B9 DEFB $04,$06
 $C1BB DEFW $906C
 $C1BD DEFB $04,$06
 $C1BF DEFW $9124
; #N($01+(#PC-$C1A1)/$04).
 $C1C1 DEFB $04,$06
 $C1C3 DEFW $91B4
 $C1C5 DEFB $04,$06
 $C1C7 DEFW $925C
; #N($01+(#PC-$C1A1)/$04).
 $C1C9 DEFB $05,$05
 $C1CB DEFW $92EC
 $C1CD DEFB $05,$05
 $C1CF DEFW $93A5
; #N($01+(#PC-$C1A1)/$04).
 $C1D1 DEFB $04,$03
 $C1D3 DEFW $941E
 $C1D5 DEFB $04,$03
 $C1D7 DEFW $945A
; #N($01+(#PC-$C1A1)/$04).
 $C1D9 DEFB $04,$03
 $C1DB DEFW $948E
 $C1DD DEFB $04,$03
 $C1DF DEFW $94CA
; #N($01+(#PC-$C1A1)/$04).
 $C1E1 DEFB $02,$01
 $C1E3 DEFW $94FE
 $C1E5 DEFB $02,$01
 $C1E7 DEFW $9510
; #N($01+(#PC-$C1A1)/$04).
 $C1E9 DEFB $02,$01
 $C1EB DEFW $9512
 $C1ED DEFB $02,$01
 $C1EF DEFW $9524
; #N($01+(#PC-$C1A1)/$04).
 $C1F1 DEFB $02,$01
 $C1F3 DEFW $9526
 $C1F5 DEFB $02,$01
 $C1F7 DEFW $9538
; #N($01+(#PC-$C1A1)/$04).
 $C1F9 DEFB $01,$02
 $C1FB DEFW $953A
 $C1FD DEFB $01,$02
 $C1FF DEFW $954C
; #N($01+(#PC-$C1A1)/$04).
 $C201 DEFB $04,$02
 $C203 DEFW $954E
 $C205 DEFB $04,$02
 $C207 DEFW $9596
; #N($01+(#PC-$C1A1)/$04).
 $C209 DEFB $01,$02
 $C20B DEFW $95CE
 $C20D DEFB $01,$02
 $C20F DEFW $95E0
; #N($01+(#PC-$C1A1)/$04).
 $C211 DEFB $05,$03
 $C213 DEFW $95E2
 $C215 DEFB $05,$03
 $C217 DEFW $9651
; #N($01+(#PC-$C1A1)/$04).
 $C219 DEFB $04,$03
 $C21B DEFW $96B0
 $C21D DEFB $04,$03
 $C21F DEFW $971C
; #N($01+(#PC-$C1A1)/$04).
 $C221 DEFB $04,$03
 $C223 DEFW $9760
 $C225 DEFB $04,$03
 $C227 DEFW $97C4
; #N($01+(#PC-$C1A1)/$04).
 $C229 DEFB $04,$03
 $C22B DEFW $9818
 $C22D DEFB $04,$03
 $C22F DEFW $987C
; #N($01+(#PC-$C1A1)/$04).
 $C231 DEFB $04,$04
 $C233 DEFW $98C8
 $C235 DEFB $04,$04
 $C237 DEFW $9938
; #N($01+(#PC-$C1A1)/$04).
 $C239 DEFB $00,$00
 $C23B DEFW $9998
 $C23D DEFB $00,$00
 $C23F DEFW $9998
; #N($01+(#PC-$C1A1)/$04).
 $C241 DEFB $05,$05
 $C243 DEFW $9998
 $C245 DEFB $05,$05
 $C247 DEFW $9A49
; #N($01+(#PC-$C1A1)/$04).
 $C249 DEFB $02,$01
 $C24B DEFW $9ADA
 $C24D DEFB $02,$01
 $C24F DEFW $9AEC
; #N($01+(#PC-$C1A1)/$04).
 $C251 DEFB $02,$01
 $C253 DEFW $9AEE
 $C255 DEFB $02,$01
 $C257 DEFW $9B00
; #N($01+(#PC-$C1A1)/$04).
 $C259 DEFB $02,$01
 $C25B DEFW $9B02
 $C25D DEFB $02,$01
 $C25F DEFW $9B14
; #N($01+(#PC-$C1A1)/$04).
 $C261 DEFB $02,$01
 $C263 DEFW $9B16
 $C265 DEFB $02,$01
 $C267 DEFW $9B28
; #N($01+(#PC-$C1A1)/$04).
 $C269 DEFB $00,$00
 $C26B DEFW $9B2A
 $C26D DEFB $00,$00
 $C26F DEFW $9B2A
; #N($01+(#PC-$C1A1)/$04).
 $C271 DEFB $02,$03
 $C273 DEFW $9B2A
 $C275 DEFB $02,$03
 $C277 DEFW $9B40
; #N($01+(#PC-$C1A1)/$04).
 $C279 DEFB $02,$03
 $C27B DEFW $9B5E
 $C27D DEFB $02,$03
 $C27F DEFW $9B94
; #N($01+(#PC-$C1A1)/$04).
 $C281 DEFB $00,$00
 $C283 DEFW $9BCA
 $C285 DEFB $00,$00
 $C287 DEFW $9BCA
; #N($01+(#PC-$C1A1)/$04).
 $C289 DEFB $03,$03
 $C28B DEFW $9BCA
 $C28D DEFB $03,$03
 $C28F DEFW $9C1B
; #N($01+(#PC-$C1A1)/$04).
 $C291 DEFB $03,$03
 $C293 DEFW $9C6C
 $C295 DEFB $03,$03
 $C297 DEFW $9CBD
; #N($01+(#PC-$C1A1)/$04).
 $C299 DEFB $03,$03
 $C29B DEFW $9D0E
 $C29D DEFB $03,$03
 $C29F DEFW $9D5F
; #N($01+(#PC-$C1A1)/$04).
 $C2A1 DEFB $05,$05
 $C2A3 DEFW $9DB0
 $C2A5 DEFB $05,$05
 $C2A7 DEFW $9E51
; #N($01+(#PC-$C1A1)/$04).
 $C2A9 DEFB $04,$03
 $C2AB DEFW $9EBA
 $C2AD DEFB $04,$03
 $C2AF DEFW $9F1E
; #N($01+(#PC-$C1A1)/$04).
 $C2B1 DEFB $05,$05
 $C2B3 DEFW $9F6A
 $C2B5 DEFB $05,$05
 $C2B7 DEFW $A013
; #N($01+(#PC-$C1A1)/$04).
 $C2B9 DEFB $04,$06
 $C2BB DEFW $A08C
 $C2BD DEFB $04,$06
 $C2BF DEFW $A144
; #N($01+(#PC-$C1A1)/$04).
 $C2C1 DEFB $04,$06
 $C2C3 DEFW $A1DC
 $C2C5 DEFB $04,$06
 $C2C7 DEFW $A27C
; #N($01+(#PC-$C1A1)/$04).
 $C2C9 DEFB $05,$05
 $C2CB DEFW $A304
 $C2CD DEFB $05,$05
 $C2CF DEFW $A3AD
; #N($01+(#PC-$C1A1)/$04).
 $C2D1 DEFB $04,$03
 $C2D3 DEFW $A436
 $C2D5 DEFB $04,$03
 $C2D7 DEFW $A46A
; #N($01+(#PC-$C1A1)/$04).
 $C2D9 DEFB $04,$03
 $C2DB DEFW $A49E
 $C2DD DEFB $04,$03
 $C2DF DEFW $A4DA
; #N($01+(#PC-$C1A1)/$04).
 $C2E1 DEFB $02,$01
 $C2E3 DEFW $A516
 $C2E5 DEFB $02,$01
 $C2E7 DEFW $A528
; #N($01+(#PC-$C1A1)/$04).
 $C2E9 DEFB $02,$01
 $C2EB DEFW $A52A
 $C2ED DEFB $02,$01
 $C2EF DEFW $A53C
; #N($01+(#PC-$C1A1)/$04).
 $C2F1 DEFB $02,$01
 $C2F3 DEFW $A53E
 $C2F5 DEFB $02,$01
 $C2F7 DEFW $A550
; #N($01+(#PC-$C1A1)/$04).
 $C2F9 DEFB $01,$02
 $C2FB DEFW $A552
 $C2FD DEFB $01,$02
 $C2FF DEFW $A564
; #N($01+(#PC-$C1A1)/$04).
 $C301 DEFB $04,$02
 $C303 DEFW $A576
 $C305 DEFB $04,$02
 $C307 DEFW $A5B6
; #N($01+(#PC-$C1A1)/$04).
 $C309 DEFB $01,$02
 $C30B DEFW $A5E6
 $C30D DEFB $01,$02
 $C30F DEFW $A5F8
; #N($01+(#PC-$C1A1)/$04).
 $C311 DEFB $05,$03
 $C313 DEFW $A60A
 $C315 DEFB $05,$03
 $C317 DEFW $A679
; #N($01+(#PC-$C1A1)/$04).
 $C319 DEFB $04,$03
 $C31B DEFW $A6D0
 $C31D DEFB $04,$03
 $C31F DEFW $A734
; #N($01+(#PC-$C1A1)/$04).
 $C321 DEFB $04,$03
 $C323 DEFW $A780
 $C325 DEFB $04,$03
 $C327 DEFW $A7E4
; #N($01+(#PC-$C1A1)/$04).
 $C329 DEFB $04,$03
 $C32B DEFW $A838
 $C32D DEFB $04,$03
 $C32F DEFW $A89C
; #N($01+(#PC-$C1A1)/$04).
 $C331 DEFB $04,$04
 $C333 DEFW $A8F0
 $C335 DEFB $04,$04
 $C337 DEFW $A960
; #N($01+(#PC-$C1A1)/$04).
 $C339 DEFB $00,$00
 $C33B DEFW $A9C0
 $C33D DEFB $00,$00
 $C33F DEFW $A9C0
; #N($01+(#PC-$C1A1)/$04).
 $C341 DEFB $05,$05
 $C343 DEFW $A9C0
 $C345 DEFB $05,$05
 $C347 DEFW $AA61
; #N($01+(#PC-$C1A1)/$04).
 $C349 DEFB $02,$01
 $C34B DEFW $AAE2
 $C34D DEFB $02,$01
 $C34F DEFW $AAF4
; #N($01+(#PC-$C1A1)/$04).
 $C351 DEFB $02,$01
 $C353 DEFW $AAF6
 $C355 DEFB $02,$01
 $C357 DEFW $AB08
; #N($01+(#PC-$C1A1)/$04).
 $C359 DEFB $02,$01
 $C35B DEFW $AB0A
 $C35D DEFB $02,$01
 $C35F DEFW $AB1C
; #N($01+(#PC-$C1A1)/$04).
 $C361 DEFB $02,$01
 $C363 DEFW $AB1E
 $C365 DEFB $02,$01
 $C367 DEFW $AB30
; #N($01+(#PC-$C1A1)/$04).
 $C369 DEFB $01,$01
 $C36B DEFW $AB32
 $C36D DEFB $01,$01
 $C36F DEFW $AB3B
; #N($01+(#PC-$C1A1)/$04).
 $C371 DEFB $02,$02
 $C373 DEFW $AB3C
 $C375 DEFB $02,$02
 $C377 DEFW $AB60
; #N($01+(#PC-$C1A1)/$04).
 $C379 DEFB $03,$03
 $C37B DEFW $AB64
 $C37D DEFB $03,$03
 $C37F DEFW $ABB5
; #N($01+(#PC-$C1A1)/$04).
 $C381 DEFB $02,$04
 $C383 DEFW $ABBE
 $C385 DEFB $02,$04
 $C387 DEFW $AC06
; #N($01+(#PC-$C1A1)/$04).
 $C389 DEFB $02,$04
 $C38B DEFW $AC2E
 $C38D DEFB $02,$04
 $C38F DEFW $AC76
; #N($01+(#PC-$C1A1)/$04).
 $C391 DEFB $00,$00
 $C393 DEFW $AC9E
 $C395 DEFB $00,$00
 $C397 DEFW $AC9E
; #N($01+(#PC-$C1A1)/$04).
 $C399 DEFB $04,$02
 $C39B DEFW $AC9E
 $C39D DEFB $04,$02
 $C39F DEFW $ACDE
 $C3A1 DEFB $05,$05,$1E,$AD,$05,$05,$BF,$AD
 $C3A9 DEFB $04,$03,$30,$AE,$04,$03,$94,$AE
 $C3B1 DEFB $05,$05,$E0,$AE,$05,$05,$89,$AF
 $C3B9 DEFB $04,$06,$12,$B0,$04,$06,$CA,$B0
 $C3C1 DEFB $04,$06,$62,$B1,$04,$06,$12,$B2
 $C3C9 DEFB $05,$05,$AA,$B2,$05,$05,$5B,$B3
 $C3D1 DEFB $04,$03,$DC,$B3,$04,$03,$10,$B4
 $C3D9 DEFB $04,$03,$44,$B4,$04,$03,$70,$B4
 $C3E1 DEFB $02,$01,$9C,$B4,$02,$01,$AE,$B4
 $C3E9 DEFB $02,$01,$B0,$B4,$02,$01,$C2,$B4
 $C3F1 DEFB $02,$01,$C4,$B4,$02,$01,$D6,$B4
 $C3F9 DEFB $01,$02,$D8,$B4,$01,$02,$EA,$B4
 $C401 DEFB $04,$02,$FC,$B4,$04,$02,$44,$B5
 $C409 DEFB $01,$02,$7C,$B5,$01,$02,$8E,$B5
 $C411 DEFB $05,$03,$A0,$B5,$05,$03,$17,$B6
 $C419 DEFB $04,$03,$76,$B6,$04,$03,$DA,$B6
 $C421 DEFB $04,$03,$26,$B7,$04,$03,$8A,$B7
 $C429 DEFB $04,$03,$D6,$B7,$04,$03,$3A,$B8
 $C431 DEFB $04,$04,$8E,$B8,$04,$04,$FE,$B8
 $C439 DEFB $00,$00,$5E,$B9,$00,$00,$5E,$B9
 $C441 DEFB $05,$05,$5E,$B9,$05,$05,$07,$BA
 $C449 DEFB $02,$01,$90,$BA,$02,$01,$A2,$BA
 $C451 DEFB $02,$01,$A4,$BA,$02,$01,$B6,$BA
 $C459 DEFB $02,$01,$B8,$BA,$02,$01,$CA,$BA
 $C461 DEFB $02,$01,$CC,$BA,$02,$01,$DE,$BA
 $C469 DEFB $00,$00,$E0,$BA,$00,$00,$E0,$BA
 $C471 DEFB $00,$00,$E0,$BA,$00,$00,$E0,$BA
 $C479 DEFB $00,$00,$E0,$BA,$00,$00,$E0,$BA
 $C481 DEFB $00,$00,$E0,$BA,$00,$00,$E0,$BA
 $C489 DEFB $00,$00,$E0,$BA,$00,$00,$E0,$BA
 $C491 DEFB $00,$00,$E0,$BA,$00,$00,$E0,$BA
 $C499 DEFB $00,$00,$E0,$BA,$02,$02,$E0,$BA
 $C4A1 DEFB $02,$02,$E4,$BA,$02,$02,$F8,$BA
 $C4A9 DEFB $02,$02,$1C,$BB,$02,$02,$40,$BB
 $C4B1 DEFB $02,$02,$64,$BB,$02,$02,$88,$BB
 $C4B9 DEFB $02,$02,$AC,$BB,$02,$02,$D0,$BB
 $C4C1 DEFB $02,$02,$F4,$BB,$02,$02,$18,$BC
 $C4C9 DEFB $02,$02,$3C,$BC,$02,$02,$60,$BC
 $C4D1 DEFB $02,$02,$84,$BC,$02,$02,$A8,$BC
 $C4D9 DEFB $02,$02,$CC,$BC,$02,$02,$F0,$BC
 $C4E1 DEFB $02,$02,$14,$BD,$02,$02,$38,$BD
 $C4E9 DEFB $02,$02,$5C,$BD,$00,$00,$80,$BD
 $C4F1 DEFB $00,$00,$80,$BD,$00,$00,$80,$BD
 $C4F9 DEFB $00,$00,$80,$BD,$00,$00,$80,$BD
 $C501 DEFB $00,$00,$80,$BD,$00,$00,$80,$BD
 $C509 DEFB $00,$00,$80,$BD,$00,$00,$80,$BD
 $C511 DEFB $00,$00,$80,$BD,$02,$01,$80,$BD
 $C519 DEFB $02,$01,$92,$BD,$02,$01,$A4,$BD
 $C521 DEFB $02,$01,$B6,$BD,$02,$01,$C8,$BD
 $C529 DEFB $02,$01,$DA,$BD,$02,$01,$EC,$BD
 $C531 DEFB $02,$01,$FE,$BD,$05,$02,$10,$BE
 $C539 DEFB $05,$02,$5A,$BE,$05,$02,$A4,$BE
 $C541 DEFB $05,$02,$FE,$BE,$03,$03,$58,$BF
 $C549 DEFB $03,$03,$A9,$BF,$03,$03,$FA,$BF
 $C551 DEFB $03,$03,$4B,$C0,$04,$03,$9C,$C0
 $C559 DEFB $04,$03,$08,$C1,$00,$00,$74,$C1
 $C561 DEFB $00,$00,$74,$C1,$00,$00,$74,$C1
 $C569 DEFB $00,$00,$74,$C1,$01,$01,$74,$C1
 $C571 DEFB $01,$01,$7D,$C1,$01,$01,$86,$C1
 $C579 DEFB $01,$01,$8F,$C1,$00,$00,$98,$C1
 $C581 DEFB $00,$00,$98,$C1,$01,$01,$98,$C1
 $C589 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C591 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C599 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C5A1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C5A9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C5B1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C5B9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C5C1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C5C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C5D1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C5D9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C5E1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C5E9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C5F1 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C5F9 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $C601 DEFB $80,$40,$C0,$20,$A0,$60,$E0,$10
 $C609 DEFB $90,$50,$D0,$30,$B0,$70,$F0,$08
 $C611 DEFB $88,$48,$C8,$28,$A8,$68,$E8,$18
 $C619 DEFB $98,$58,$D8,$38,$B8,$78,$F8,$04
 $C621 DEFB $84,$44,$C4,$24,$A4,$64,$E4,$14
 $C629 DEFB $94,$54,$D4,$34,$B4,$74,$F4,$0C
 $C631 DEFB $8C,$4C,$CC,$2C,$AC,$6C,$EC,$1C
 $C639 DEFB $9C,$5C,$DC,$3C,$BC,$7C,$FC,$02
 $C641 DEFB $82,$42,$C2,$22,$A2,$62,$E2,$12
 $C649 DEFB $92,$52,$D2,$32,$B2,$72,$F2,$0A
 $C651 DEFB $8A,$4A,$CA,$2A,$AA,$6A,$EA,$1A
 $C659 DEFB $9A,$5A,$DA,$3A,$BA,$7A,$FA,$06
 $C661 DEFB $86,$46,$C6,$26,$A6,$66,$E6,$16
 $C669 DEFB $96,$56,$D6,$36,$B6,$76,$F6,$0E
 $C671 DEFB $8E,$4E,$CE,$2E,$AE,$6E,$EE,$1E
 $C679 DEFB $9E,$5E,$DE,$3E,$BE,$7E,$FE,$01
 $C681 DEFB $81,$41,$C1,$21,$A1,$61,$E1,$11
 $C689 DEFB $91,$51,$D1,$31,$B1,$71,$F1,$09
 $C691 DEFB $89,$49,$C9,$29,$A9,$69,$E9,$19
 $C699 DEFB $99,$59,$D9,$39,$B9,$79,$F9,$05
 $C6A1 DEFB $85,$45,$C5,$25,$A5,$65,$E5,$15
 $C6A9 DEFB $95,$55,$D5,$35,$B5,$75,$F5,$0D
 $C6B1 DEFB $8D,$4D,$CD,$2D,$AD,$6D,$ED,$1D
 $C6B9 DEFB $9D,$5D,$DD,$3D,$BD,$7D,$FD,$03
 $C6C1 DEFB $83,$43,$C3,$23,$A3,$63,$E3,$13
 $C6C9 DEFB $93,$53,$D3,$33,$B3,$73,$F3,$0B
 $C6D1 DEFB $8B,$4B,$CB,$2B,$AB,$6B,$EB,$1B
 $C6D9 DEFB $9B,$5B,$DB,$3B,$BB,$7B,$FB,$07
 $C6E1 DEFB $87,$47,$C7,$27,$A7,$67,$E7,$17
 $C6E9 DEFB $97,$57,$D7,$37,$B7,$77,$F7,$0F
 $C6F1 DEFB $8F,$4F,$CF,$2F,$AF,$6F,$EF,$1F
 $C6F9 DEFB $9F,$5F,$DF,$3F,$BF,$7F,$FF

; Data block at C700
b$C700 DEFB $02,$06,$02,$06,$08,$00,$08,$00
 $C708 DEFB $08,$07,$08,$07,$0A,$05,$0A,$05
 $C710 DEFB $12,$00,$0A,$00,$0A,$00,$11,$02
 $C718 DEFB $11,$02,$0F,$00,$0F,$00,$07,$06
 $C720 DEFB $07,$06,$10,$07,$10,$07,$02,$02
 $C728 DEFB $02,$02,$04,$00,$04,$00,$0E,$0A
 $C730 DEFB $0A,$00,$0A,$00,$06,$05,$06,$05
 $C738 DEFB $02,$03,$02,$04,$02,$00,$07,$00
 $C740 DEFB $07,$00,$07,$00,$07,$00,$07,$00
 $C748 DEFB $07,$00,$03,$0C,$0C,$03,$0C,$04
 $C750 DEFB $0C,$00,$07,$05,$07,$05,$0E,$00
 $C758 DEFB $0E,$00,$07,$06,$07,$06,$05,$05
 $C760 DEFB $05,$05,$0B,$00,$0B,$00,$07,$03
 $C768 DEFB $07,$04,$07,$00,$04,$0C,$05,$0C
 $C770 DEFB $0E,$00,$0E,$00,$02,$02,$02,$02
 $C778 DEFB $0D,$07,$0D,$07,$0C,$01,$0C,$01
 $C780 DEFB $02,$00,$02,$00,$0B,$00,$0B,$00
 $C788 DEFB $07,$0C,$06,$02,$06,$02,$11,$06
 $C790 DEFB $11,$06,$0F,$01,$0F,$01,$0B,$0B
 $C798 DEFB $08,$05,$08,$05,$05,$08,$05,$08
 $C7A0 DEFB $0D,$00,$0D,$00,$0D,$07,$0D,$07
 $C7A8 DEFB $0D,$0A,$0C,$00,$0C,$00,$08,$06
 $C7B0 DEFB $08,$06,$08,$06,$10,$01,$10,$01
 $C7B8 DEFB $05,$00,$05,$00,$03,$00,$0C,$00
 $C7C0 DEFB $03,$01,$02,$04,$05,$08,$04,$05
 $C7C8 DEFB $01,$09,$01,$02,$09,$09,$02,$09
 $C7D0 DEFB $01,$08,$03,$09,$02,$09,$01,$01
 $C7D8 DEFB $01,$01,$04,$05,$06,$07,$02,$02
 $C7E0 DEFB $04,$05,$06,$07,$08,$02,$02,$03
 $C7E8 DEFB $06,$07,$01,$06,$07,$03,$09,$02
 $C7F0 DEFB $08,$01,$02,$01,$02,$06,$07,$02
 $C7F8 DEFB $01,$04,$05,$03,$03,$09,$02,$02
 $C800 DEFB $81,$82,$83,$84,$85,$86,$87,$88
 $C808 DEFB $09,$09,$89,$0C,$0A,$0A,$8A,$0D
 $C810 DEFB $0B,$0B,$8B,$0E,$0E,$09,$89,$0F
 $C818 DEFB $0F,$90

; Data block at C81A
b$C81A DEFB $42,$42,$42,$42,$15,$15,$11,$12
 $C822 DEFB $13,$14,$15,$16,$17,$18,$19,$1A
 $C82A DEFB $15,$16,$1D,$1E,$20,$21,$15,$16
 $C832 DEFB $1F,$42,$22,$42,$16,$15,$42,$1D
 $C83A DEFB $42,$20,$15,$15,$1E,$1F,$21,$22
 $C842 DEFB $16,$16,$42,$42,$1B,$42,$1C,$15
 $C84A DEFB $42,$42,$42,$1B,$15,$1C

; User Defined Keys
;
; Note although there are 3 "sets" - it doesn't always follow that the monster
; IDs correlate with the set IDs.
; .
; For instance; if George and Lizzy are computer controlled and Ralph uses the keyboard - he will use set 1.
;       The sets are assigned sequentially to being assigned to a player.
@label=UserDefinedKeys_Set1
g$C850 DEFB $FB,$01  ; {Stores in the following format:
 $C852 DEFB $FB,$02  ; #TABLE(default,centre,centre)
 $C854 DEFB $DF,$02  ; { =h Port | =h Bits } #FOR$00,$04(n,{ #N(#PEEK(#PC+n*$02)) | #EVAL(#PEEK(#PC+$01+n*$02),$02,$08) }, )
 $C856 DEFB $BF,$04  ; TABLE#
 $C858 DEFB $DF,$01  ; }
@label=UserDefinedKeys_Set2
 $C85A DEFB $FB,$01  ; {Stores in the following format:
 $C85C DEFB $FB,$02  ; #TABLE(default,centre,centre)
 $C85E DEFB $DF,$02  ; { =h Port | =h Bits } #FOR$00,$04(n,{ #N(#PEEK(#PC+n*$02)) | #EVAL(#PEEK(#PC+$01+n*$02),$02,$08) }, )
 $C860 DEFB $BF,$04  ; TABLE#
 $C862 DEFB $DF,$01  ; }
@label=UserDefinedKeys_Set3
 $C864 DEFB $FB,$01  ; {Stores in the following format:
 $C866 DEFB $FB,$02  ; #TABLE(default,centre,centre)
 $C868 DEFB $DF,$02  ; { =h Port | =h Bits } #FOR$00,$04(n,{ #N(#PEEK(#PC+n*$02)) | #EVAL(#PEEK(#PC+$01+n*$02),$02,$08) }, )
 $C86A DEFB $BF,$04  ; TABLE#
 $C86C DEFB $DF,$01  ; }

; Data block at C86E
b$C86E DEFB $00,$25,$05,$01,$09,$09,$09,$09
 $C876 DEFB $09,$19,$19,$19,$19,$19,$19,$19
 $C87E DEFB $19,$19,$19,$19
 $C882 DEFB $00,$06,$06,$02,$0A,$0A,$0A,$0A
 $C88A DEFB $0A,$1A,$1A,$1A,$1A,$1A,$1A,$1A
 $C892 DEFB $1A,$1A,$1A,$1A
 $C896 DEFB $00,$04,$06,$02,$0A,$1A,$1A,$1A
 $C89E DEFB $1A,$1A,$1A,$1A,$1A,$1A,$1A,$1A
 $C8A6 DEFB $1A,$1A,$1A
 $C8A9 DEFB $00,$04,$05,$01,$09,$19,$19,$19
 $C8B1 DEFB $19,$19,$19,$19,$19,$19,$19,$19
 $C8B9 DEFB $19

; Data block at C8BA
b$C8BA DEFB $02,$03,$04,$05,$06,$06,$06,$06
 $C8C2 DEFB $07,$07,$07,$07,$02,$03,$04,$05
 $C8CA DEFB $08,$08,$08,$08,$09,$09,$09,$09
 $C8D2 DEFB $01,$01,$01,$01,$06,$06,$06,$06
 $C8DA DEFB $07,$07,$07,$07,$02,$0A,$0B,$02
 $C8E2 DEFB $06,$06,$06,$06,$07,$07,$07,$07
 $C8EA DEFB $01,$01,$01,$01,$08,$08,$08,$08
 $C8F2 DEFB $09,$09,$09,$09,$0C,$0C,$0C,$0C
 $C8FA DEFB $0D,$0E,$0C,$0C,$10,$11,$0C,$0C
 $C902 DEFB $0C,$0C,$0C,$0C,$0C,$0C,$0D,$0E
 $C90A DEFB $0C,$0C,$10,$11,$02,$03,$04,$05
 $C912 DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $C91A DEFB $33,$33,$33,$33,$33,$33,$33,$33
 $C922 DEFB $25,$26,$27,$25,$26,$27,$25,$26
 $C92A DEFB $27,$25,$26,$27,$25,$26,$2D,$2B
 $C932 DEFB $2C,$2D,$29,$2A,$28,$29,$2A,$28
 $C93A DEFB $29,$2A,$28,$29,$2A,$28,$29,$2A
 $C942 DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $C94A DEFB $01,$24,$01,$24,$01,$24,$01,$24
 $C952 DEFB $31,$31,$31,$31,$31,$31,$31,$31
 $C95A DEFB $32,$32,$32,$32,$32,$32,$32,$32
 $C962 DEFB $27,$25,$26,$27,$25,$26,$27,$25
 $C96A DEFB $26,$27,$25,$26,$27,$25,$26,$27
 $C972 DEFB $41,$41,$41,$41,$41,$41,$41,$41
 $C97A DEFB $41,$41,$41,$41,$41,$41,$41,$3F
 $C982 DEFB $3D,$3D,$3D,$3D,$4B,$41,$41,$41
 $C98A DEFB $41,$41,$41,$3F,$3D,$3D,$3D,$3D
 $C992 DEFB $41,$41,$41,$41,$41,$41,$3F,$3D
 $C99A DEFB $3D,$3D,$3D,$3D

; Data block at C99E
b$C99E DEFB $3D,$4B,$41,$41,$09,$09,$09,$09
 $C9A6 DEFB $0A,$0A,$0A,$0A,$0B,$0B,$0B,$0B
 $C9AE DEFB $0C,$0C,$0C,$0C,$0D,$0D,$0D,$0D
 $C9B6 DEFB $10,$10,$10,$10,$01,$02,$01,$02
 $C9BE DEFB $03,$04,$03,$04,$19,$1A,$1A,$22
 $C9C6 DEFB $1C,$1D,$1D,$1E,$1F,$20,$20,$21
 $C9CE DEFB $05,$06,$05,$06,$23,$05,$06,$23
 $C9D6 DEFB $2B,$2B,$2B,$2B,$2B,$23,$23,$2B
 $C9DE DEFB $2B,$05,$06,$2B,$2B,$26,$27,$2B
 $C9E6 DEFB $10,$34,$35,$10,$10,$36,$37,$10
 $C9EE DEFB $10,$38,$39,$10,$10,$28,$28,$10
 $C9F6 DEFB $10,$29,$29

; Data block at C9F9
b$C9F9 DEFB $10,$10,$2A,$2A,$10,$09,$09,$09
 $CA01 DEFB $09,$09,$0A,$0A,$0A,$0A,$0A,$0B
 $CA09 DEFB $0B,$0B,$0B,$0B,$0C,$0C,$0C,$0C
 $CA11 DEFB $0C,$0D,$0D,$0D,$0D,$0D,$10,$10
 $CA19 DEFB $10,$10,$10,$01,$02,$10,$01,$02
 $CA21 DEFB $03,$04,$10,$03,$04,$2B,$26,$23
 $CA29 DEFB $27,$2B,$24,$25,$10,$24,$25,$28
 $CA31 DEFB $28,$10,$28,$28,$29,$29,$10,$29
 $CA39 DEFB $29,$2A,$2A,$10,$2A,$2A,$19,$1A
 $CA41 DEFB $22,$34,$35,$1C,$1D,$1E,$36,$37
 $CA49 DEFB $1F,$20,$21,$38,$39,$05,$06,$10
 $CA51 DEFB $05,$06,$3F,$3F,$3F,$3F

; Data block at CA57
b$CA57 DEFB $3F,$2B,$2B,$2B,$2B,$2B,$09,$09
 $CA5F DEFB $09,$09,$09,$09,$0A,$0A,$0A,$0A
 $CA67 DEFB $0A,$0A,$0B,$0B,$0B,$0B,$0B,$0B
 $CA6F DEFB $0C,$0C,$0C,$0C,$0C,$0C,$0D,$0D
 $CA77 DEFB $0D,$0D,$0D,$0D,$10,$10,$10,$10
 $CA7F DEFB $10,$10,$01,$02,$01,$02,$01,$02
 $CA87 DEFB $03,$04,$03,$04,$03,$04,$19,$1A
 $CA8F DEFB $1A,$22,$34,$35,$1F,$20,$20,$21
 $CA97 DEFB $36,$37,$10,$10,$10,$10,$38,$39
 $CA9F DEFB $26,$27,$2B,$2B,$26,$27,$05,$06
 $CAA7 DEFB $05,$06,$05,$06,$19,$1A,$1A,$22
 $CAAF DEFB $05,$06,$1C,$1D,$1D,$1E,$05,$06
 $CAB7 DEFB $1F,$20,$20,$21,$05,$06,$10,$10
 $CABF DEFB $28,$28,$10,$10,$10,$10,$29,$29
 $CAC7 DEFB $10,$10,$10,$10,$2A,$2A,$10,$10
 $CACF DEFB $3F,$3F,$3F,$3F,$3F,$3F,$2E,$17
 $CAD7 DEFB $2F,$3A,$3B,$10,$10,$3D,$3C,$2D
 $CADF DEFB $3A,$10,$10,$2C,$2E,$17,$3A,$10
 $CAE7 DEFB $10,$2C,$2E,$17,$18,$10,$10,$18
 $CAEF DEFB $17,$2C,$2F,$10,$17,$2D,$2D,$3E
 $CAF7 DEFB $3D,$3A,$10,$2E,$3C,$2F,$10,$10
 $CAFF DEFB $10,$2F,$17,$17,$3B,$10,$10,$2E
 $CB07 DEFB $3C,$3B,$3B,$10,$10,$3D,$17,$3D
 $CB0F DEFB $3A,$10,$10,$3D,$17,$3B,$3C,$10
 $CB17 DEFB $10,$2C,$3C,$3B,$3A,$10,$2F,$17
 $CB1F DEFB $10,$3B,$3A,$2F,$10,$2D,$3B,$3C
 $CB27 DEFB $2F,$10

; Data: Buildings
@label=Buildings_Data
b$CB29 DEFB $FF                             ; Terminator.
; Building #N$01.
 $CB2A DEFB $03,$06,$07,$08,$07,$08,$07,$15
 $CB32 DEFB $16,$17
 $CB34 DEFB $FF                             ; Terminator.
; Building #N$02.
 $CB35 DEFB $02,$11,$07,$08,$09,$0A,$0B,$12
 $CB3D DEFB $13,$14
 $CB3F DEFB $FF                             ; Terminator.
; Building #N$03.
 $CB40 DEFB $44,$47,$48,$47,$48,$47,$48,$4B
 $CB48 DEFB $4C,$4D
 $CB4A DEFB $FF                             ; Terminator.
; Building #N$04.
 $CB4B DEFB $43,$47,$48,$52,$47,$48,$52,$4E
 $CB53 DEFB $4F,$50
 $CB55 DEFB $FF                             ; Terminator.
; Building #N$05.
 $CB56 DEFB $84,$8E,$8F,$90,$87,$88,$86,$91
 $CB5E DEFB $92,$93
 $CB60 DEFB $FF                             ; Terminator.
; Building #N$06.
 $CB61 DEFB $85,$87,$88,$87,$88,$94,$86,$89
 $CB69 DEFB $8A,$8B
 $CB6B DEFB $FF                             ; Terminator.
; Building #N$07.
 $CB6C DEFB $02,$06,$07,$08,$07,$08,$07,$08
 $CB74 DEFB $12,$13,$14
 $CB77 DEFB $FF                             ; Terminator.
; Building #N$08.
 $CB78 DEFB $01,$11,$09,$0A,$0B,$07,$08,$07
 $CB80 DEFB $12,$13,$14
 $CB83 DEFB $FF                             ; Terminator.
; Building #N$09.
 $CB84 DEFB $43,$47,$48,$51,$47,$48,$51,$51
 $CB8C DEFB $4E,$4F,$50
 $CB8F DEFB $FF                             ; Terminator.
; Building #N$0A.
 $CB90 DEFB $45,$52,$49,$49,$51,$47,$48,$52
 $CB98 DEFB $4B,$4C,$4D
 $CB9B DEFB $FF                             ; Terminator.
; Building #N$0B.
 $CB9C DEFB $82,$87,$88,$87,$88,$87,$88,$96
 $CBA4 DEFB $89,$8A,$8B
 $CBA7 DEFB $FF                             ; Terminator.
; Building #N$0C.
 $CBA8 DEFB $82,$8C,$86,$8D,$8E,$8F,$90,$94
 $CBB0 DEFB $89,$8A,$8B
 $CBB3 DEFB $FF                             ; Terminator.
; Building #N$0D.
 $CBB4 DEFB $03,$06,$0C,$0C,$0C,$0C,$0C,$0C
 $CBBC DEFB $0C,$12,$13,$14
 $CBC0 DEFB $FF                             ; Terminator.
; Building #N$0E.
 $CBC1 DEFB $05,$10,$09,$0A,$0B,$07,$08,$07
 $CBC9 DEFB $08,$15,$16,$17
 $CBCD DEFB $FF                             ; Terminator.
; Building #N$0F.
 $CBCE DEFB $43,$47,$48,$47,$48,$47,$48,$47
 $CBD6 DEFB $48,$4E,$4F,$50
 $CBDA DEFB $FF                             ; Terminator.
; Building #N$10.
 $CBDB DEFB $44,$47,$48,$47,$48,$47,$48,$47
 $CBE3 DEFB $48,$4B,$4C,$4D
 $CBE7 DEFB $FF                             ; Terminator.
; Building #N$11.
 $CBE8 DEFB $82,$86,$87,$88,$87,$88,$86,$9C
 $CBF0 DEFB $98,$89,$8A,$8B
 $CBF4 DEFB $FF                             ; Terminator.
; Building #N$12.
 $CBF5 DEFB $85,$86,$87,$88,$87,$88,$87,$88
 $CBFD DEFB $A0,$91,$92,$93
 $CC01 DEFB $FF                             ; Terminator.
; Building #N$13.
 $CC02 DEFB $04,$07,$08,$08,$07,$08,$07,$08
 $CC0A DEFB $07,$08,$15,$16,$17
 $CC0F DEFB $FF                             ; Terminator.
; Building #N$14.
 $CC10 DEFB $01,$06,$07,$08,$07,$08,$07,$08
 $CC18 DEFB $07,$08,$15,$16,$17
 $CC1D DEFB $FF                             ; Terminator.
; Building #N$15.
 $CC1E DEFB $45,$47,$48,$51,$47,$48,$51,$47
 $CC26 DEFB $48,$51,$4B,$4C,$4D
 $CC2B DEFB $FF                             ; Terminator.
; Building #N$16.
 $CC2C DEFB $45,$47,$48,$52,$47,$48,$52,$47
 $CC34 DEFB $48,$52,$4B,$4C,$4D
 $CC39 DEFB $FF                             ; Terminator.
; Building #N$17.
 $CC3A DEFB $83,$86,$87,$88,$87,$88,$87,$88
 $CC42 DEFB $97,$98,$89,$8A,$8B
 $CC47 DEFB $FF                             ; Terminator.
; Building #N$18.
 $CC48 DEFB $81,$86,$8D,$8E,$8F,$90,$94,$87
 $CC50 DEFB $88,$9D,$91,$92,$93
 $CC55 DEFB $FF                             ; Terminator.
; Building #N$19.
 $CC56 DEFB $03,$07,$08,$07,$08,$07,$08,$07
 $CC5E DEFB $08,$07,$08,$12,$13,$14
 $CC64 DEFB $FF                             ; Terminator.
; Building #N$1A.
 $CC65 DEFB $02,$0C,$0C,$0C,$0C,$0C,$0C,$0C
 $CC6D DEFB $0C,$0C,$0C,$15,$16,$17
 $CC73 DEFB $FF                             ; Terminator.
; Building #N$1B.
 $CC74 DEFB $45,$47,$48,$47,$48,$47,$48,$47
 $CC7C DEFB $48,$47,$48,$4B,$4C,$4D
 $CC82 DEFB $FF                             ; Terminator.
; Building #N$1C.
 $CC83 DEFB $42,$47,$48,$47,$48,$52,$47,$48
 $CC8B DEFB $47,$48,$52,$4E,$4F,$50
 $CC91 DEFB $FF                             ; Terminator.
; Building #N$1D.
 $CC92 DEFB $84,$86,$87,$88,$94,$87,$88,$94
 $CC9A DEFB $87,$88,$94,$89,$8A,$8B
 $CCA0 DEFB $FF                             ; Terminator.
; Building #N$1E.
 $CCA1 DEFB $81,$87,$87,$87,$88,$87,$88,$87
 $CCA9 DEFB $88,$87,$88,$89,$8A,$8B
 $CCAF DEFB $FF                             ; Terminator.
; Building #N$1F.
 $CCB0 DEFB $01,$06,$07,$06,$07,$06,$07,$06
 $CCB8 DEFB $07,$06,$07,$06,$12,$13,$14
 $CCBF DEFB $FF                             ; Terminator.
; Building #N$20.
 $CCC0 DEFB $01,$10,$07,$08,$09,$0A,$0B,$07
 $CCC8 DEFB $08,$09,$0A,$0B,$15,$16,$17
 $CCCF DEFB $FF                             ; Terminator.
; Building #N$21.
 $CCD0 DEFB $41,$47,$48,$47,$48,$47,$48,$47
 $CCD8 DEFB $48,$47,$48,$47,$4B,$4C,$4D
 $CCDF DEFB $FF                             ; Terminator.
; Building #N$22.
 $CCE0 DEFB $44,$51,$51,$47,$48,$51,$47,$48
 $CCE8 DEFB $51,$47,$48,$51,$4E,$4F,$50
 $CCEF DEFB $FF                             ; Terminator.
; Building #N$23.
 $CCF0 DEFB $84,$86,$8E,$8F,$90,$94,$8E,$8F
 $CCF8 DEFB $90,$94,$99,$9A,$91,$92,$93
 $CCFF DEFB $FF                             ; Terminator.
; Building #N$24.
 $CD00 DEFB $81,$86,$87,$A1,$87,$88,$87,$88
 $CD08 DEFB $87,$88,$87,$87,$91,$92,$93
 $CD0F DEFB $FF                             ; Terminator.
; Building #N$25.
 $CD10 DEFB $01,$09,$0A,$0B,$07,$08,$07,$08
 $CD18 DEFB $07,$08,$07,$08,$07,$15,$16,$17
 $CD20 DEFB $FF                             ; Terminator.
; Building #N$26.
 $CD21 DEFB $02,$0D,$09,$0A,$0B,$07,$08,$07
 $CD29 DEFB $08,$07,$08,$07,$08,$12,$13,$14
 $CD31 DEFB $FF                             ; Terminator.
; Building #N$27.
 $CD32 DEFB $44,$47,$48,$47,$48,$47,$48,$47
 $CD3A DEFB $48,$47,$48,$47,$48,$4E,$4F,$50
 $CD42 DEFB $FF                             ; Terminator.
; Building #N$28.
 $CD43 DEFB $44,$47,$48,$52,$47,$48,$52,$47
 $CD4B DEFB $48,$52,$47,$48,$52,$4E,$4F,$50
 $CD53 DEFB $FF                             ; Terminator.
; Building #N$29.
 $CD54 DEFB $81,$87,$88,$87,$88,$87,$88,$87
 $CD5C DEFB $88,$87,$88,$87,$95,$91,$92,$93
 $CD64 DEFB $FF                             ; Terminator.
; Building #N$2A.
 $CD65 DEFB $85,$8E,$8F,$90,$8E,$8F,$90,$8E
 $CD6D DEFB $8F,$90,$8E,$8F,$90,$91,$92,$93
 $CD75 DEFB $FF                             ; Terminator.
; Building #N$2B.
 $CD76 DEFB $03,$07,$08,$07,$08,$07,$08,$07
 $CD7E DEFB $08,$07,$08,$07,$08,$07,$12,$13
 $CD86 DEFB $14
 $CD87 DEFB $FF                             ; Terminator.
; Building #N$2C.
 $CD88 DEFB $03,$07,$08,$09,$0A,$0B,$07,$08
 $CD90 DEFB $09,$0A,$0B,$09,$0A,$0B,$12,$13
 $CD98 DEFB $14
 $CD99 DEFB $FF                             ; Terminator.
; Building #N$2D.
 $CD9A DEFB $41,$47,$48,$52,$47,$48,$52,$47
 $CDA2 DEFB $48,$47,$48,$52,$47,$48,$4B,$4C
 $CDAA DEFB $4D
 $CDAB DEFB $FF                             ; Terminator.
; Building #N$2E.
 $CDAC DEFB $41,$47,$48,$47,$48,$51,$47,$48
 $CDB4 DEFB $51,$47,$48,$51,$47,$48,$4B,$4C
 $CDBC DEFB $4D
 $CDBD DEFB $FF                             ; Terminator.
; Building #N$2F.
 $CDBE DEFB $82,$87,$86,$87,$88,$87,$88,$87
 $CDC6 DEFB $88,$87,$88,$87,$88,$88,$89,$8A
 $CDCE DEFB $8B
 $CDCF DEFB $FF                             ; Terminator.
; Building #N$30.
 $CDD0 DEFB $84,$87,$8E,$8F,$90,$87,$88,$8E
 $CDD8 DEFB $8F,$90,$87,$88,$87,$88,$89,$8A
 $CDE0 DEFB $8B
 $CDE1 DEFB $FF                             ; Terminator.

; Data: Scenes
;
; For usage see #R$DF90.
@label=Scene_Data
b$CDE2 DEFB $FF                             ; Terminator.
; Scene #N$01.
 $CDE3 DEFB $01,$01
 $CDE5 DEFB $0B                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CDE6 DEFB $09,$84,$28,$2D,$1A,$D6
 $CDEC DEFB $FF                             ; Terminator.
; Scene #N$02.
 $CDED DEFB $40,$20
 $CDEF DEFB $1C                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CDF0 DEFB $2C,$05,$2E,$92,$88,$A8,$92,$35
 $CDF8 DEFB $FF                             ; Terminator.
; Scene #N$03.
 $CDF9 DEFB $0D,$04
 $CDFB DEFB $15                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CDFC DEFB $2A,$82,$29,$CC,$2A,$96,$87,$49
 $CE04 DEFB $8B,$33
 $CE06 DEFB $FF                             ; Terminator.
; Scene #N$04.
 $CE07 DEFB $37,$1C
 $CE09 DEFB $25                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CE0A DEFB $26,$CF,$2C,$38,$8C,$A2,$2D,$C7
 $CE12 DEFB $89,$52
 $CE14 DEFB $FF                             ; Terminator.
; Scene #N$05.
 $CE15 DEFB $05,$0A
 $CE17 DEFB $44                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CE18 DEFB $2F,$84,$2B,$96,$84,$47,$88,$33
 $CE20 DEFB $FF                             ; Terminator.
; Scene #N$06.
 $CE21 DEFB $1F,$27
 $CE23 DEFB $34                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CE24 DEFB $22,$02,$2B,$96,$82,$46,$8F,$30
 $CE2C DEFB $FF                             ; Terminator.
; Scene #N$07.
 $CE2D DEFB $13,$0B
 $CE2F DEFB $0D                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CE30 DEFB $30,$82,$25,$8C,$27,$96,$81,$C7
 $CE38 DEFB $8B,$D1
 $CE3A DEFB $FF                             ; Terminator.
; Scene #N$08.
 $CE3B DEFB $04,$30
 $CE3D DEFB $1C                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CE3E DEFB $23,$E4,$2C,$F7,$84,$A9,$89,$B3
 $CE46 DEFB $FF                             ; Terminator.
; Scene #N$09.
 $CE47 DEFB $17,$16
 $CE49 DEFB $2D                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CE4A DEFB $30,$83,$2B,$55,$81,$C2,$81,$CD
 $CE52 DEFB $81,$D8
 $CE54 DEFB $FF                             ; Terminator.
; Scene #N$0A.
 $CE55 DEFB $10,$02
 $CE57 DEFB $23                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CE58 DEFB $1E,$42,$1E,$CC,$1E,$96
 $CE5E DEFB $FF                             ; Terminator.
; Scene #N$0B.
 $CE5F DEFB $3B,$1B
 $CE61 DEFB $45                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CE62 DEFB $28,$64,$27,$CC,$26,$F5,$82,$02
 $CE6A DEFB $87,$78
 $CE6C DEFB $FF                             ; Terminator.
; Scene #N$0C.
 $CE6D DEFB $02,$2E
 $CE6F DEFB $3C                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CE70 DEFB $1F,$24,$30,$D3,$86,$07,$84,$91
 $CE78 DEFB $FF                             ; Terminator.
; Scene #N$0D.
 $CE79 DEFB $3C,$12
 $CE7B DEFB $1D                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CE7C DEFB $2C,$C5,$2D,$D7,$8F,$22,$99,$CD
 $CE84 DEFB $8A,$34
 $CE86 DEFB $FF                             ; Terminator.
; Scene #N$0E.
 $CE87 DEFB $29,$21
 $CE89 DEFB $13                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CE8A DEFB $30,$02,$30,$2C,$30,$56
 $CE90 DEFB $FF                             ; Terminator.
; Scene #N$0F.
 $CE91 DEFB $06,$0D
 $CE93 DEFB $24                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CE94 DEFB $2E,$B7,$97,$E3,$94,$CD,$8D,$55
 $CE9C DEFB $FF                             ; Terminator.
; Scene #N$10.
 $CE9D DEFB $1D,$02
 $CE9F DEFB $44                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CEA0 DEFB $2B,$A3,$2F,$D4,$90,$26,$90,$50
 $CEA8 DEFB $FF                             ; Terminator.
; Scene #N$11.
 $CEA9 DEFB $04,$05
 $CEAB DEFB $1D                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CEAC DEFB $2A,$85,$25,$EF,$1F,$57,$87,$C3
 $CEB4 DEFB $85,$12
 $CEB6 DEFB $FF                             ; Terminator.
; Scene #N$12.
 $CEB7 DEFB $0B,$2D
 $CEB9 DEFB $14                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CEBA DEFB $29,$44,$24,$CE,$0E,$B8,$8C,$E2
 $CEC2 DEFB $FF                             ; Terminator.
; Scene #N$13.
 $CEC3 DEFB $27,$0F
 $CEC5 DEFB $45                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CEC6 DEFB $2A,$85,$28,$6F,$21,$57,$83,$23
 $CECE DEFB $81,$15
 $CED0 DEFB $FF                             ; Terminator.
; Scene #N$14.
 $CED1 DEFB $09,$26
 $CED3 DEFB $0C                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CED4 DEFB $2D,$C2,$09,$8E,$2B,$18,$86,$65
 $CEDC DEFB $FF                             ; Terminator.
; Scene #N$15.
 $CEDD DEFB $33,$10
 $CEDF DEFB $3C                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CEE0 DEFB $1A,$C2,$19,$69,$14,$90,$2B,$F7
 $CEE8 DEFB $FF                             ; Terminator.
; Scene #N$16.
 $CEE9 DEFB $15,$06
 $CEEB DEFB $1D                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CEEC DEFB $26,$A2,$27,$ED,$30,$36,$87,$05
 $CEF4 DEFB $8A,$D0
 $CEF6 DEFB $FF                             ; Terminator.
; Scene #N$17.
 $CEF7 DEFB $01,$27
 $CEF9 DEFB $35                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CEFA DEFB $2E,$42,$26,$ED,$29,$D5,$88,$25
 $CF02 DEFB $8C,$90
 $CF04 DEFB $FF                             ; Terminator.
; Scene #N$18.
 $CF05 DEFB $08,$1C
 $CF07 DEFB $45                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CF08 DEFB $30,$A2,$24,$EC,$2B,$15,$85,$25
 $CF10 DEFB $8E,$58
 $CF12 DEFB $FF                             ; Terminator.
; Scene #N$19.
 $CF13 DEFB $3F,$11
 $CF15 DEFB $1D                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CF16 DEFB $2A,$E4,$25,$AD,$20,$54,$84,$02
 $CF1E DEFB $83,$F7
 $CF20 DEFB $FF                             ; Terminator.
; Scene #N$1A.
 $CF21 DEFB $16,$03
 $CF23 DEFB $24                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CF24 DEFB $2A,$C5,$21,$6E,$17,$36,$8B,$02
 $CF2C DEFB $FF                             ; Terminator.
; Scene #N$1B.
 $CF2D DEFB $3A,$20
 $CF2F DEFB $2E                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CF30 DEFB $25,$42,$26,$2A,$2C,$11,$2B,$F8
 $CF38 DEFB $81,$C5,$9A,$76
 $CF3C DEFB $FF                             ; Terminator.
; Scene #N$1C.
 $CF3D DEFB $0D,$28
 $CF3F DEFB $35                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CF40 DEFB $2C,$62,$20,$8C,$2C,$37,$88,$85
 $CF48 DEFB $8A,$F3
 $CF4A DEFB $FF                             ; Terminator.
; Scene #N$1D.
 $CF4B DEFB $31,$14
 $CF4D DEFB $0C                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CF4E DEFB $2C,$C3,$1F,$8A,$13,$11,$07,$58
 $CF56 DEFB $FF                             ; Terminator.
; Scene #N$1E.
 $CF57 DEFB $12,$2E
 $CF59 DEFB $13                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CF5A DEFB $A9,$85,$29,$CC,$A9,$93
 $CF60 DEFB $FF                             ; Terminator.
; Scene #N$1F.
 $CF61 DEFB $3C,$0E
 $CF63 DEFB $1C                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CF64 DEFB $30,$46,$03,$AF,$27,$F7,$91,$23
 $CF6C DEFB $FF                             ; Terminator.
; Scene #N$20.
 $CF6D DEFB $0A,$09
 $CF6F DEFB $34                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CF70 DEFB $2A,$22,$84,$05,$AC,$8E,$A1,$F5
 $CF78 DEFB $FF                             ; Terminator.
; Scene #N$21.
 $CF79 DEFB $05,$0D
 $CF7B DEFB $2C                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CF7C DEFB $2B,$E2,$2C,$89,$2B,$70,$2C,$D7
 $CF84 DEFB $FF                             ; Terminator.
; Scene #N$22.
 $CF85 DEFB $3D,$2D
 $CF87 DEFB $34                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CF88 DEFB $27,$43,$07,$EF,$21,$36,$89,$86
 $CF90 DEFB $FF                             ; Terminator.
; Scene #N$23.
 $CF91 DEFB $12,$17
 $CF93 DEFB $43                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CF94 DEFB $2A,$02,$2E,$8C,$2A,$F5
 $CF9A DEFB $FF                             ; Terminator.
; Scene #N$24.
 $CF9B DEFB $02,$1F
 $CF9D DEFB $1A                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CF9E DEFB $2F,$47,$2F,$11
 $CFA2 DEFB $FF                             ; Terminator.
; Scene #N$25.
 $CFA3 DEFB $10,$0D
 $CFA5 DEFB $24                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CFA6 DEFB $28,$C2,$27,$8F,$16,$F7,$98,$4B
 $CFAE DEFB $FF                             ; Terminator.
; Scene #N$26.
 $CFAF DEFB $30,$1B
 $CFB1 DEFB $29                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CFB2 DEFB $01,$CD
 $CFB4 DEFB $FF                             ; Terminator.
; Scene #N$27.
 $CFB5 DEFB $39,$28
 $CFB7 DEFB $3D                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CFB8 DEFB $2E,$C2,$2B,$8C,$28,$F3,$92,$25
 $CFC0 DEFB $86,$76
 $CFC2 DEFB $FF                             ; Terminator.
; Scene #N$28.
 $CFC3 DEFB $01,$01
 $CFC5 DEFB $0E                             ; #TABLE(default,centre,centre) { =h Scene Type | =h Number Of Buildings }
                                            ; { #N(#EVAL((#PEEK(#PC)&$78)>>$03)) | #N(#EVAL(#PEEK(#PC)&$07)) }
                                            ; TABLE#
 $CFC6 DEFB $2B,$43,$2B,$2D,$2B,$17,$B0,$C2
 $CFCE DEFB $B0,$8C,$B0,$D6

; Data: George
@label=George_State
g$CFD2 DEFB $00         ; #TABLE(default,centre,centre)
                        ; { =h Value | =h Meaning }
                        ; { #N$05 | Waiting }
                        ; { #N$1A | Eating }
                        ; { #N$1C | Falling }
                        ; { #N$21 | Explosion }
                        ; { #N$23 | Human }
                        ; { #N$FF | Game Over }
                        ; TABLE#
 $CFD3 DEFB $00,$00
@label=George_Direction
 $CFD5 DEFB $00         ; #TABLE(default,centre,centre)
                        ; { =h Value | =h Meaning }
                        ; { #N$00 | Right }
                        ; { #N$01 | Left }
                        ; TABLE#
 $CFD6 DEFB $00
@label=George_Countdown
 $CFD7 DEFB $19
 $CFD8 DEFB $03,$19,$00
@label=George_X_Position
 $CFDB DEFB $0A
@label=George_Y_Position
 $CFDC DEFB $12
 $CFDD DEFB $01
@label=George_Energy
 $CFDE DEFB $40
@label=George_Banner_Counter
 $CFDF DEFB $00
@label=George_Control_Type
 $CFE0 DEFB $04         ; #TABLE(default,centre,centre) { =h Value | =h Meaning }
                        ; { #N$00 | Computer Controlled }
                        ; { #N$01 | Sinclair Interface 2 (port 2) }
                        ; { #N$02 | Sinclair Interface 2 (port 1) }
                        ; { #N$03 | Kempston Joystick }
                        ; { #N$04 | Keyboard (set 1) }
                        ; { #N$05 | Keyboard (set 2) }
                        ; { #N$06 | Keyboard (set 3 }
                        ; { #N$FF | Not set }
                        ; TABLE#
 $CFE1 DEFW $CFE3
 $CFE3 DEFB $01,$0A,$0A
 $CFE6 DEFB $12,$02,$02
 $CFE9 DEFB $01,$05,$00
 $CFEC DEFB $00,$04,$0A
 $CFEF DEFB $0A,$12,$02
 $CFF2 DEFB $02,$09,$07
 $CFF5 DEFB $00,$00,$08
 $CFF8 DEFB $0A,$0A,$12
 $CFFB DEFB $02,$02,$07
 $CFFE DEFB $09,$00,$00

; Data: Lizzy
@label=Lizzy_State
g$D001 DEFB $00                             ; #TABLE(default,centre,centre)
                                            ; { =h Value | =h Meaning }
                                            ; { #N$05 | Waiting }
                                            ; { #N$1A | Eating }
                                            ; { #N$1C | Falling }
                                            ; { #N$21 | Explosion }
                                            ; { #N$23 | Human }
                                            ; { #N$FF | Game Over }
                                            ; TABLE#
 $D002 DEFB $00,$00
@label=Lizzy_Direction
 $D004 DEFB $00                             ; #TABLE(default,centre,centre)
                                            ; { =h Value | =h Meaning }
                                            ; { #N$00 | Right }
                                            ; { #N$01 | Left }
                                            ; TABLE#
 $D005 DEFB $00
@label=Lizzy_Countdown
 $D006 DEFB $14
 $D007 DEFB $03,$19,$00
@label=Lizzy_X_Position
 $D00A DEFB $02
@label=Lizzy_Y_Position
 $D00B DEFB $12
 $D00C DEFB $01
@label=Lizzy_Energy
 $D00D DEFB $40
@label=Lizzy_Banner_Counter
 $D00E DEFB $40
@label=Lizzy_Control_Type
 $D00F DEFB $00                             ; #TABLE(default,centre,centre) { =h Value | =h Meaning }
                                            ; { #N$00 | Computer Controlled }
                                            ; { #N$01 | Sinclair Interface 2 (port 2) }
                                            ; { #N$02 | Sinclair Interface 2 (port 1) }
                                            ; { #N$03 | Kempston Joystick }
                                            ; { #N$04 | Keyboard (set 1) }
                                            ; { #N$05 | Keyboard (set 2) }
                                            ; { #N$06 | Keyboard (set 3 }
                                            ; { #N$FF | Not set }
                                            ; TABLE#
 $D010 DEFW $D012
 $D012 DEFB $01,$02,$02,$12,$02,$02,$41,$45
 $D01A DEFB $00,$00,$04,$02,$02,$12,$02,$02
 $D022 DEFB $49,$47,$00,$00,$08,$02,$02,$12
 $D02A DEFB $02,$02,$47,$49,$00,$00

; Data: Ralph
@label=Ralph_State
g$D030 DEFB $00                             ; #TABLE(default,centre,centre)
                                            ; { =h Value | =h Meaning }
                                            ; { #N$05 | Waiting }
                                            ; { #N$1A | Eating }
                                            ; { #N$1C | Falling }
                                            ; { #N$21 | Explosion }
                                            ; { #N$23 | Human }
                                            ; { #N$FF | Game Over }
                                            ; TABLE#
 $D031 DEFB $00,$00
@label=Ralph_Direction
 $D033 DEFB $00                             ; #TABLE(default,centre,centre)
                                            ; { =h Value | =h Meaning }
                                            ; { #N$00 | Right }
                                            ; { #N$01 | Left }
                                            ; TABLE#
 $D034 DEFB $00
@label=Ralph_Countdown
 $D035 DEFB $0F
 $D036 DEFB $03,$19,$00
@label=Ralph_X_Position
 $D039 DEFB $14
@label=Ralph_Y_Position
 $D03A DEFB $12
 $D03B DEFB $01
@label=Ralph_Energy
 $D03C DEFB $40
@label=Ralph_Banner_Counter
 $D03D DEFB $80
@label=Ralph_Control_Type
 $D03E DEFB $00                             ; #TABLE(default,centre,centre) { =h Value | =h Meaning }
                                            ; { #N$00 | Computer Controlled }
                                            ; { #N$01 | Sinclair Interface 2 (port 2) }
                                            ; { #N$02 | Sinclair Interface 2 (port 1) }
                                            ; { #N$03 | Kempston Joystick }
                                            ; { #N$04 | Keyboard (set 1) }
                                            ; { #N$05 | Keyboard (set 2) }
                                            ; { #N$06 | Keyboard (set 3 }
                                            ; { #N$FF | Not set }
                                            ; TABLE#
 $D03F DEFW $D041
 $D041 DEFB $01,$14,$14,$12,$02,$02,$81,$85
 $D049 DEFB $00,$00,$04,$14,$14,$12,$02,$02
 $D051 DEFB $89,$87,$00,$00,$08,$14,$14,$12
 $D059 DEFB $02,$02,$87,$89,$00,$00

; Messaging: George
@label=Messaging_George
t$D05F DEFM "GEORGE"," "+$80 ; "#STR(#PC)".
@label=Messaging_GeorgeScore
 $D066 DEFM "000000"," "+$80 ; "#STR(#PC)".

; Messaging: Lizzy
@label=Messaging_Lizzy
t$D06D DEFM "LIZZY "," "+$80 ; "#STR(#PC)".
@label=Messaging_LizzyScore
 $D074 DEFM "000000"," "+$80 ; "#STR(#PC)".

; Messaging: Ralph
@label=Messaging_Ralph
t$D07B DEFM "RALPH "," "+$80 ; "#STR(#PC)".
@label=Messaging_RalphScore
 $D082 DEFM "000000"," "+$80 ; "#STR(#PC)".

; Messaging: Credits
@label=Messaging_Credits
t$D089 DEFM "CODE B","Y"+$80             ; "#STR(#PC)".
 $D090 DEFM "BOB PAP",$C5," "+$80        ; "#STR(#PC)".
 $D099 DEFM "GRAPHICS B","Y"+$80         ; "#STR(#PC)".
 $D0A4 DEFM "MARK JONES ","&"+$80        ; "#STR(#PC)".
 $D0B0 DEFM "COLIN TUC",$CB," "+$80      ; "#STR(#PC)".
 $D0BB DEFM $7F,"ACTIVISION 198","7"+$80 ; "#STR(#PC)".

; Messaging: Rampage
@label=Messaging_Rampage
t$D0CB DEFM "RAMPAGE t","m"+$80 ; "#STR(#PC)".

; Messaging: Change Controls
@label=Messaging_ChangeControls
t$D0D5 DEFM "SELECT TH","E"+$80   ; "#STR(#PC)".
 $D0DF DEFM "CONTROLS FO","R"+$80 ; "#STR(#PC)".

; Messaging: Controls
@label=Messaging_Controls
t$D0EB DEFM "LEF","T"+$80  ; "#STR(#PC)".
 $D0EF DEFM "RIGH","T"+$80 ; "#STR(#PC)".
 $D0F4 DEFM "U","P"+$80    ; "#STR(#PC)".
 $D0F6 DEFM "DOW","N"+$80  ; "#STR(#PC)".
 $D0FA DEFM "JUMP","/"+$80 ; "#STR(#PC)".
 $D0FF DEFM "PUNC","H"+$80 ; "#STR(#PC)".
@label=Messaging_QuestionMark
 $D104 DEFM "?"," "+$80    ; "#STR(#PC)".
@label=Messaging_Buffer
 $D106 DEFM " "," "+$80    ; "#STR(#PC)".

; Messaging: Special Keys
@label=Messaging_CapsShift
t$D108 DEFM "C","S"+$80 ; "#STR(#PC)".
@label=Messaging_SymbolShift
 $D10A DEFM "S","S"+$80 ; "#STR(#PC)".
@label=Messaging_Space
 $D10C DEFM "S","P"+$80 ; "#STR(#PC)".
@label=Messaging_Enter
 $D10E DEFM "E","N"+$80 ; "#STR(#PC)".

; Messaging: Select Menu
@label=Messaging_SelectMenu
t$D110 DEFM "S - STAR","T"+$80  ; "#STR(#PC)".
 $D119 DEFM "GAM","E"+$80       ; "#STR(#PC)".
 $D11D DEFM "C - CHANG","E"+$80 ; "#STR(#PC)".
 $D127 DEFM "GAM","E"+$80       ; "#STR(#PC)".
 $D12B DEFM "CONTROL","S"+$80   ; "#STR(#PC)".

; Messaging: Choose Controls/ Character Option
@label=Messaging_ChooseControls
t$D133 DEFM "K - KEYBOAR","D"+$80   ; "#STR(#PC)".
 $D13F DEFM "1 - SINCLAIR ","1"+$80 ; "#STR(#PC)".
 $D14D DEFM "2 - SINCLAIR ","2"+$80 ; "#STR(#PC)".
 $D15B DEFM "3 - KEMPSTO","N"+$80   ; "#STR(#PC)".
 $D167 DEFM "C - COMPUTE","R"+$80   ; "#STR(#PC)".
 $D173 DEFM "    CONTROLLE","D"+$80 ; "#STR(#PC)".
 $D181 DEFM "N - NO MONSTE","R"+$80 ; "#STR(#PC)".

; Messaging: Game Over
@label=Messaging_GameOver
t$D18F DEFM "GAME OVE","R"+$80 ; "#STR(#PC)".

; Graphics: Ticker
;
; See #R$FD44.
@label=Graphics_Ticker
b$D198 DEFB $43,$46,$46,$46,$46,$46,$46,$46
 $D1A0 DEFB $46,$46,$46,$46,$46,$46,$46,$46
 $D1A8 DEFB $46,$46,$46,$46,$46,$46,$46,$45
 $D1B0 DEFB $43,$46,$00,$47,$48,$00,$46,$46
 $D1B8 DEFB $43,$46,$00,$49,$4A,$01,$46,$46
 $D1C0 DEFB $43,$46,$00,$01,$00,$01,$46,$46
 $D1C8 DEFB $43,$46,$00,$01,$01,$01,$46,$46
 $D1D0 DEFB $43,$46,$01,$01,$01,$01,$46,$46
 $D1D8 DEFB $00,$02,$00,$00,$01,$00,$46,$45
 $D1E0 DEFB $01,$01,$00,$08,$01,$10,$46,$45
 $D1E8 DEFB $01,$01,$0C,$01,$01,$0F,$46,$45
 $D1F0 DEFB $01,$01,$01,$01,$01,$01,$46,$45
 $D1F8 DEFB $43,$44,$44,$44,$44,$44,$44,$44
 $D200 DEFB $44,$44,$44,$44,$44,$44,$44,$44
 $D208 DEFB $44,$44,$44,$44,$44,$44,$44,$45

; Game status buffer entry at D210
;
; Defaults to #N$80 (see #R$DEC9).
g$D210 DEFB $00

; Data block at D211
b$D211 DEFB $00

; Maximum Number Helicopters
@label=MaxHelicopterCount
g$D212 DEFB $00

; Data block at D213
b$D213 DEFB $00

; Data block at D214
b$D214 DEFB $00

; Data block at D215
b$D215 DEFB $00

; Level Finished Countdown
;
; After all the buildings have collapsed, the game doesn't instantly end the level. This countdown is reduced and
;       the level ends only when it reaches zero.
@label=LevelFinishedCountdown
g$D216 DEFB $00

; Game status buffer entry at D217
g$D217 DEFB $00

; Game status buffer entry at D218
g$D218 DEFB $00
 $D219 DEFB $00

; Game Clock
;
; Counts up while the game plays, used as a random number generator (as it's
; never reset).
@label=Game_Clock
g$D21A DEFW $0000
 $D21C DEFB $00,$00

; Game status buffer entry at D21E
g$D21E DEFB $00,$00

; Game status buffer entry at D220
g$D220 DEFB $00,$00

; Game status buffer entry at D222
g$D222 DEFB $00,$00

; Game status buffer entry at D224
g$D224 DEFW $D22C

; Game status buffer entry at D226
g$D226 DEFB $3E

; George
g$D227 DEFB $D2
 $D228 DEFB $00
 $D229 DEFB $00
 $D22A DEFB $00
 $D22B DEFB $00
 $D22C DEFB $00

; Lizzy
g$D22D DEFB $00
 $D22E DEFB $00
 $D22F DEFB $00
 $D230 DEFB $00
 $D231 DEFB $00
 $D232 DEFB $00

; Ralph
g$D233 DEFB $00
 $D234 DEFB $00
 $D235 DEFB $00
 $D236 DEFB $00
 $D237 DEFB $00
 $D238 DEFB $00

; Data block at D239
b$D239 DEFB $00,$00,$00,$00,$00

; Game status buffer entry at D23E
g$D23E DEFB $00
 $D23F DEFB $00
 $D240 DEFB $00

; Game status buffer entry at D241
g$D241 DEFB $00
 $D242 DEFB $00
 $D243 DEFB $00

; Jump Table Pointer
@label=JumpTable_Pointer
g$D244 DEFB $00

; Game status buffer entry at D245
g$D245 DEFB $00

; Game status buffer entry at D246
g$D246 DEFB $00

; Vehicle Orientation Flag
;
; #TABLE(default,centre,centre) { =h Value | =h Moving }
; { #N$00 | Left-to-right  }
; { #N$01 | Right-to-left }
; TABLE#
@label=Flag_VehicleOrientation
g$D247 DEFB $00

; Game status buffer entry at D248
g$D248 DEFB $00

; Game status buffer entry at D249
g$D249 DEFB $00

; Game status buffer entry at D24A
g$D24A DEFB $00

; Game status buffer entry at D24B
g$D24B DEFB $00

; Game status buffer entry at D24C
g$D24C DEFB $00

; Game status buffer entry at D24D
g$D24D DEFB $00
 $D24E DEFB $00

; Game status buffer entry at D24F
g$D24F DEFB $00,$00

; Data block at D251
b$D251 DEFB $00

; Data block at D252
b$D252 DEFB $00

; Game status buffer entry at D253
g$D253 DEFW $0000

; Game status buffer entry at D255
g$D255 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D25D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D265 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D26D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D275 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D27D DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D285 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D28D DEFB $00,$00,$00,$00,$00

; Game status buffer entry at D292
g$D292 DEFB $00,$00,$00

; Table: Helicopters
;
; See #R$DBE5.
;
; .
;
; Helicopter ##N($01+(#PC-$D295)/$03).
@label=Table_Helicopters
g$D295 DEFB $00      ; State.
 $D296 DEFB $00      ; X position.
 $D297 DEFB $00      ; Y position.
; Helicopter ##N($01+(#PC-$D295)/$03).
 $D298 DEFB $00      ; State.
 $D299 DEFB $00      ; X position.
 $D29A DEFB $00      ; Y position.
; Helicopter ##N($01+(#PC-$D295)/$03).
 $D29B DEFB $00      ; State.
 $D29C DEFB $00      ; X position.
 $D29D DEFB $00      ; Y position.
; Helicopter ##N($01+(#PC-$D295)/$03).
 $D29E DEFB $00      ; State.
 $D29F DEFB $00      ; X position.
 $D2A0 DEFB $00      ; Y position.
; Helicopter ##N($01+(#PC-$D295)/$03).
 $D2A1 DEFB $00      ; State.
 $D2A2 DEFB $00      ; X position.
 $D2A3 DEFB $00      ; Y position.
; Helicopter ##N($01+(#PC-$D295)/$03).
 $D2A4 DEFB $00      ; State.
 $D2A5 DEFB $00      ; X position.
 $D2A6 DEFB $00      ; Y position.

; Table: Helicopter Something
;
; .
;
; .
;
; Helicopter ##N($01+(#PC-$D2A7)/$04).
@label=Table_SomethingHelicopters
g$D2A7 DEFB $00
 $D2A8 DEFB $00
 $D2A9 DEFB $00
 $D2AA DEFB $00
; Helicopter ##N($01+(#PC-$D2A7)/$04).
 $D2AB DEFB $00
 $D2AC DEFB $00
 $D2AD DEFB $00
 $D2AE DEFB $00
; Helicopter ##N($01+(#PC-$D2A7)/$04).
 $D2AF DEFB $00
 $D2B0 DEFB $00
 $D2B1 DEFB $00
 $D2B2 DEFB $00
; Helicopter ##N($01+(#PC-$D2A7)/$04).
 $D2B3 DEFB $00
 $D2B4 DEFB $00
 $D2B5 DEFB $00
 $D2B6 DEFB $00
; Helicopter ##N($01+(#PC-$D2A7)/$04).
 $D2B7 DEFB $00
 $D2B8 DEFB $00
 $D2B9 DEFB $00
 $D2BA DEFB $00
; Helicopter ##N($01+(#PC-$D2A7)/$04).
 $D2BB DEFB $00
 $D2BC DEFB $00
 $D2BD DEFB $00
 $D2BE DEFB $00

; Table: Bullets
@label=Table_Bullets
b$D2BF DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2C2 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2C5 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2C8 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2CB DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2CE DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2D1 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2D4 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2D7 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2DA DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2DD DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2E0 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2E3 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2E6 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2E9 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2EC DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2EF DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2F2 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2F5 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2F8 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2FB DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D2FE DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D301 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D304 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D307 DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).
 $D30A DEFB $00,$00,$00 ; ##N($01+(#PC-$D2BF)/$03).

; Table: Projectiles
@label=Table_Projectiles
b$D30D DEFB $00,$00,$00 ; ##N($01+(#PC-$D30D)/$03).
 $D310 DEFB $00,$00,$00 ; ##N($01+(#PC-$D30D)/$03).
 $D313 DEFB $00,$00,$00 ; ##N($01+(#PC-$D30D)/$03).
 $D316 DEFB $00,$00,$00 ; ##N($01+(#PC-$D30D)/$03).
 $D319 DEFB $00,$00,$00 ; ##N($01+(#PC-$D30D)/$03).
 $D31C DEFB $00,$00,$00 ; ##N($01+(#PC-$D30D)/$03).

; Data block at D31F
b$D31F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D327 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D32F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D337 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D33F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D347 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D34F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D357 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D35F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D367 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D36F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D377 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D37F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D387 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D38F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $D397 DEFB $00,$00,$00,$00,$00,$00,$00,$00

; Table: Buildings
@label=Table_Buildings
b$D39F DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $D3AD DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $D3BB DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $D3C9 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $D3D7 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00
 $D3E5 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00

; Number Of Buildings Remaining
;
; Number of buildings remaining standing on the current level.
@label=BuildingsRemainingCount
g$D3F3 DEFB $00

; Data block at D3F4
b$D3F4 DEFB $00

; Active Helicopter Count
@label=NumberActiveHelicopters
g$D3F5 DEFB $00

; On-Screen Helicopter Count
@label=NumberOnScreenHelicopters
g$D3F6 DEFB $00

; Data block at D3F7
b$D3F7 DEFB $00

; Data block at D3F8
b$D3F8 DEFB $00

; Data block at D3F9
b$D3F9 DEFB $00

; Data block at D3FA
b$D3FA DEFB $00
 $D3FB DEFB $00
 $D3FC DEFB $00

; Game State
;
; #TABLE(default,centre,centre)
; { =h Value | =h Meaning }
; { #N$00 | In-Play }
; { #N$01 | Game Over }
; TABLE#
@label=Game_State
g$D3FD DEFB $00

; Scene Carpet
;
; Is it carpet? Awning? Unsure...
; #TABLE(default,centre,centre)
; { =h Value | =h Meaning }
; { #N$00 | No carpet }
; { #N$01 | Carpet }
; TABLE#
@label=Scene_Carpet
g$D3FE DEFB $00

; Game status buffer entry at D3FF
g$D3FF DEFB $00

; Scene Type
@label=Scene_Type
g$D400 DEFB $00

; Table: Vehicle
;
; .
;
; .
;
; See #R$FC39.
@label=VehicleCounter
b$D401 DEFB $00      ; #TABLE(default,centre,centre) { =h Value | =h Meaning }
                     ; { #N$00-#N$18 | Countdown until spawn }
                     ; { #N$FE | Spawning "off" }
                     ; { #N$FF | Vehicle is spawned }
                     ; TABLE#
@label=VehicleType
 $D402 DEFB $00      ; #TABLE(default,centre,centre) { =h Value | =h Vehicle }
                     ; { #N$00 | Tank }
                     ; { #N$01 | Car }
                     ; { #N$02 | Police car }
                     ; { #N$03 | Destroyed }
                     ; TABLE#
@label=VehicleXPosition
 $D403 DEFB $00      ; Vehicle horizontal position on the screen.
@label=VehicleYPosition
 $D404 DEFB $00      ; Vehicle vertical position on the screen.

; Table: Train
;
; .
;
; .
;
; See #R$FCB6.
@label=TrainState
b$D405 DEFB $00      ; #TABLE(default,centre,centre) { =h Value | =h Meaning }
                     ; { #N$00-#N$20 | Countdown until spawn }
                     ; { #N$FE | Spawning "off" }
                     ; { #N$FF | Train is spawned }
                     ; TABLE#
@label=TrainXPosition
 $D406 DEFB $00      ; Train horizontal position on the screen.
@label=TrainYPosition
 $D407 DEFB $00      ; Train vertical position on the screen.

; Data block at D408
b$D408 DEFB $00

; Write Scene To Shadow Buffer
;
; Used by the routines at #R$DE77, #R$F916 and #R$FD64.
@label=WriteSceneToShadowBuffer
c$D409 LD BC,$0000   ; #REGbc=#N($0000,$04,$04).
; Self-modifying code. These lines populate the value for a LoaD command below. The values relate to areas of the
;       shadow screen buffer: #LIST { #R$6B00(#N$6B00) } { #R$7300 } { #R$7B00 } LIST#
 $D40C LD A,$6B      ; {Write #N$6B to: #LIST { *#R$D474(#N$D475) } {
 $D40E LD ($D475),A  ; *#R$D4B5(#N$D4B6) } LIST#
 $D411 LD ($D4B6),A  ; }
 $D414 CALL $D42A    ; Call #R$D42A.
 $D417 LD A,$73      ; {Write #N$73 to: #LIST { *#R$D474(#N$D475) } {
 $D419 LD ($D475),A  ; *#R$D4B5(#N$D4B6) } LIST#
 $D41C LD ($D4B6),A  ; }
 $D41F CALL $D42A    ; Call #R$D42A.
 $D422 LD A,$7B      ; {Write #N$7B to: #LIST { *#R$D474(#N$D475) } {
 $D424 LD ($D475),A  ; *#R$D4B5(#N$D4B6) } LIST#
 $D427 LD ($D4B6),A  ; }
@label=WriteSceneToShadowBuffer_Loop_1
*$D42A LD A,$89      ; #REGa=#N$89.
 $D42C EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D42D LD A,B        ; #REGa=#REGb.
 $D42E ADD A,$68     ; #REGa+=#N$68.
 $D430 LD H,A        ; #REGh=#REGa.
 $D431 LD L,C        ; #REGl=#REGc.
 $D432 LD D,$00      ; #REGd=#N$00.
 $D434 LD A,(HL)     ; {Jump to #R$D494 if *#REGhl is zero.
 $D435 AND A         ;
 $D436 JP Z,$D494    ; }
 $D439 LD (HL),D     ; Write #REGd to *#REGhl.
 $D43A LD A,$60      ; {Write #N$60 to *#R$D220.
 $D43C LD ($D220),A  ; }
 $D43F DEC H         ; {Decrease #REGh by three.
 $D440 DEC H         ;
 $D441 DEC H         ; }
 $D442 LD A,(HL)     ; {Jump to #R$D45F if *#REGhl is not zero.
 $D443 AND A         ;
 $D444 JP NZ,$D45F   ; }
 $D447 LD A,$20      ; {Write #N$20 to *#R$D220.
 $D449 LD ($D220),A  ; }
 $D44C DEC H         ; {Decrease #REGh by three.
 $D44D DEC H         ;
 $D44E DEC H         ; }
 $D44F LD A,(HL)     ; {Jump to #R$D45F if *#REGhl is not zero.
 $D450 AND A         ;
 $D451 JP NZ,$D45F   ; }
 $D454 XOR A         ; {Write #N$00 to *#R$D220.
 $D455 LD ($D220),A  ; }
 $D458 DEC H         ; {Decrease #REGh by three.
 $D459 DEC H         ;
 $D45A DEC H         ; }
 $D45B LD A,$86      ; #REGa=#N$86.
 $D45D EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D45E LD A,(HL)     ; #REGa=*#REGhl.
@label=WriteSceneToShadowBuffer_Loop_2
*$D45F AND %01111111 ; Keep only bits 0-6.
 $D461 LD E,A        ; #REGe=#REGa.
 $D462 LD A,(HL)     ; #REGa=*#REGhl.
 $D463 LD ($D222),A  ; Write #REGa to *#R$D222.
 $D466 LD H,D        ; #REGh=#REGd.
 $D467 LD L,E        ; #REGl=#REGe.
 $D468 ADD HL,HL     ; {#REGhl*=#N$08+#REGde.
 $D469 ADD HL,HL     ;
 $D46A ADD HL,HL     ;
 $D46B ADD HL,DE     ; }
 $D46C CP $80        ; {Jump to #R$D49A if #REGa is higher than #N$80.
 $D46E JP NC,$D49A   ; }
 $D471 CALL $D4E8    ; Call #R$D4E8.
; The value here is self-modified at:
; #TABLE(default,centre,centre) { =h Location | =h Value Set }
; { #R$D40C | #N$6B } { #R$D417 | #N$73 } { #R$D422 | #N$7B }
; TABLE#
 $D474 LD D,$00      ; #REGd=#N$00 (as above).
 $D476 LD A,(HL)     ; #REGa=*#REGhl.
 $D477 LD (DE),A     ; Write #REGa to *#REGde.
 $D478 INC HL        ; Increment #REGhl by one.
 $D479 INC D         ; Increment #REGd by one.
 $D47A LD A,(HL)     ; #REGa=*#REGhl.
 $D47B LD (DE),A     ; Write #REGa to *#REGde.
 $D47C INC HL        ; Increment #REGhl by one.
 $D47D INC D         ; Increment #REGd by one.
 $D47E LD A,(HL)     ; #REGa=*#REGhl.
 $D47F LD (DE),A     ; Write #REGa to *#REGde.
 $D480 INC HL        ; Increment #REGhl by one.
 $D481 INC D         ; Increment #REGd by one.
 $D482 LD A,(HL)     ; #REGa=*#REGhl.
 $D483 LD (DE),A     ; Write #REGa to *#REGde.
 $D484 INC HL        ; Increment #REGhl by one.
 $D485 INC D         ; Increment #REGd by one.
 $D486 LD A,(HL)     ; #REGa=*#REGhl.
 $D487 LD (DE),A     ; Write #REGa to *#REGde.
 $D488 INC HL        ; Increment #REGhl by one.
 $D489 INC D         ; Increment #REGd by one.
 $D48A LD A,(HL)     ; #REGa=*#REGhl.
 $D48B LD (DE),A     ; Write #REGa to *#REGde.
 $D48C INC HL        ; Increment #REGhl by one.
 $D48D INC D         ; Increment #REGd by one.
 $D48E LD A,(HL)     ; #REGa=*#REGhl.
 $D48F LD (DE),A     ; Write #REGa to *#REGde.
 $D490 INC HL        ; Increment #REGhl by one.
 $D491 INC D         ; Increment #REGd by one.
 $D492 LD A,(HL)     ; #REGa=*#REGhl.
 $D493 LD (DE),A     ; Write #REGa to *#REGde.
@label=WriteSceneToShadowBuffer_Loop_3
*$D494 INC C         ; Increment #REGc by one.
 $D495 JP NZ,$D42A   ; Jump to #R$D42A if {} is not zero.
 $D498 INC B         ; Increment #REGb by one.
 $D499 RET           ; Return.
*$D49A CALL $D4E8    ; Call #R$D4E8.
 $D49D PUSH BC       ; Stash #REGbc on the stack.
 $D49E LD A,C        ; #REGa=#REGc.
 $D49F EXX           ; Switch to the shadow registers.
 $D4A0 LD C,A        ; #REGc=#REGa.
 $D4A1 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D4A2 XOR C         ; Reset the bits from #REGc.
 $D4A3 AND %00000011 ; Keep only bits 0-1.
 $D4A5 LD C,A        ; #REGc=#REGa.
 $D4A6 ADD A,A       ; {#REGa*=#N$08+#REGc.
 $D4A7 ADD A,A       ;
 $D4A8 ADD A,A       ;
 $D4A9 ADD A,C       ; }
 $D4AA LD B,$00      ; #REGb=#N$00.
 $D4AC LD C,A        ; #REGc=#REGa.
 $D4AD LD HL,$8B40   ; #REGhl=#R$8B40.
 $D4B0 ADD HL,BC     ; #REGhl+=#REGbc.
 $D4B1 INC L         ; Increment #REGl by one.
 $D4B2 PUSH HL       ; Stash #REGhl on the stack.
 $D4B3 EXX           ; Switch back to the normal registers.
 $D4B4 POP BC        ; Restore #REGbc from the stack.
; The value here is self-modified at:
; #TABLE(default,centre,centre) { =h Location | =h Value Set }
; { #R$D40C | #N$6B } { #R$D417 | #N$73 } { #R$D422 | #N$7B }
; TABLE#
 $D4B5 LD D,$00      ; #REGd=#N$00 (as above).
 $D4B7 LD A,(BC)     ; #REGa=*#REGbc.
 $D4B8 OR (HL)       ; Set the bits from *#REGhl.
 $D4B9 LD (DE),A     ; Write #REGa to *#REGde.
 $D4BA INC HL        ; Increment #REGhl by one.
 $D4BB INC BC        ; Increment #REGbc by one.
 $D4BC INC D         ; Increment #REGd by one.
 $D4BD LD A,(BC)     ; #REGa=*#REGbc.
 $D4BE OR (HL)       ; Set the bits from *#REGhl.
 $D4BF LD (DE),A     ; Write #REGa to *#REGde.
 $D4C0 INC HL        ; Increment #REGhl by one.
 $D4C1 INC BC        ; Increment #REGbc by one.
 $D4C2 INC D         ; Increment #REGd by one.
 $D4C3 LD A,(BC)     ; #REGa=*#REGbc.
 $D4C4 OR (HL)       ; Set the bits from *#REGhl.
 $D4C5 LD (DE),A     ; Write #REGa to *#REGde.
 $D4C6 INC HL        ; Increment #REGhl by one.
 $D4C7 INC BC        ; Increment #REGbc by one.
 $D4C8 INC D         ; Increment #REGd by one.
 $D4C9 LD A,(BC)     ; #REGa=*#REGbc.
 $D4CA OR (HL)       ; Set the bits from *#REGhl.
 $D4CB LD (DE),A     ; Write #REGa to *#REGde.
 $D4CC INC HL        ; Increment #REGhl by one.
 $D4CD INC BC        ; Increment #REGbc by one.
 $D4CE INC D         ; Increment #REGd by one.
 $D4CF LD A,(BC)     ; #REGa=*#REGbc.
 $D4D0 OR (HL)       ; Set the bits from *#REGhl.
 $D4D1 LD (DE),A     ; Write #REGa to *#REGde.
 $D4D2 INC HL        ; Increment #REGhl by one.
 $D4D3 INC BC        ; Increment #REGbc by one.
 $D4D4 INC D         ; Increment #REGd by one.
 $D4D5 LD A,(BC)     ; #REGa=*#REGbc.
 $D4D6 OR (HL)       ; Set the bits from *#REGhl.
 $D4D7 LD (DE),A     ; Write #REGa to *#REGde.
 $D4D8 INC HL        ; Increment #REGhl by one.
 $D4D9 INC BC        ; Increment #REGbc by one.
 $D4DA INC D         ; Increment #REGd by one.
 $D4DB LD A,(BC)     ; #REGa=*#REGbc.
 $D4DC OR (HL)       ; Set the bits from *#REGhl.
 $D4DD LD (DE),A     ; Write #REGa to *#REGde.
 $D4DE INC HL        ; Increment #REGhl by one.
 $D4DF INC BC        ; Increment #REGbc by one.
 $D4E0 INC D         ; Increment #REGd by one.
 $D4E1 LD A,(BC)     ; #REGa=*#REGbc.
 $D4E2 OR (HL)       ; Set the bits from *#REGhl.
 $D4E3 LD (DE),A     ; Write #REGa to *#REGde.
 $D4E4 POP BC        ; Restore #REGbc from the stack.
 $D4E5 JP $D494      ; Jump to #R$D494.

; Routine at D4E8
;
; Used by the routine at #R$D409.
c$D4E8 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D4E9 ADD A,H       ; #REGa+=#REGh.
 $D4EA LD H,A        ; #REGh=#REGa.
 $D4EB LD A,B        ; #REGa=#REGb.
 $D4EC ADD A,$83     ; #REGa+=#N$83.
 $D4EE LD D,A        ; #REGd=#REGa.
 $D4EF LD E,C        ; #REGe=#REGc.
 $D4F0 LD A,($D220)  ; {#REGa=*#R$D220.
 $D4F3 AND A         ; }
 $D4F4 LD A,(HL)     ; #REGa=*#REGhl.
 $D4F5 JR Z,$D509    ; Jump to #R$D509 if *#R$D220 is zero.
 $D4F7 LD A,C        ; #REGa=#REGc.
 $D4F8 AND %00011111 ; Keep only bits 0-4.
 $D4FA EXX           ; Switch to the shadow registers.
 $D4FB LD C,A        ; #REGc=#REGa.
 $D4FC LD B,$00      ; #REGb=#N$00.
 $D4FE LD HL,$D31F   ; #REGhl=#R$D31F.
 $D501 ADD HL,BC     ; #REGhl+=#REGbc.
 $D502 LD A,($D220)  ; {#REGc=*#R$D220.
 $D505 LD C,A        ; }
 $D506 ADD HL,BC     ; #REGhl+=#REGbc.
 $D507 LD A,(HL)     ; #REGa=*#REGhl.
 $D508 EXX           ; Switch back to the normal registers.
*$D509 LD (DE),A     ; Write #REGa to *#REGde.
 $D50A INC HL        ; Increment #REGhl by one.
 $D50B RET           ; Return.

; Routine at D50C
;
; Used by the routine at #R$DF90.
c$D50C OR A          ; Set zero flag based on #REGa.
 $D50D SLA A         ; Shift #REGa left (with carry).
 $D50F LD L,A        ; Store the result in #REGl.
 $D510 RLA           ; Rotate #REGa left (bit 7 is moved to bit 0).
 $D511 AND %00000001 ; Keep only bit 0.
 $D513 LD H,A        ; #REGh=#REGa.
 $D514 LD DE,$C700   ; #REGde=#R$C700.
 $D517 ADD HL,DE     ; #REGhl+=#REGde.
 $D518 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D519 LD BC,$0020   ; #REGbc=#N($0020,$04,$04).
 $D51C LD HL,$6140   ; #REGhl=#R$6140.
*$D51F PUSH HL       ; {Stash #REGhl and #REGde on the stack.
 $D520 PUSH DE       ; }
 $D521 LD A,(DE)     ; #REGa=*#REGde.
 $D522 DEC A         ; Decrease #REGa by one.
 $D523 INC DE        ; Increment #REGde by one.
 $D524 OR A          ; Set the bits from #REGa.
*$D525 LD (HL),$01   ; Write #N$01 to *#REGhl.
 $D527 SBC HL,BC     ; #REGhl-=#REGbc.
 $D529 DEC A         ; Decrease #REGa by one.
 $D52A JR NZ,$D525   ; Jump to #R$D525 until #REGa is zero.
 $D52C LD A,(DE)     ; {Jump to #R$D550 if *#REGde is zero.
 $D52D AND A         ;
 $D52E JR Z,$D550    ; }
 $D530 PUSH HL       ; Stash #REGhl on the stack.
 $D531 LD HL,$C800   ; #REGhl=#R$C800.
 $D534 LD E,A        ; #REGe=#REGa.
*$D535 LD A,(HL)     ; #REGa=*#REGhl.
 $D536 INC HL        ; Increment #REGhl by one.
 $D537 CP $80        ; {Jump to #R$D535 if #REGa is lower than #N$80.
 $D539 JP C,$D535    ; }
 $D53C DEC E         ; Decrease #REGe by one.
 $D53D JP NZ,$D535   ; Jump to #R$D535 until #REGe is zero.
 $D540 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D541 POP HL        ; Restore #REGhl from the stack.
*$D542 LD A,(DE)     ; #REGa=*#REGde.
 $D543 AND %01111111 ; Keep only bits 0-6.
 $D545 LD (HL),A     ; Write #REGa to *#REGhl.
 $D546 LD A,(DE)     ; #REGa=*#REGde.
 $D547 BIT 7,A       ; {Jump to #R$D550 if bit 7 of #REGa is set.
 $D549 JR NZ,$D550   ; }
 $D54B SBC HL,BC     ; #REGhl-=#REGbc.
 $D54D INC DE        ; Increment #REGde by one.
 $D54E JR $D542      ; Jump to #R$D542.
*$D550 POP DE        ; {Restore #REGde and #REGhl from the stack.
 $D551 POP HL        ; }
 $D552 INC HL        ; Increment #REGhl by one.
 $D553 INC DE        ; {Increment #REGde by two.
 $D554 INC DE        ; }
 $D555 LD A,L        ; {Jump to #R$D51F if #REGl is not equal to #N$60.
 $D556 CP $60        ;
 $D558 JR NZ,$D51F   ; }
 $D55A RET           ; Return.

; Routine at D55B
;
; Used by the routine at #R$DF90.
c$D55B LD HL,$C7C0   ; #REGhl=#R$C7C0.
 $D55E LD D,$00      ; #REGd=#N$00.
 $D560 LD E,A        ; #REGe=#REGa.
 $D561 ADD HL,DE     ; #REGhl+=#REGde.
 $D562 LD DE,$6140   ; #REGde=#R$6140.
 $D565 LD B,$10      ; #REGb=#N$10.
*$D567 PUSH HL       ; {Stash #REGhl and #REGde on the stack.
 $D568 PUSH DE       ; }
 $D569 LD A,(HL)     ; #REGa=*#REGhl.
 $D56A DEC A         ; Decrease #REGa by one.
 $D56B LD E,A        ; #REGe=#REGa.
 $D56C ADD A,A       ; #REGa+=#REGa.
 $D56D ADD A,E       ; #REGa+=#REGe.
 $D56E ADD A,A       ; #REGa+=#REGa.
 $D56F LD E,A        ; #REGe=#REGa.
 $D570 LD D,$00      ; #REGd=#N$00.
 $D572 LD HL,$C81A   ; #REGhl=#R$C81A.
 $D575 ADD HL,DE     ; #REGhl+=#REGde.
 $D576 POP DE        ; Restore #REGde from the stack.
 $D577 PUSH DE       ; Stash #REGde on the stack.
 $D578 LD C,$03      ; #REGc=#N$03.
*$D57A LD A,(HL)     ; #REGa=*#REGhl.
 $D57B LD (DE),A     ; Write #REGa to *#REGde.
 $D57C INC HL        ; Increment #REGhl by one.
 $D57D INC DE        ; Increment #REGde by one.
 $D57E LD A,(HL)     ; #REGa=*#REGhl.
 $D57F LD (DE),A     ; Write #REGa to *#REGde.
 $D580 INC HL        ; Increment #REGhl by one.
 $D581 PUSH HL       ; Stash #REGhl on the stack.
 $D582 LD HL,$001F   ; #REGhl=#N($001F,$04,$04).
 $D585 ADD HL,DE     ; #REGhl+=#REGde.
 $D586 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D587 POP HL        ; Restore #REGhl from the stack.
 $D588 DEC C         ; Decrease #REGc by one.
 $D589 JR NZ,$D57A   ; Jump to #R$D57A until #REGc is zero.
 $D58B POP DE        ; Restore #REGde from the stack.
 $D58C INC E         ; {Increment #REGe by two.
 $D58D INC E         ; }
 $D58E POP HL        ; Restore #REGhl from the stack.
 $D58F INC HL        ; Increment #REGhl by one.
 $D590 DJNZ $D567    ; Decrease counter by one and loop back to #R$D567 until
                     ; counter is zero.
 $D592 RET           ; Return.

; Routine at D593
;
; Used by the routine at #R$DF90.
c$D593 LD E,A        ; #REGe=#REGa.
 $D594 CP $06        ; {Jump to #R$D59C if #REGa is not equal to #N$06.
 $D596 JR NZ,$D59C   ; }
 $D598 LD A,$01      ; #REGa=#N$01.
 $D59A JR $D5A5      ; Jump to #R$D5A5.
*$D59C CP $07        ; {Jump to #R$D5A4 if #REGa is not equal to #N$07.
 $D59E JR NZ,$D5A4   ; }
 $D5A0 LD A,$02      ; #REGa=#N$02.
 $D5A2 JR $D5A5      ; Jump to #R$D5A5.
*$D5A4 XOR A         ; {Write #N$00 to *#R$D3FE.
*$D5A5 LD ($D3FE),A  ; }
 $D5A8 LD A,E        ; #REGa=#REGe.
 $D5A9 DEC A         ; Decrease #REGa by one.
 $D5AA ADD A,A       ; {#REGa*=#N$04.
 $D5AB ADD A,A       ; }
 $D5AC LD E,A        ; #REGe=#REGa.
 $D5AD ADD A,E       ; #REGa+=#REGe.
 $D5AE ADD A,E       ; #REGa+=#REGe.
 $D5AF LD D,$00      ; #REGd=#N$00.
 $D5B1 LD E,A        ; #REGe=#REGa.
 $D5B2 LD HL,$C8BA   ; #REGhl=#R$C8BA.
 $D5B5 ADD HL,DE     ; #REGhl+=#REGde.
 $D5B6 LD DE,$61A0   ; #REGde=#R$61A0.
 $D5B9 LD B,$0C      ; #REGb=#N$0C.
*$D5BB PUSH HL       ; {Stash #REGhl and #REGde on the stack.
 $D5BC PUSH DE       ; }
 $D5BD LD A,(HL)     ; #REGa=*#REGhl.
 $D5BE DEC A         ; Decrease #REGa by one.
 $D5BF ADD A,A       ; {#REGa*=#N$08.
 $D5C0 ADD A,A       ;
 $D5C1 ADD A,A       ; }
 $D5C2 LD D,$00      ; #REGd=#N$00.
 $D5C4 LD E,A        ; #REGe=#REGa.
 $D5C5 LD HL,$C91A   ; #REGhl=#R$C91A.
 $D5C8 ADD HL,DE     ; #REGhl+=#REGde.
 $D5C9 POP DE        ; Restore #REGde from the stack.
 $D5CA LD C,$08      ; #REGc=#N$08.
*$D5CC LD A,(HL)     ; #REGa=*#REGhl.
 $D5CD LD (DE),A     ; Write #REGa to *#REGde.
 $D5CE INC HL        ; Increment #REGhl by one.
 $D5CF INC DE        ; Increment #REGde by one.
 $D5D0 DEC C         ; Decrease #REGc by one.
 $D5D1 JR NZ,$D5CC   ; Jump to #R$D5CC until #REGc is zero.
 $D5D3 POP HL        ; Restore #REGhl from the stack.
 $D5D4 INC HL        ; Increment #REGhl by one.
 $D5D5 DJNZ $D5BB    ; Decrease counter by one and loop back to #R$D5BB until
                     ; counter is zero.
 $D5D7 RET           ; Return.

; Clear Buffers
;
; Used by the routine at #R$FBDB.
@label=ClearBuffers
c$D5D8 LD A,$03      ; #REGa=#N$03 (counter).
@label=ClearBuffers_Loop
*$D5DA PUSH AF       ; Stash the counter on the stack.
 $D5DB CALL $D5E6    ; Call #R$D5E6.
 $D5DE POP AF        ; Restore the counter from the stack.
 $D5DF DEC A         ; Decrease the counter by one.
 $D5E0 JR NZ,$D5DA   ; Jump to #R$D5DA until the counter is zero.
 $D5E2 CALL $D5E6    ; Call #R$D5E6.
 $D5E5 RET           ; Return.
; Calculate each buffer address.
; .
; #TABLE(default,centre,centre)
; { =h Counter | =h,c2 Registers }
; { =h #REGa | =h #REGhl | =h #REGde }
; { #N$03 | #R$6800 | #N$6801 }
; { #N$02 | #R$6500 | #N$6501 }
; { #N$01 | #R$6200 | #N$6201 }
; { #N$00 | #R$5F00 | #N$5F01 }
; TABLE#
@label=ClearBuffers_Action
*$D5E6 LD H,A        ; #REGh=#REGa.
 $D5E7 ADD A,A       ; {#REGa*=#N$03+#N$5F.
 $D5E8 ADD A,H       ;
 $D5E9 ADD A,$5F     ; }
 $D5EB LD H,A        ; #REGh=#REGa.
; #REGde is the same address + #N$01.
 $D5EC LD D,A        ; #REGd=#REGa.
 $D5ED LD L,$00      ; #REGl=#N$00.
 $D5EF LD E,$01      ; #REGe=#N$01.
 $D5F1 LD (HL),L     ; Write #N$00 (from #REGl) to *#REGhl.
 $D5F2 LD BC,$02FF   ; #REGbc=#N($02FF,$04,$04).
 $D5F5 LDIR          ; Copy #N($02FF,$04,$04) bytes from #REGhl to #REGde.
 $D5F7 RET           ; Return.

; Update Attribute Buffer
;
; Used by the routines at #R$DE77, #R$F916, #R$F981, #R$F9BF, #R$FAA8 and
; #R$FD64.
@label=AttributeBuffer_Update
c$D5F8 LD HL,$8300   ; #REGhl=#R$8300.
 $D5FB LD DE,$5800   ; #REGde=#R$5800.
 $D5FE LD BC,$0300   ; #REGbc=#N$0300.
 $D601 LDIR          ; Copy attribute shadow buffer to screen attribute buffer.
 $D603 RET           ; Return.

; Update Screen Buffer
;
; Used by the routines at #R$DE77, #R$F916, #R$F981, #R$F9BF, #R$FAA8 and
; #R$FD64.
@label=ScreenBuffer_Update
c$D604 LD HL,$6B00   ; #REGhl=#R$6B00.
 $D607 LD DE,$4000   ; #REGde=#R$4000(#N$4000).
 $D60A CALL $D61C    ; Call #R$D61C.
 $D60D LD HL,$7300   ; #REGhl=#R$7300.
 $D610 LD DE,$4800   ; #REGde=#R$4800.
 $D613 CALL $D61C    ; Call #R$D61C.
 $D616 LD HL,$7B00   ; #REGhl=#R$7B00.
 $D619 LD DE,$5000   ; #REGde=#R$5000.
; This routine is called three times which correlates to the three sections of
; the screen layout.
@label=CopyShadowBufferToScreen
*$D61C PUSH HL       ; Stash the shadow buffer pointer on the stack.
 $D61D LD A,D        ; #REGa=#REGd.
 $D61E EX AF,AF'     ; Exchange #REGaf with the shadow #REGaf register.
 $D61F LD A,L        ; #REGa=#REGl.
 $D620 CALL $D688    ; Call #R$D688.
 $D623 LD E,A        ; #REGe=#REGa.
 $D624 LD L,A        ; #REGl=#REGa.
 $D625 INC D         ; Increment #REGd by one.
 $D626 INC H         ; Increment #REGh by one.
 $D627 CALL $D688    ; Call #R$D688.
 $D62A LD E,A        ; #REGe=#REGa.
 $D62B LD L,A        ; #REGl=#REGa.
 $D62C INC D         ; Increment #REGd by one.
 $D62D INC H         ; Increment #REGh by one.
 $D62E CALL $D688    ; Call #R$D688.
 $D631 LD E,A        ; #REGe=#REGa.
 $D632 LD L,A        ; #REGl=#REGa.
 $D633 INC D         ; Increment #REGd by one.
 $D634 INC H         ; Increment #REGh by one.
 $D635 CALL $D688    ; Call #R$D688.
 $D638 LD E,A        ; #REGe=#REGa.
 $D639 LD L,A        ; #REGl=#REGa.
 $D63A INC D         ; Increment #REGd by one.
 $D63B INC H         ; Increment #REGh by one.
 $D63C CALL $D688    ; Call #R$D688.
 $D63F LD E,A        ; #REGe=#REGa.
 $D640 LD L,A        ; #REGl=#REGa.
 $D641 INC D         ; Increment #REGd by one.
 $D642 INC H         ; Increment #REGh by one.
 $D643 CALL $D688    ; Call #R$D688.
 $D646 LD E,A        ; #REGe=#REGa.
 $D647 LD L,A        ; #REGl=#REGa.
 $D648 INC D         ; Increment #REGd by one.
 $D649 INC H         ; Increment #REGh by one.
 $D64A CALL $D688    ; Call #R$D688.
 $D64D LD E,A        ; #REGe=#REGa.
 $D64E LD L,A        ; #REGl=#REGa.
 $D64F INC D         ; Increment #REGd by one.
 $D650 INC H         ; Increment #REGh by one.
 $D651 CALL $D688    ; Call #R$D688.
 $D654 EX AF,AF'     ; Switch #REGaf back with the normal #REGaf register.
 $D655 LD D,A        ; #REGd=#REGa.
 $D656 POP HL        ; Restore the shadow buffer pointer from the stack.
 $D657 LD A,L        ; {#REGl+=#N$20.
 $D658 ADD A,$20     ;
 $D65A LD L,A        ; }
 $D65B LD E,A        ; #REGe=#REGa.
 $D65C CP $E0        ; {Jump to #R$D61C if #REGa is not #N$E0.
 $D65E JP NZ,$D61C   ; }
 $D661 CALL $D688    ; Call #R$D688.
 $D664 LD E,A        ; #REGe=#REGa.
 $D665 LD L,A        ; #REGl=#REGa.
 $D666 CALL $D688    ; Call #R$D688.
 $D669 LD E,A        ; #REGe=#REGa.
 $D66A LD L,A        ; #REGl=#REGa.
 $D66B CALL $D688    ; Call #R$D688.
 $D66E LD E,A        ; #REGe=#REGa.
 $D66F LD L,A        ; #REGl=#REGa.
 $D670 CALL $D688    ; Call #R$D688.
 $D673 LD E,A        ; #REGe=#REGa.
 $D674 LD L,A        ; #REGl=#REGa.
 $D675 CALL $D688    ; Call #R$D688.
 $D678 LD E,A        ; #REGe=#REGa.
 $D679 LD L,A        ; #REGl=#REGa.
 $D67A CALL $D688    ; Call #R$D688.
 $D67D LD E,A        ; #REGe=#REGa.
 $D67E LD L,A        ; #REGl=#REGa.
 $D67F CALL $D688    ; Call #R$D688.
 $D682 LD E,A        ; #REGe=#REGa.
 $D683 LD L,A        ; #REGl=#REGa.
 $D684 CALL $D688    ; Call #R$D688.
 $D687 RET           ; Return.

; Fast Copy To The Screen Buffer
;
; Used by the routine at #R$D604.
@label=Blit
c$D688 LDI           ; {Copy one line to the screen buffer.
 $D68A LDI           ;
 $D68C LDI           ;
 $D68E LDI           ;
 $D690 LDI           ;
 $D692 LDI           ;
 $D694 LDI           ;
 $D696 LDI           ;
 $D698 LDI           ;
 $D69A LDI           ;
 $D69C LDI           ;
 $D69E LDI           ;
 $D6A0 LDI           ;
 $D6A2 LDI           ;
 $D6A4 LDI           ;
 $D6A6 LDI           ;
 $D6A8 LDI           ;
 $D6AA LDI           ;
 $D6AC LDI           ;
 $D6AE LDI           ;
 $D6B0 LDI           ;
 $D6B2 LDI           ;
 $D6B4 LDI           ;
 $D6B6 LDI           ;
 $D6B8 LDI           ;
 $D6BA LDI           ;
 $D6BC LDI           ;
 $D6BE LDI           ;
 $D6C0 LDI           ;
 $D6C2 LDI           ;
 $D6C4 LDI           ;
 $D6C6 LDI           ; }
 $D6C8 RET           ; Return.

; Print Sprite
;
; Used by the routines at #R$D9BB, #R$D9C3, #R$DBE5, #R$E25D, #R$E576, #R$EED6,
; #R$EEEB, #R$EF0A, #R$F10E, #R$F69F, #R$F719, #R$F795, #R$FC1A, #R$FC39 and
; #R$FCB6.
;
; A Sprite ID
; BC Screen co-ordinates
@label=PrintSprite
c$D6C9 LD ($D214),A  ; Write #REGa to *#R$D214.
 $D6CC PUSH BC       ; Stash #REGbc on the stack.
 $D6CD CALL $D9A9    ; Call #R$D9A9.
 $D6D0 POP BC        ; Restore #REGbc from the stack.
 $D6D1 LD D,A        ; #REGd=#REGa.
 $D6D2 LD A,($D247)  ; #REGa=*#R$D247.
 $D6D5 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $D6D6 JP C,$D800    ; Jump to #R$D800 if the carry flag is set.
 $D6D9 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D6DA LD E,A        ; #REGe=#REGa.
 $D6DB LD L,C        ; #REGl=#REGc.
 $D6DC EXX           ; Switch to the shadow registers.
 $D6DD LD A,(HL)     ; #REGa=*#REGhl.
 $D6DE INC HL        ; Increment #REGhl by one.
 $D6DF LD H,(HL)     ; #REGh=*#REGhl.
 $D6E0 LD L,A        ; #REGl=#REGa.
*$D6E1 EXX           ; Switch back to the normal registers.
 $D6E2 LD A,C        ; {Jump to #R$D6FC if #REGc is not equal to #REGl.
 $D6E3 CP L          ;
 $D6E4 JP NZ,$D6FC   ; }
 $D6E7 LD A,B        ; #REGa=#REGb.
 $D6E8 AND %11111000 ; Keep only bits 3-7.
 $D6EA ADD A,$6B     ; #REGa+=#N$6B.
 $D6EC LD H,A        ; #REGh=#REGa.
 $D6ED EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D6EE LD A,B        ; #REGa=#REGb.
 $D6EF AND %00000111 ; Keep only bits 0-2.
 $D6F1 RRCA          ; {RRCA.
 $D6F2 RRCA          ;
 $D6F3 RRCA          ; }
 $D6F4 ADD A,C       ; #REGa+=#REGc.
 $D6F5 EXX           ; Switch to the shadow registers.
 $D6F6 LD C,A        ; #REGc=#REGa.
 $D6F7 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D6F8 LD B,A        ; #REGb=#REGa.
 $D6F9 JP $D700      ; Jump to #R$D700.
*$D6FC LD A,H        ; #REGa=#REGh.
 $D6FD EXX           ; Switch back to the normal registers.
 $D6FE INC C         ; Increment #REGc by one.
 $D6FF LD B,A        ; #REGb=#REGa.
*$D700 EXX           ; Switch to the shadow registers.
 $D701 LD A,C        ; #REGa=#REGc.
 $D702 CP $20        ; {Jump to #R$D7A5 if #REGa is higher than #N$20.
 $D704 JP NC,$D7A5   ; }
 $D707 LD A,B        ; #REGa=#REGb.
 $D708 CP $18        ; {Jump to #R$D7A5 if #REGa is higher than #N$18.
 $D70A JP NC,$D7A5   ; }
 $D70D EXX           ; Switch back to the normal registers.
 $D70E LD A,(HL)     ; {Jump to #R$D778 if *#REGhl is equal to #N$36.
 $D70F CP $36        ;
 $D711 JP Z,$D778    ; }
 $D714 LD A,(DE)     ; {Jump to #R$D7C7 if *#REGde is equal to #N$36.
 $D715 CP $36        ;
 $D717 JP Z,$D7C7    ; }
 $D71A INC HL        ; Increment #REGhl by one.
 $D71B INC DE        ; Increment #REGde by one.
 $D71C LD A,(BC)     ; #REGa=*#REGbc.
 $D71D AND (HL)      ; Merge the bits from *#REGhl.
 $D71E EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D71F OR (HL)       ; Set the bits from *#REGhl.
 $D720 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D721 LD (BC),A     ; Write #REGa to *#REGbc.
 $D722 INC DE        ; Increment #REGde by one.
 $D723 INC HL        ; Increment #REGhl by one.
 $D724 INC B         ; Increment #REGb by one.
 $D725 LD A,(BC)     ; #REGa=*#REGbc.
 $D726 AND (HL)      ; Merge the bits from *#REGhl.
 $D727 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D728 OR (HL)       ; Set the bits from *#REGhl.
 $D729 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D72A LD (BC),A     ; Write #REGa to *#REGbc.
 $D72B INC DE        ; Increment #REGde by one.
 $D72C INC HL        ; Increment #REGhl by one.
 $D72D INC B         ; Increment #REGb by one.
 $D72E LD A,(BC)     ; #REGa=*#REGbc.
 $D72F AND (HL)      ; Merge the bits from *#REGhl.
 $D730 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D731 OR (HL)       ; Set the bits from *#REGhl.
 $D732 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D733 LD (BC),A     ; Write #REGa to *#REGbc.
 $D734 INC DE        ; Increment #REGde by one.
 $D735 INC HL        ; Increment #REGhl by one.
 $D736 INC B         ; Increment #REGb by one.
 $D737 LD A,(BC)     ; #REGa=*#REGbc.
 $D738 AND (HL)      ; Merge the bits from *#REGhl.
 $D739 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D73A OR (HL)       ; Set the bits from *#REGhl.
 $D73B EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D73C LD (BC),A     ; Write #REGa to *#REGbc.
 $D73D INC DE        ; Increment #REGde by one.
 $D73E INC HL        ; Increment #REGhl by one.
 $D73F INC B         ; Increment #REGb by one.
 $D740 LD A,(BC)     ; #REGa=*#REGbc.
 $D741 AND (HL)      ; Merge the bits from *#REGhl.
 $D742 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D743 OR (HL)       ; Set the bits from *#REGhl.
 $D744 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D745 LD (BC),A     ; Write #REGa to *#REGbc.
 $D746 INC DE        ; Increment #REGde by one.
 $D747 INC HL        ; Increment #REGhl by one.
 $D748 INC B         ; Increment #REGb by one.
 $D749 LD A,(BC)     ; #REGa=*#REGbc.
 $D74A AND (HL)      ; Merge the bits from *#REGhl.
 $D74B EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D74C OR (HL)       ; Set the bits from *#REGhl.
 $D74D EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D74E LD (BC),A     ; Write #REGa to *#REGbc.
 $D74F INC DE        ; Increment #REGde by one.
 $D750 INC HL        ; Increment #REGhl by one.
 $D751 INC B         ; Increment #REGb by one.
 $D752 LD A,(BC)     ; #REGa=*#REGbc.
 $D753 AND (HL)      ; Merge the bits from *#REGhl.
 $D754 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D755 OR (HL)       ; Set the bits from *#REGhl.
 $D756 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D757 LD (BC),A     ; Write #REGa to *#REGbc.
 $D758 INC DE        ; Increment #REGde by one.
 $D759 INC HL        ; Increment #REGhl by one.
 $D75A INC B         ; Increment #REGb by one.
 $D75B LD A,(BC)     ; #REGa=*#REGbc.
 $D75C AND (HL)      ; Merge the bits from *#REGhl.
 $D75D EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D75E OR (HL)       ; Set the bits from *#REGhl.
 $D75F EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $D760 LD (BC),A     ; Write #REGa to *#REGbc.
 $D761 CALL $D986    ; Call #R$D986.
*$D764 INC DE        ; Increment #REGde by one.
 $D765 INC HL        ; Increment #REGhl by one.
*$D766 EXX           ; Switch to the shadow registers.
 $D767 INC C         ; Increment #REGc by one.
 $D768 LD A,E        ; {Compare #REGe with #REGc...
 $D769 CP C          ; }
 $D76A EXX           ; Switch back to the normal registers.
 $D76B JP NZ,$D6E1   ; Jump to #R$D6E1 if #REGe is not equal to #REGc on line
                     ; #R$D768.
 $D76E EXX           ; Switch to the shadow registers.
 $D76F LD C,L        ; #REGc=#REGl.
 $D770 INC B         ; Increment #REGb by one.
 $D771 LD A,D        ; {Compare #REGd with #REGb...
 $D772 CP B          ; }
 $D773 EXX           ; Switch back to the normal registers.
 $D774 JP NZ,$D6E1   ; Jump to #R$D6E1 if #REGd is not equal to #REGb on line
                     ; #R$D771.
 $D777 RET           ; Return.
*$D778 LD A,(DE)     ; {Jump to #R$D764 if *#REGde is equal to #N$36.
 $D779 CP $36        ;
 $D77B JP Z,$D764    ; }
 $D77E INC DE        ; Increment #REGde by one.
 $D77F INC HL        ; Increment #REGhl by one.
 $D780 LD A,(DE)     ; #REGa=*#REGde.
 $D781 LD (BC),A     ; Write #REGa to *#REGbc.
 $D782 INC DE        ; Increment #REGde by one.
 $D783 INC B         ; Increment #REGb by one.
 $D784 LD A,(DE)     ; #REGa=*#REGde.
 $D785 LD (BC),A     ; Write #REGa to *#REGbc.
 $D786 INC DE        ; Increment #REGde by one.
 $D787 INC B         ; Increment #REGb by one.
 $D788 LD A,(DE)     ; #REGa=*#REGde.
 $D789 LD (BC),A     ; Write #REGa to *#REGbc.
 $D78A INC DE        ; Increment #REGde by one.
 $D78B INC B         ; Increment #REGb by one.
 $D78C LD A,(DE)     ; #REGa=*#REGde.
 $D78D LD (BC),A     ; Write #REGa to *#REGbc.
 $D78E INC DE        ; Increment #REGde by one.
 $D78F INC B         ; Increment #REGb by one.
 $D790 LD A,(DE)     ; #REGa=*#REGde.
 $D791 LD (BC),A     ; Write #REGa to *#REGbc.
 $D792 INC DE        ; Increment #REGde by one.
 $D793 INC B         ; Increment #REGb by one.
 $D794 LD A,(DE)     ; #REGa=*#REGde.
 $D795 LD (BC),A     ; Write #REGa to *#REGbc.
 $D796 INC DE        ; Increment #REGde by one.
 $D797 INC B         ; Increment #REGb by one.
 $D798 LD A,(DE)     ; #REGa=*#REGde.
 $D799 LD (BC),A     ; Write #REGa to *#REGbc.
 $D79A INC DE        ; Increment #REGde by one.
 $D79B INC B         ; Increment #REGb by one.
 $D79C LD A,(DE)     ; #REGa=*#REGde.
 $D79D LD (BC),A     ; Write #REGa to *#REGbc.
 $D79E INC DE        ; Increment #REGde by one.
 $D79F CALL $D986    ; Call #R$D986.
 $D7A2 JP $D766      ; Jump to #R$D766.
*$D7A5 EXX           ; Switch to the shadow registers.
 $D7A6 LD A,(DE)     ; #REGa=*#REGde.
 $D7A7 INC DE        ; Increment #REGde by one.
 $D7A8 CP $36        ; {Jump to #R$D7B5 if #REGa is equal to #N$36.
 $D7AA JP Z,$D7B5    ; }
 $D7AD INC DE        ; {Increment #REGde by eight.
 $D7AE INC DE        ;
 $D7AF INC DE        ;
 $D7B0 INC DE        ;
 $D7B1 INC DE        ;
 $D7B2 INC DE        ;
 $D7B3 INC DE        ;
 $D7B4 INC DE        ; }
*$D7B5 LD A,(HL)     ; #REGa=*#REGhl.
 $D7B6 INC HL        ; Increment #REGhl by one.
 $D7B7 CP $36        ; {Jump to #R$D766 if #REGa is equal to #N$36.
 $D7B9 JP Z,$D766    ; }
 $D7BC INC HL        ; {Increment #REGhl by eight.
 $D7BD INC HL        ;
 $D7BE INC HL        ;
 $D7BF INC HL        ;
 $D7C0 INC HL        ;
 $D7C1 INC HL        ;
 $D7C2 INC HL        ;
 $D7C3 INC HL        ; }
 $D7C4 JP $D766      ; Jump to #R$D766.
*$D7C7 INC DE        ; Increment #REGde by one.
 $D7C8 INC HL        ; Increment #REGhl by one.
 $D7C9 LD A,(BC)     ; #REGa=*#REGbc.
 $D7CA AND (HL)      ; Merge the bits from *#REGhl.
 $D7CB LD (BC),A     ; Write #REGa to *#REGbc.
 $D7CC INC HL        ; Increment #REGhl by one.
 $D7CD INC B         ; Increment #REGb by one.
 $D7CE LD A,(BC)     ; #REGa=*#REGbc.
 $D7CF AND (HL)      ; Merge the bits from *#REGhl.
 $D7D0 LD (BC),A     ; Write #REGa to *#REGbc.
 $D7D1 INC HL        ; Increment #REGhl by one.
 $D7D2 INC B         ; Increment #REGb by one.
 $D7D3 LD A,(BC)     ; #REGa=*#REGbc.
 $D7D4 AND (HL)      ; Merge the bits from *#REGhl.
 $D7D5 LD (BC),A     ; Write #REGa to *#REGbc.
 $D7D6 INC HL        ; Increment #REGhl by one.
 $D7D7 INC B         ; Increment #REGb by one.
 $D7D8 LD A,(BC)     ; #REGa=*#REGbc.
 $D7D9 AND (HL)      ; Merge the bits from *#REGhl.
 $D7DA LD (BC),A     ; Write #REGa to *#REGbc.
 $D7DB INC HL        ; Increment #REGhl by one.
 $D7DC INC B         ; Increment #REGb by one.
 $D7DD LD A,(BC)     ; #REGa=*#REGbc.
 $D7DE AND (HL)      ; Merge the bits from *#REGhl.
 $D7DF LD (BC),A     ; Write #REGa to *#REGbc.
 $D7E0 INC HL        ; Increment #REGhl by one.
 $D7E1 INC B         ; Increment #REGb by one.
 $D7E2 LD A,(BC)     ; #REGa=*#REGbc.
 $D7E3 AND (HL)      ; Merge the bits from *#REGhl.
 $D7E4 LD (BC),A     ; Write #REGa to *#REGbc.
 $D7E5 INC HL        ; Increment #REGhl by one.
 $D7E6 INC B         ; Increment #REGb by one.
 $D7E7 LD A,(BC)     ; #REGa=*#REGbc.
 $D7E8 AND (HL)      ; Merge the bits from *#REGhl.
 $D7E9 LD (BC),A     ; Write #REGa to *#REGbc.
 $D7EA INC HL        ; Increment #REGhl by one.
 $D7EB INC B         ; Increment #REGb by one.
 $D7EC LD A,(BC)     ; #REGa=*#REGbc.
 $D7ED AND (HL)      ; Merge the bits from *#REGhl.
 $D7EE LD (BC),A     ; Write #REGa to *#REGbc.
 $D7EF INC HL        ; Increment #REGhl by one.
 $D7F0 CALL $D986    ; Call #R$D986.
 $D7F3 JP $D766      ; Jump to #R$D766.

; Routine at D7F6
;
; Used by the routines at #R$E25D, #R$FC1A and #R$FCB6.
c$D7F6 LD ($D214),A  ; Write #REGa to #R$D214.
 $D7F9 DEC C         ; Decrease #REGc by one.
 $D7FA PUSH BC       ; Stash #REGbc on the stack.
 $D7FB CALL $D9A9    ; Call #R$D9A9.
 $D7FE POP BC        ; Restore #REGbc from the stack.
 $D7FF LD D,A        ; #REGd=#REGa.
; This entry point is used by the routine at #R$D6C9.
*$D800 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D801 LD L,A        ; #REGl=#REGa.
 $D802 LD E,C        ; #REGe=#REGc.
 $D803 LD C,A        ; #REGc=#REGa.
 $D804 EXX           ; Switch to the shadow registers.
 $D805 LD A,(HL)     ; #REGa=*#REGhl.
 $D806 INC HL        ; Increment #REGhl by one.
 $D807 LD H,(HL)     ; #REGh=*#REGhl.
 $D808 LD L,A        ; #REGl=#REGa.
*$D809 EXX           ; Switch to the shadow registers.
 $D80A LD A,C        ; {Jump to #R$D824 if #REGc is not equal to #REGl.
 $D80B CP L          ;
 $D80C JP NZ,$D824   ; }
 $D80F LD A,B        ; #REGa=#REGb.
 $D810 AND %11111000 ; Keep only bits 3-7.
 $D812 ADD A,$6B     ; #REGa+=#N$6B.
 $D814 LD H,A        ; #REGh=#REGa.
 $D815 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D816 LD A,B        ; #REGa=#REGb.
 $D817 AND %00000111 ; Keep only bits 0-2.
 $D819 RRCA          ; {RRCA.
 $D81A RRCA          ;
 $D81B RRCA          ; }
 $D81C ADD A,C       ; #REGa+=#REGc.
 $D81D EXX           ; Switch to the shadow registers.
 $D81E LD C,A        ; #REGc=#REGa.
 $D81F EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D820 LD B,A        ; #REGb=#REGa.
 $D821 JP $D828      ; Jump to #R$D828.
*$D824 LD A,H        ; #REGa=#REGh.
 $D825 EXX           ; Switch to the shadow registers.
 $D826 DEC C         ; Decrease #REGc by one.
 $D827 LD B,A        ; #REGb=#REGa.
*$D828 EXX           ; Switch to the shadow registers.
 $D829 LD A,C        ; {Jump to #R$D8D8 if #REGc is higher than #N$20.
 $D82A CP $20        ;
 $D82C JP NC,$D8D8   ; }
 $D82F LD A,B        ; {Jump to #R$D8D8 if #REGb is higher than #N$18.
 $D830 CP $18        ;
 $D832 JP NC,$D8D8   ; }
 $D835 EXX           ; Switch to the shadow registers.
 $D836 LD A,(HL)     ; {Jump to #R$D8FA if *#REGhl is equal to #N$36.
 $D837 CP $36        ;
 $D839 JP Z,$D8FA    ; }
 $D83C LD A,(DE)     ; {Jump to #R$D93B if *#REGde is equal to #N$36.
 $D83D CP $36        ;
 $D83F JP Z,$D93B    ; }
 $D842 INC HL        ; Increment #REGhl by one.
 $D843 INC DE        ; Increment #REGde by one.
 $D844 PUSH HL       ; Stash #REGhl on the stack.
 $D845 LD A,(BC)     ; #REGa=*#REGbc.
 $D846 LD L,(HL)     ; #REGl=*#REGhl.
 $D847 LD H,$C6      ; #REGh=#N$C6.
 $D849 AND (HL)      ; Merge the bits from *#REGhl.
 $D84A EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D84B LD A,(DE)     ; #REGa=*#REGde.
 $D84C LD L,A        ; #REGl=#REGa.
 $D84D EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D84E OR (HL)       ; Set the bits from *#REGhl.
 $D84F LD (BC),A     ; Write #REGa to *#REGbc.
 $D850 POP HL        ; Restore #REGhl from the stack.
 $D851 INC DE        ; Increment #REGde by one.
 $D852 INC HL        ; Increment #REGhl by one.
 $D853 INC B         ; Increment #REGb by one.
 $D854 PUSH HL       ; Stash #REGhl on the stack.
 $D855 LD A,(BC)     ; #REGa=*#REGbc.
 $D856 LD L,(HL)     ; #REGl=*#REGhl.
 $D857 LD H,$C6      ; #REGh=#N$C6.
 $D859 AND (HL)      ; Merge the bits from *#REGhl.
 $D85A EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D85B LD A,(DE)     ; #REGa=*#REGde.
 $D85C LD L,A        ; #REGl=#REGa.
 $D85D EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D85E OR (HL)       ; Set the bits from *#REGhl.
 $D85F LD (BC),A     ; Write #REGa to *#REGbc.
 $D860 POP HL        ; Restore #REGhl from the stack.
 $D861 INC DE        ; Increment #REGde by one.
 $D862 INC HL        ; Increment #REGhl by one.
 $D863 INC B         ; Increment #REGb by one.
 $D864 PUSH HL       ; Stash #REGhl on the stack.
 $D865 LD A,(BC)     ; #REGa=*#REGbc.
 $D866 LD L,(HL)     ; #REGl=*#REGhl.
 $D867 LD H,$C6      ; #REGh=#N$C6.
 $D869 AND (HL)      ; Merge the bits from *#REGhl.
 $D86A EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D86B LD A,(DE)     ; #REGa=*#REGde.
 $D86C LD L,A        ; #REGl=#REGa.
 $D86D EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D86E OR (HL)       ; Set the bits from *#REGhl.
 $D86F LD (BC),A     ; Write #REGa to *#REGbc.
 $D870 POP HL        ; Restore #REGhl from the stack.
 $D871 INC DE        ; Increment #REGde by one.
 $D872 INC HL        ; Increment #REGhl by one.
 $D873 INC B         ; Increment #REGb by one.
 $D874 PUSH HL       ; Stash #REGhl on the stack.
 $D875 LD A,(BC)     ; #REGa=*#REGbc.
 $D876 LD L,(HL)     ; #REGl=*#REGhl.
 $D877 LD H,$C6      ; #REGh=#N$C6.
 $D879 AND (HL)      ; Merge the bits from *#REGhl.
 $D87A EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D87B LD A,(DE)     ; #REGa=*#REGde.
 $D87C LD L,A        ; #REGl=#REGa.
 $D87D EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D87E OR (HL)       ; Set the bits from *#REGhl.
 $D87F LD (BC),A     ; Write #REGa to *#REGbc.
 $D880 POP HL        ; Restore #REGhl from the stack.
 $D881 INC DE        ; Increment #REGde by one.
 $D882 INC HL        ; Increment #REGhl by one.
 $D883 INC B         ; Increment #REGb by one.
 $D884 PUSH HL       ; Stash #REGhl on the stack.
 $D885 LD A,(BC)     ; #REGa=*#REGbc.
 $D886 LD L,(HL)     ; #REGl=*#REGhl.
 $D887 LD H,$C6      ; #REGh=#N$C6.
 $D889 AND (HL)      ; Merge the bits from *#REGhl.
 $D88A EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D88B LD A,(DE)     ; #REGa=*#REGde.
 $D88C LD L,A        ; #REGl=#REGa.
 $D88D EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D88E OR (HL)       ; Set the bits from *#REGhl.
 $D88F LD (BC),A     ; Write #REGa to *#REGbc.
 $D890 POP HL        ; Restore #REGhl from the stack.
 $D891 INC DE        ; Increment #REGde by one.
 $D892 INC HL        ; Increment #REGhl by one.
 $D893 INC B         ; Increment #REGb by one.
 $D894 PUSH HL       ; Stash #REGhl on the stack.
 $D895 LD A,(BC)     ; #REGa=*#REGbc.
 $D896 LD L,(HL)     ; #REGl=*#REGhl.
 $D897 LD H,$C6      ; #REGh=#N$C6.
 $D899 AND (HL)      ; Merge the bits from *#REGhl.
 $D89A EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D89B LD A,(DE)     ; #REGa=*#REGde.
 $D89C LD L,A        ; #REGl=#REGa.
 $D89D EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D89E OR (HL)       ; Set the bits from *#REGhl.
 $D89F LD (BC),A     ; Write #REGa to *#REGbc.
 $D8A0 POP HL        ; Restore #REGhl from the stack.
 $D8A1 INC DE        ; Increment #REGde by one.
 $D8A2 INC HL        ; Increment #REGhl by one.
 $D8A3 INC B         ; Increment #REGb by one.
 $D8A4 PUSH HL       ; Stash #REGhl on the stack.
 $D8A5 LD A,(BC)     ; #REGa=*#REGbc.
 $D8A6 LD L,(HL)     ; #REGl=*#REGhl.
 $D8A7 LD H,$C6      ; #REGh=#N$C6.
 $D8A9 AND (HL)      ; Merge the bits from *#REGhl.
 $D8AA EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D8AB LD A,(DE)     ; #REGa=*#REGde.
 $D8AC LD L,A        ; #REGl=#REGa.
 $D8AD EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D8AE OR (HL)       ; Set the bits from *#REGhl.
 $D8AF LD (BC),A     ; Write #REGa to *#REGbc.
 $D8B0 POP HL        ; Restore #REGhl from the stack.
 $D8B1 INC DE        ; Increment #REGde by one.
 $D8B2 INC HL        ; Increment #REGhl by one.
 $D8B3 INC B         ; Increment #REGb by one.
 $D8B4 PUSH HL       ; Stash #REGhl on the stack.
 $D8B5 LD A,(BC)     ; #REGa=*#REGbc.
 $D8B6 LD L,(HL)     ; #REGl=*#REGhl.
 $D8B7 LD H,$C6      ; #REGh=#N$C6.
 $D8B9 AND (HL)      ; Merge the bits from *#REGhl.
 $D8BA EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D8BB LD A,(DE)     ; #REGa=*#REGde.
 $D8BC LD L,A        ; #REGl=#REGa.
 $D8BD EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D8BE OR (HL)       ; Set the bits from *#REGhl.
 $D8BF LD (BC),A     ; Write #REGa to *#REGbc.
 $D8C0 POP HL        ; Restore #REGhl from the stack.
 $D8C1 CALL $D986    ; Call #R$D986.
*$D8C4 INC DE        ; Increment #REGde by one.
 $D8C5 INC HL        ; Increment #REGhl by one.
*$D8C6 EXX           ; Switch to the shadow registers.
 $D8C7 DEC C         ; Decrease #REGc by one.
 $D8C8 LD A,E        ; {Compare #REGe with #REGc...
 $D8C9 CP C          ; }
 $D8CA EXX           ; Switch to the shadow registers.
 $D8CB JP NZ,$D809   ; Jump to #R$D809 if #REGe is not equal to #REGc on line
                     ; #R$D8C8.
 $D8CE EXX           ; Switch to the shadow registers.
 $D8CF LD C,L        ; #REGc=#REGl.
 $D8D0 INC B         ; Increment #REGb by one.
 $D8D1 LD A,D        ; {Compare #REGd with #REGb...
 $D8D2 CP B          ; }
 $D8D3 EXX           ; Switch to the shadow registers.
 $D8D4 JP NZ,$D809   ; Jump to #R$D809 if #REGd is not equal to #REGb on line
                     ; #R$D8D1.
 $D8D7 RET           ; Return.
*$D8D8 EXX           ; Switch to the shadow registers.
 $D8D9 LD A,(DE)     ; #REGa=*#REGde.
 $D8DA INC DE        ; Increment #REGde by one.
 $D8DB CP $36        ; {Jump to #R$D8E8 if #REGa is equal to #N$36.
 $D8DD JP Z,$D8E8    ; }
 $D8E0 INC DE        ; {Increment #REGde by eight.
 $D8E1 INC DE        ;
 $D8E2 INC DE        ;
 $D8E3 INC DE        ;
 $D8E4 INC DE        ;
 $D8E5 INC DE        ;
 $D8E6 INC DE        ;
 $D8E7 INC DE        ; }
*$D8E8 LD A,(HL)     ; #REGa=*#REGhl.
 $D8E9 INC HL        ; Increment #REGhl by one.
 $D8EA CP $36        ; {Jump to #R$D8C6 if #REGa is equal to #N$36.
 $D8EC JP Z,$D8C6    ; }
 $D8EF INC HL        ; {Increment #REGhl by eight.
 $D8F0 INC HL        ;
 $D8F1 INC HL        ;
 $D8F2 INC HL        ;
 $D8F3 INC HL        ;
 $D8F4 INC HL        ;
 $D8F5 INC HL        ;
 $D8F6 INC HL        ; }
 $D8F7 JP $D8C6      ; Jump to #R$D8C6.
*$D8FA LD A,(DE)     ; {Jump to #R$D8C4 if *#REGde is equal to #N$36.
 $D8FB CP $36        ;
 $D8FD JP Z,$D8C4    ; }
 $D900 INC DE        ; Increment #REGde by one.
 $D901 INC HL        ; Increment #REGhl by one.
 $D902 PUSH HL       ; Stash #REGhl on the stack.
 $D903 LD H,$C6      ; #REGh=#N$C6.
 $D905 LD A,(DE)     ; #REGa=*#REGde.
 $D906 LD L,A        ; #REGl=#REGa.
 $D907 LD A,(HL)     ; #REGa=*#REGhl.
 $D908 LD (BC),A     ; Write #REGa to *#REGbc.
 $D909 INC DE        ; Increment #REGde by one.
 $D90A INC B         ; Increment #REGb by one.
 $D90B LD A,(DE)     ; #REGa=*#REGde.
 $D90C LD L,A        ; #REGl=#REGa.
 $D90D LD A,(HL)     ; #REGa=*#REGhl.
 $D90E LD (BC),A     ; Write #REGa to *#REGbc.
 $D90F INC DE        ; Increment #REGde by one.
 $D910 INC B         ; Increment #REGb by one.
 $D911 LD A,(DE)     ; #REGa=*#REGde.
 $D912 LD L,A        ; #REGl=#REGa.
 $D913 LD A,(HL)     ; #REGa=*#REGhl.
 $D914 LD (BC),A     ; Write #REGa to *#REGbc.
 $D915 INC DE        ; Increment #REGde by one.
 $D916 INC B         ; Increment #REGb by one.
 $D917 LD A,(DE)     ; #REGa=*#REGde.
 $D918 LD L,A        ; #REGl=#REGa.
 $D919 LD A,(HL)     ; #REGa=*#REGhl.
 $D91A LD (BC),A     ; Write #REGa to *#REGbc.
 $D91B INC DE        ; Increment #REGde by one.
 $D91C INC B         ; Increment #REGb by one.
 $D91D LD A,(DE)     ; #REGa=*#REGde.
 $D91E LD L,A        ; #REGl=#REGa.
 $D91F LD A,(HL)     ; #REGa=*#REGhl.
 $D920 LD (BC),A     ; Write #REGa to *#REGbc.
 $D921 INC DE        ; Increment #REGde by one.
 $D922 INC B         ; Increment #REGb by one.
 $D923 LD A,(DE)     ; #REGa=*#REGde.
 $D924 LD L,A        ; #REGl=#REGa.
 $D925 LD A,(HL)     ; #REGa=*#REGhl.
 $D926 LD (BC),A     ; Write #REGa to *#REGbc.
 $D927 INC DE        ; Increment #REGde by one.
 $D928 INC B         ; Increment #REGb by one.
 $D929 LD A,(DE)     ; #REGa=*#REGde.
 $D92A LD L,A        ; #REGl=#REGa.
 $D92B LD A,(HL)     ; #REGa=*#REGhl.
 $D92C LD (BC),A     ; Write #REGa to *#REGbc.
 $D92D INC DE        ; Increment #REGde by one.
 $D92E INC B         ; Increment #REGb by one.
 $D92F LD A,(DE)     ; #REGa=*#REGde.
 $D930 LD L,A        ; #REGl=#REGa.
 $D931 LD A,(HL)     ; #REGa=*#REGhl.
 $D932 LD (BC),A     ; Write #REGa to *#REGbc.
 $D933 INC DE        ; Increment #REGde by one.
 $D934 POP HL        ; Restore #REGhl from the stack.
 $D935 CALL $D986    ; Call #R$D986.
 $D938 JP $D8C6      ; Jump to #R$D8C6.
*$D93B INC DE        ; Increment #REGde by one.
 $D93C INC HL        ; Increment #REGhl by one.
 $D93D PUSH DE       ; Stash #REGde on the stack.
 $D93E LD D,$C6      ; #REGd=#N$C6.
 $D940 LD E,(HL)     ; #REGe=*#REGhl.
 $D941 LD A,(DE)     ; #REGa=*#REGde.
 $D942 LD E,A        ; #REGe=#REGa.
 $D943 LD A,(BC)     ; #REGa=*#REGbc.
 $D944 AND E         ; Merge the bits from #REGe.
 $D945 LD (BC),A     ; Write #REGa to *#REGbc.
 $D946 INC HL        ; Increment #REGhl by one.
 $D947 INC B         ; Increment #REGb by one.
 $D948 LD E,(HL)     ; #REGe=*#REGhl.
 $D949 LD A,(DE)     ; #REGa=*#REGde.
 $D94A LD E,A        ; #REGe=#REGa.
 $D94B LD A,(BC)     ; #REGa=*#REGbc.
 $D94C AND E         ; Merge the bits from #REGe.
 $D94D LD (BC),A     ; Write #REGa to *#REGbc.
 $D94E INC HL        ; Increment #REGhl by one.
 $D94F INC B         ; Increment #REGb by one.
 $D950 LD E,(HL)     ; #REGe=*#REGhl.
 $D951 LD A,(DE)     ; #REGa=*#REGde.
 $D952 LD E,A        ; #REGe=#REGa.
 $D953 LD A,(BC)     ; #REGa=*#REGbc.
 $D954 AND E         ; Merge the bits from #REGe.
 $D955 LD (BC),A     ; Write #REGa to *#REGbc.
 $D956 INC HL        ; Increment #REGhl by one.
 $D957 INC B         ; Increment #REGb by one.
 $D958 LD E,(HL)     ; #REGe=*#REGhl.
 $D959 LD A,(DE)     ; #REGa=*#REGde.
 $D95A LD E,A        ; #REGe=#REGa.
 $D95B LD A,(BC)     ; #REGa=*#REGbc.
 $D95C AND E         ; Merge the bits from #REGe.
 $D95D LD (BC),A     ; Write #REGa to *#REGbc.
 $D95E INC HL        ; Increment #REGhl by one.
 $D95F INC B         ; Increment #REGb by one.
 $D960 LD E,(HL)     ; #REGe=*#REGhl.
 $D961 LD A,(DE)     ; #REGa=*#REGde.
 $D962 LD E,A        ; #REGe=#REGa.
 $D963 LD A,(BC)     ; #REGa=*#REGbc.
 $D964 AND E         ; Merge the bits from #REGe.
 $D965 LD (BC),A     ; Write #REGa to *#REGbc.
 $D966 INC HL        ; Increment #REGhl by one.
 $D967 INC B         ; Increment #REGb by one.
 $D968 LD E,(HL)     ; #REGe=*#REGhl.
 $D969 LD A,(DE)     ; #REGa=*#REGde.
 $D96A LD E,A        ; #REGe=#REGa.
 $D96B LD A,(BC)     ; #REGa=*#REGbc.
 $D96C AND E         ; Merge the bits from #REGe.
 $D96D LD (BC),A     ; Write #REGa to *#REGbc.
 $D96E INC HL        ; Increment #REGhl by one.
 $D96F INC B         ; Increment #REGb by one.
 $D970 LD E,(HL)     ; #REGe=*#REGhl.
 $D971 LD A,(DE)     ; #REGa=*#REGde.
 $D972 LD E,A        ; #REGe=#REGa.
 $D973 LD A,(BC)     ; #REGa=*#REGbc.
 $D974 AND E         ; Merge the bits from #REGe.
 $D975 LD (BC),A     ; Write #REGa to *#REGbc.
 $D976 INC HL        ; Increment #REGhl by one.
 $D977 INC B         ; Increment #REGb by one.
 $D978 LD E,(HL)     ; #REGe=*#REGhl.
 $D979 LD A,(DE)     ; #REGa=*#REGde.
 $D97A LD E,A        ; #REGe=#REGa.
 $D97B LD A,(BC)     ; #REGa=*#REGbc.
 $D97C AND E         ; Merge the bits from #REGe.
 $D97D LD (BC),A     ; Write #REGa to *#REGbc.
 $D97E INC HL        ; Increment #REGhl by one.
 $D97F POP DE        ; Restore #REGde from the stack.
 $D980 CALL $D986    ; Call #R$D986.
 $D983 JP $D8C6      ; Jump to #R$D8C6.

; Routine at D986
;
; Used by the routines at #R$D6C9 and #R$D7F6.
c$D986 EXX           ; Switch to the shadow registers.
 $D987 PUSH HL       ; Stash #REGhl on the stack.
 $D988 LD A,B        ; #REGa=#REGb.
 $D989 RRCA          ; {RRCA.
 $D98A RRCA          ;
 $D98B RRCA          ; }
 $D98C LD L,A        ; #REGl=#REGa.
 $D98D AND %00000111 ; Keep only bits 0-2.
 $D98F ADD A,$68     ; #REGa+=#N$68.
 $D991 LD H,A        ; #REGh=#REGa.
 $D992 LD A,L        ; #REGa=#REGl.
 $D993 AND %11111000 ; Keep only bits 3-7.
 $D995 ADD A,C       ; #REGa+=#REGc.
 $D996 LD L,A        ; #REGl=#REGa.
 $D997 LD A,($D214)  ; #REGa=*#R$D214.
 $D99A CP $E6        ; {Jump to #R$D9A5 if #REGa is lower than #N$E6.
 $D99C JR C,$D9A5    ; }
 $D99E CP $EF        ; {Jump to #R$D9A5 if #REGa is higher than #N$EF.
 $D9A0 JR NC,$D9A5   ; }
 $D9A2 LD A,($D408)  ; {Write *#R$D408 to *#REGhl.
*$D9A5 LD (HL),A     ; }
 $D9A6 POP HL        ; Restore #REGhl from the stack.
 $D9A7 EXX           ; Switch back to the normal registers.
 $D9A8 RET           ; Return.

; Routine at D9A9
;
; Used by the routines at #R$D6C9 and #R$D7F6.
c$D9A9 CALL $DA1D    ; Call #R$DA1D.
 $D9AC LD A,C        ; #REGa=#REGc.
 $D9AD ADD A,(HL)    ; #REGa+=*#REGhl.
 $D9AE EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $D9AF INC HL        ; Increment #REGhl by one.
 $D9B0 LD A,B        ; #REGa=#REGb.
 $D9B1 ADD A,(HL)    ; #REGa+=*#REGhl.
 $D9B2 INC HL        ; Increment #REGhl by one.
 $D9B3 LD E,(HL)     ; #REGe=*#REGhl.
 $D9B4 INC HL        ; Increment #REGhl by one.
 $D9B5 LD D,(HL)     ; #REGd=*#REGhl.
 $D9B6 INC HL        ; {Increment #REGhl by three.
 $D9B7 INC HL        ;
 $D9B8 INC HL        ; }
 $D9B9 EXX           ; Switch to the shadow registers.
 $D9BA RET           ; Return.

; Routine at D9BB
;
; Used by the routines at #R$E99B, #R$EA18, #R$EA43, #R$EA9C, #R$EAF6, #R$EC8A,
; #R$ECE0, #R$ED31, #R$EDC2, #R$EE70 and #R$EE9B.
c$D9BB LD L,A        ; #REGl=#REGa.
 $D9BC LD A,($D251)  ; #REGa=*#R$D251.
 $D9BF OR L          ; Set the bits from #REGl.
 $D9C0 JP $D6C9      ; Jump to #R$D6C9.

; Routine at D9C3
;
; Used by the routines at #R$E971, #R$E982 and #R$EF86.
c$D9C3 LD A,(IX+$05)   ; {Jump to #R$D9D2 if *#REGix+#N$05 is equal to
 $D9C6 CP (IX+$04)     ; *#REGix+#N$04.
 $D9C9 JP Z,$D9D2      ; }
 $D9CC INC (IX+$05)    ; Increment *#REGix+#N$05 by one.
 $D9CF JP $D9E2        ; Jump to #R$D9E2.
*$D9D2 LD A,(IX+$01)   ; {Jump to #R$D9E2 if *#REGix+#N$01 is equal to
 $D9D5 CP (IX+$02)     ; *#REGix+#N$02.
 $D9D8 JP Z,$D9E2      ; }
 $D9DB INC (IX+$01)    ; Increment *#REGix+#N$01 by one.
 $D9DE LD (IX+$05),$01 ; Write #N$01 to *#REGix+#N$05.
*$D9E2 LD A,(IX+$00)   ; #REGa=*#REGix+#N$00.
 $D9E5 AND %00000011   ; Keep only bits 0-1.
 $D9E7 JP Z,$D9F3      ; Jump to #R$D9F3 if the result is zero.
 $D9EA LD B,(IX+$03)   ; #REGb=*#REGix+#N$03.
 $D9ED LD C,(IX+$01)   ; #REGc=*#REGix+#N$01.
 $D9F0 JP $D9F9        ; Jump to #R$D9F9.
*$D9F3 LD B,(IX+$01)   ; #REGb=*#REGix+#N$01.
 $D9F6 LD C,(IX+$03)   ; #REGc=*#REGix+#N$03.
*$D9F9 LD A,(IX+$05)   ; #REGa=*#REGix+#N$05.
 $D9FC ADD A,$05       ; #REGa+=#N$05.
 $D9FE ADD A,L         ; #REGa+=#REGl.
 $D9FF LD L,A          ; #REGl=#REGa.
 $DA00 LD A,$00        ; #REGa=#N$00.
 $DA02 ADC A,H         ; #REGa+=#REGh.
 $DA03 LD H,A          ; #REGh=#REGa.
 $DA04 LD A,(HL)       ; #REGa=*#REGhl.
 $DA05 CALL $D6C9      ; Call #R$D6C9.
 $DA08 LD A,(IX+$05)   ; #REGa=*#REGix+#N$05.
 $DA0B CP (IX+$04)     ; Compare #REGa with *#REGix+#N$04.
 $DA0E RET             ; Return.

; Routine at DA0F
;
; Used by the routines at #R$E68C, #R$E971, #R$E982 and #R$EF86.
c$DA0F DEC A         ; Decrease #REGa by one.
 $DA10 ADD A,A       ; #REGa*=#N$02.
 $DA11 LD L,A        ; {#REGa*=#N$05.
 $DA12 ADD A,A       ;
 $DA13 ADD A,A       ;
 $DA14 ADD A,L       ; }
 $DA15 LD H,$00      ; #REGh=#N$00.
 $DA17 LD L,A        ; #REGl=#REGa.
 $DA18 ADD HL,DE     ; #REGhl+=#REGde.
 $DA19 PUSH HL       ; {#REGix=#REGhl using the stack.
 $DA1A POP IX        ; }
 $DA1C RET           ; Return.

; Routine at DA1D
;
; Used by the routine at #R$D9A9.
c$DA1D DEC A         ; Decrease #REGa by one.
 $DA1E LD H,$00      ; #REGh=#N$00.
 $DA20 LD L,A        ; #REGl=#REGa.
 $DA21 LD DE,$C1A1   ; {#REGhl=#R$C1A1+(#REGhl*#N$04).
 $DA24 ADD HL,HL     ;
 $DA25 ADD HL,HL     ;
 $DA26 ADD HL,DE     ; }
 $DA27 RET           ; Return.

; Random Number
;
; Used by the routines at #R$DB7E, #R$DBE5, #R$DCA1, #R$E179, #R$E25D, #R$E99B,
; #R$F28B, #R$F4E6, #R$FC39, #R$FCB6, #R$FD64, #R$FD9E and #R$FDC4.
;
; O:A Random number
@label=RandomNumber
c$DA28 LD DE,($D21A) ; #REGde=*#R$D21A.
 $DA2C INC DE        ; Increment #REGde by one.
; The max value is #N$2800 so test the higher order byte to check if this limit
; has been hit.
 $DA2D LD A,D        ; {If #REGd is #N$28 then jump to #R$DA38.
 $DA2E CP $28        ;
 $DA30 JR Z,$DA38    ; }
; Update the "clock" value.
@label=WriteSeed
*$DA32 LD ($D21A),DE ; Write #REGde back to *#R$D21A.
; The "random number" is actually a byte from the Spectrum ROM. The "clock" is used as a pointer to return a value
;       from between memory locations #N($0000,$04,$04)-#N$27FF.
 $DA36 LD A,(DE)     ; #REGa=*#REGde.
 $DA37 RET           ; Return.
; Reset the "clock" back to #N($0000,$04,$04).
@label=ResetSeed
*$DA38 LD D,$00      ; #REGd=#N$00.
 $DA3A JP $DA32      ; Jump to #R$DA32.

; Routine at DA3D
;
; Used by the routines at #R$DA71, #R$F2CA and #R$F4E6.
c$DA3D LD A,D        ; #REGa=#REGd.
 $DA3E ADD A,A       ; #REGa+=#REGa.
 $DA3F ADD A,D       ; #REGa+=#REGd.
 $DA40 ADD A,B       ; #REGa+=#REGb.
 $DA41 ADD A,$5F     ; #REGa+=#N$5F.
 $DA43 LD D,A        ; #REGd=#REGa.
 $DA44 LD A,E        ; #REGa=#REGe.
 $DA45 LD E,C        ; #REGe=#REGc.
 $DA46 LD (DE),A     ; Write #REGa to *#REGde.
 $DA47 PUSH DE       ; Stash #REGde on the stack.
 $DA48 LD A,$68      ; {#REGd=#N$68+#REGb.
 $DA4A ADD A,B       ;
 $DA4B LD D,A        ; }
 $DA4C LD A,$FF      ; {Write #N$FF to *#REGde.
 $DA4E LD (DE),A     ; }
 $DA4F POP DE        ; Restore #REGde from the stack.
 $DA50 RET           ; Return.

; Routine at DA51
;
; Used by the routines at #R$E68C and #R$EA04.
c$DA51 LD A,($D24D)  ; {Increment *#R$D24D by one.
 $DA54 INC A         ;
 $DA55 LD ($D24D),A  ; }
 $DA58 RET           ; Return.

; Routine at DA59
;
; Used by the routines at #R$E982, #R$EA43, #R$EAF6 and #R$EC8A.
c$DA59 LD A,($D24E)  ; {Increment *#R$D24E by one.
 $DA5C INC A         ;
 $DA5D LD ($D24E),A  ; }
 $DA60 RET           ; Return.

; Routine at DA61
;
; Used by the routines at #R$E68C, #R$EA9C, #R$EAF6 and #R$EC8A.
c$DA61 LD A,($D24D)  ; {Decrease *#R$D24D by one.
 $DA64 DEC A         ;
 $DA65 LD ($D24D),A  ; }
 $DA68 RET           ; Return.

; Routine at DA69
;
; Used by the routine at #R$E68C.
c$DA69 LD A,($D24E)  ; {Decrease *#R$D24E by one.
 $DA6C DEC A         ;
 $DA6D LD ($D24E),A  ; }
 $DA70 RET           ; Return.

; Routine at DA71
;
; Used by the routine at #R$DF90.
;
; IX Buildings Table
c$DA71 LD ($D213),A    ; Write #REGa to *#R$D213.
 $DA74 LD (IX+$00),$01 ; Write #N$01 to *#REGix+#N$00.
 $DA78 LD (IX+$07),A   ; Write #REGa to *#REGix+#N$07.
 $DA7B LD (IX+$08),D   ; Write #REGd to *#REGix+#N$08.
 $DA7E PUSH DE         ; Stash #REGde on the stack.
 $DA7F LD D,A          ; #REGd=#REGa.
 $DA80 LD E,$00        ; #REGe=#N$00.
 $DA82 CALL $DA3D      ; Call #R$DA3D.
 $DA85 LD (IX+$03),E   ; Write #REGe to *#REGix+#N$03.
 $DA88 LD (IX+$04),D   ; Write #REGd to *#REGix+#N$04.
 $DA8B POP DE          ; Restore #REGde from the stack.
 $DA8C LD A,C          ; #REGa=#REGc.
 $DA8D AND %00011111   ; Keep only bits 0-4.
 $DA8F LD (IX+$01),A   ; Write #REGa to *#REGix+#N$01.
 $DA92 LD HL,$CB29     ; #REGhl=#R$CB29.
*$DA95 LD A,(HL)       ; #REGa=*#REGhl.
 $DA96 INC HL          ; Increment #REGhl by one.
 $DA97 CP $FF          ; {Jump to #R$DA95 if #REGa is not equal to #N$FF.
 $DA99 JR NZ,$DA95     ; }
 $DA9B DEC E           ; Decrease #REGe by one.
 $DA9C JR NZ,$DA95     ; Jump to #R$DA95 until #REGe is zero.
 $DA9E LD ($DB52),HL   ; Write #REGhl to *#R$DB52.
 $DAA1 LD A,(HL)       ; #REGa=*#REGhl.
 $DAA2 AND %11000000   ; Keep only bits 6-7.
 $DAA4 RLCA            ; {Rotate #REGa left two positions (bits 6 to 7 are now
 $DAA5 RLCA            ; in positions 0 to 1).}
 $DAA6 CP $00          ; {Jump to #R$DAB1 if #REGa is not equal to #N$00.
 $DAA8 JR NZ,$DAB1     ; }
 $DAAA LD HL,$C99E     ; #REGhl=#R$C99E.
 $DAAD LD E,$06        ; #REGe=#N$06.
 $DAAF JR $DAC1        ; Jump to #R$DAC1.
*$DAB1 CP $01          ; {Jump to #R$DABC if #REGa is not equal to #N$01.
 $DAB3 JR NZ,$DABC     ; }
 $DAB5 LD HL,$C9F9     ; #REGhl=#R$C9F9.
 $DAB8 LD E,$07        ; #REGe=#N$07.
 $DABA JR $DAC1        ; Jump to #R$DAC1.
*$DABC LD HL,$CA57     ; #REGhl=#R$CA57.
 $DABF LD E,$08        ; #REGe=#N$08.
*$DAC1 LD A,(IX+$01)   ; #REGa=*#REGix+#N$01.
 $DAC4 ADD A,E         ; #REGa+=#REGe.
 $DAC5 DEC A           ; Decrease #REGa by one.
 $DAC6 LD (IX+$02),A   ; Write #REGa to *#REGix+#N$02.
 $DAC9 LD (IX+$06),E   ; Write #REGe to *#REGix+#N$06.
 $DACC DEC E           ; {Decrease #REGe by two.
 $DACD DEC E           ; }
*$DACE PUSH HL         ; Stash #REGhl on the stack.
 $DACF LD HL,($DB52)   ; #REGhl=*#R$DB52.
 $DAD2 LD A,(HL)       ; #REGa=*#REGhl.
 $DAD3 CP $FF          ; {Jump to #R$DB2B if #REGa is equal to #N$FF.
 $DAD5 JP Z,$DB2B      ; }
 $DAD8 POP HL          ; Restore #REGhl from the stack.
 $DAD9 INC (IX+$05)    ; Increment *#REGix+#N$05 by one.
 $DADC AND %00111111   ; Keep only bits 0-5.
 $DADE PUSH HL         ; {Stash #REGhl and #REGde (twice) on the stack.
 $DADF PUSH DE         ;
 $DAE0 PUSH DE         ; }
 $DAE1 LD D,$00        ; #REGd=#N$00.
*$DAE3 ADD HL,DE       ; #REGhl+=#REGde.
 $DAE4 DEC A           ; Decrease #REGa by one.
 $DAE5 JR NZ,$DAE3     ; Jump to #R$DAE3 until #REGa is zero.
 $DAE7 POP DE          ; Restore #REGde from the stack.
 $DAE8 PUSH BC         ; Stash #REGbc on the stack.
 $DAE9 LD A,(HL)       ; #REGa=*#REGhl.
 $DAEA CP $0E          ; {Jump to #R$DAF7 if #REGa is higher than #N$0E.
 $DAEC JR NC,$DAF7     ; }
 $DAEE CP $09          ; {Jump to #R$DAF7 if #REGa is lower than #N$09.
 $DAF0 JR C,$DAF7      ; }
 $DAF2 CALL $DB43      ; Call #R$DB43.
 $DAF5 JR $DAFC        ; Jump to #R$DAFC.
*$DAF7 LD A,$11        ; #REGa=#N$11.
 $DAF9 CALL $DB43      ; Call #R$DB43.
*$DAFC LD A,(HL)       ; #REGa=*#REGhl.
 $DAFD CALL $DB43      ; Call #R$DB43.
 $DB00 INC HL          ; Increment #REGhl by one.
 $DB01 DEC E           ; Decrease #REGe by one.
 $DB02 JR NZ,$DAFC     ; Jump to #R$DAFC until #REGe is zero.
 $DB04 DEC HL          ; Decrease #REGhl by one.
 $DB05 LD A,(HL)       ; #REGa=*#REGhl.
 $DB06 CP $0E          ; {Jump to #R$DB13 if #REGa is higher than #N$0E.
 $DB08 JR NC,$DB13     ; }
 $DB0A CP $09          ; {Jump to #R$DB13 if #REGa is lower than #N$09.
 $DB0C JR C,$DB13      ; }
 $DB0E CALL $DB43      ; Call #R$DB43.
 $DB11 JR $DB18        ; Jump to #R$DB18.
*$DB13 LD A,$14        ; #REGa=#N$14.
 $DB15 CALL $DB43      ; Call #R$DB43.
*$DB18 POP BC          ; Restore #REGbc from the stack.
 $DB19 LD HL,$0020     ; #REGhl=#N($0020,$04,$04).
 $DB1C ADD HL,BC       ; #REGhl+=#REGbc.
 $DB1D LD B,H          ; #REGb=#REGh.
 $DB1E LD C,L          ; #REGc=#REGl.
 $DB1F POP DE          ; Restore #REGde from the stack.
 $DB20 LD HL,($DB52)   ; #REGhl=*#R$DB52.
 $DB23 INC HL          ; Increment #REGhl by one.
 $DB24 LD ($DB52),HL   ; Write #REGhl to *#R$DB52.
 $DB27 POP HL          ; Restore #REGhl from the stack.
 $DB28 JP $DACE        ; Jump to #R$DACE.
*$DB2B POP HL          ; Restore #REGhl from the stack.
 $DB2C LD A,(IX+$05)   ; #REGa=*#REGix+#N$05.
 $DB2F INC A           ; Increment #REGa by one.
 $DB30 LD (IX+$0A),A   ; Write #REGa to *#REGix+#N$0A.
 $DB33 LD (IX+$0B),A   ; Write #REGa to *#REGix+#N$0B.
 $DB36 ADD A,A         ; #REGa+=#REGa.
 $DB37 ADD A,A         ; #REGa+=#REGa.
 $DB38 ADD A,$0A       ; #REGa+=#N$0A.
 $DB3A LD (IX+$0C),A   ; Write #REGa to *#REGix+#N$0C.
 $DB3D LD A,$02        ; #REGa=#N$02.
 $DB3F LD (IX+$0D),A   ; Write #REGa to *#REGix+#N$0D.
 $DB42 RET             ; Return.
*$DB43 PUSH DE         ; Stash #REGde on the stack.
 $DB44 LD E,A          ; #REGe=#REGa.
 $DB45 LD A,($D213)    ; #REGa=*#R$D213.
 $DB48 LD D,A          ; #REGd=#REGa.
 $DB49 CALL $DA3D      ; Call #R$DA3D.
 $DB4C INC (IX+$09)    ; Increment *#REGix+#N$09 by one.
 $DB4F INC BC          ; Increment #REGbc by one.
 $DB50 POP DE          ; Restore #REGde from the stack.
 $DB51 RET             ; Return.
 $DB52 DEFW $0000      ;
; This entry point is used by the routines at #R$E971, #R$E982 and #R$EF86.
*$DB54 LD IX,($D253)   ; #REGix=#R$D253.
 $DB58 LD A,($D24D)    ; #REGa=*#R$D24D.
 $DB5B LD (IX+$01),A   ; Write #REGa to *#REGix+#N$01.
 $DB5E LD (IX+$02),A   ; Write #REGa to *#REGix+#N$02.
 $DB61 LD (IX+$0D),A   ; Write #REGa to *#REGix+#N$0D.
 $DB64 LD (IX+$17),A   ; Write #REGa to *#REGix+#N$17.
 $DB67 LD A,($D24E)    ; #REGa=*#R$D24E.
 $DB6A LD (IX+$03),A   ; Write #REGa to *#REGix+#N$03.
 $DB6D LD (IX+$0B),A   ; Write #REGa to *#REGix+#N$0B.
 $DB70 LD (IX+$0C),A   ; Write #REGa to *#REGix+#N$0C.
 $DB73 LD (IX+$15),A   ; Write #REGa to *#REGix+#N$15.
 $DB76 LD (IX+$16),A   ; Write #REGa to *#REGix+#N$16.
 $DB79 LD DE,($D253)   ; #REGde=*#R$D253.
 $DB7D RET             ; Return.

; Routine at DB7E
;
; Used by the routine at #R$E25D.
c$DB7E XOR A         ; {Write #N$00 to *#R$D214.
 $DB7F LD ($D214),A  ; }
 $DB82 CALL $DA28    ; {Get a random number between 0-3.
 $DB85 AND %00000011 ; }
*$DB87 CALL $DBB4    ; Call #R$DBB4.
; This entry point is used by the routine at #R$DBD9.
*$DB8A CP $C8        ; {Jump to #R$DB96 if #REGa is lower than #N$C8.
 $DB8C JR C,$DB96    ; }
 $DB8E LD A,$80      ; {Write #N$80 to *#R$D214.
 $DB90 LD ($D214),A  ; }
 $DB93 LD A,B        ; #REGa=#REGb.
 $DB94 JR $DB87      ; Jump to #R$DB87.
*$DB96 LD A,($D214)  ; #REGa=*#R$D214.
 $DB99 OR B          ; Set the bits from #REGb.
 $DB9A EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $DB9B LD A,(DE)     ; #REGa=*#REGde.
 $DB9C INC A         ; {Increment #REGa by two.
 $DB9D INC A         ; }
 $DB9E LD B,A        ; #REGb=#REGa.
 $DB9F CP $64        ; {Jump to #R$DBA5 if #REGa is lower than #N$64.
 $DBA1 JR C,$DBA5    ; }
 $DBA3 LD B,$00      ; #REGb=#N$00.
*$DBA5 INC DE        ; Increment #REGde by one.
 $DBA6 LD A,(DE)     ; #REGa=*#REGde.
 $DBA7 INC A         ; Increment #REGa by one.
 $DBA8 LD C,A        ; #REGc=#REGa.
 $DBA9 CP $64        ; {Jump to #R$DBAF if #REGa is lower than #N$64.
 $DBAB JR C,$DBAF    ; }
 $DBAD LD C,$00      ; #REGc=#N$00.
*$DBAF XOR A         ; {Write #N$00 to *#R$D214.
 $DBB0 LD ($D214),A  ; }
 $DBB3 RET           ; Return.

; Character Picker
;
; Used by the routine at #R$DB7E.
;
;   A Number between 0-3
; O:A Monster state
; O:B Monster number
; O:DE Pointer to Monster X Position
;
; The monster IDs are the following: #TABLE(default,centre,centre)
; { =h ID | =h Monster }
; { #N$01 | George }
; { #N$02 | Lizzy }
; { #N$03 | Ralph }
; TABLE#
@label=CharacterPicker
c$DBB4 INC A         ; Make the number 1-4 instead of 0-3.
 $DBB5 CP $04        ; {Jump to #R$DBBB if #REGa is not equal to #N$04.
 $DBB7 JR NZ,$DBBB   ; }
; There aren't four monsters so make #N$04 into #N$01. This means George has 50% chance of being chosen, Lizzy and
;       Ralph are 25% each.
 $DBB9 LD A,$01      ; #REGa=#N$01.
; This entry point is used by the routine at #R$DBD9.
@label=GetCharacter
*$DBBB LD B,A        ; #REGb=#REGa.
; Test if it's George.
@label=CharacterPicker_George
 $DBBC CP $01        ; {Jump to #R$DBC7 if #REGa is not equal to #N$01.
 $DBBE JR NZ,$DBC7   ; }
 $DBC0 LD A,($CFD2)  ; #REGa=*#R$CFD2.
 $DBC3 LD DE,$CFDB   ; #REGde=#R$CFDB.
 $DBC6 RET           ; Return.
; Test if it's Lizzy.
@label=CharacterPicker_Lizzy
*$DBC7 CP $02        ; {Jump to #R$DBD2 if #REGa is not equal to #N$02.
 $DBC9 JR NZ,$DBD2   ; }
 $DBCB LD A,($D001)  ; #REGa=*#R$D001.
 $DBCE LD DE,$D00A   ; #REGde=#R$D00A.
 $DBD1 RET           ; Return.
; If it's neither of the above then it can only be Ralph.
@label=CharacterPicker_Ralph
*$DBD2 LD A,($D030)  ; #REGa=*#R$D030.
 $DBD5 LD DE,$D039   ; #REGde=#R$D039.
 $DBD8 RET           ; Return.

; Routine at DBD9
;
; Used by the routine at #R$E25D.
;
;   A Monster ID
; O:A Monster state
; O:B Monster number
; O:DE Pointer to Monster X Position
c$DBD9 LD B,A        ; Stash the monster ID temporarily.
 $DBDA XOR A         ; {Write #N$00 to *#R$D214.
 $DBDB LD ($D214),A  ; }
 $DBDE LD A,B        ; Restore the monster ID back to #REGa.
 $DBDF CALL $DBBB    ; Call #R$DBBB.
 $DBE2 JP $DB8A      ; Jump to #R$DB8A.

; Handler: Helicopters
;
; Used by the routine at #R$DE77.
@label=Handler_Helicopters
c$DBE5 LD B,$06        ; #REGb=#N$06 (number of possible helicopters).
 $DBE7 LD IX,$D295     ; #REGix=#R$D295.
 $DBEB XOR A           ; {Write #N$00 to *#R$D247.
 $DBEC LD ($D247),A    ; }
@label=Handler_Helicopters_Loop
*$DBEF PUSH BC         ; Stash current helicopter on the stack.
 $DBF0 LD A,(IX+$00)   ; {Jump to #R$DC95 if this helicopter is not active.
 $DBF3 LD D,A          ;
 $DBF4 AND A           ;
 $DBF5 JP Z,$DC95      ; }
 $DBF8 LD C,(IX+$01)   ; #REGc=*#REGix+#N$01.
 $DBFB LD B,(IX+$02)   ; #REGb=*#REGix+#N$02.
 $DBFE RLCA            ; Rotate #REGa left one position, setting the carry flag
                       ; if bit 7 was set.
 $DBFF JR C,$DC62      ; Jump to #R$DC62 if the carry flag is set.
 $DC01 LD A,C          ; {Jump to #R$DC18 if #REGc is equal to #N$21.
 $DC02 CP $21          ;
 $DC04 JR Z,$DC18      ; }
 $DC06 LD A,D          ; #REGa=#REGd.
 $DC07 AND %01000011   ; Keep only bits 0-1 and 6.
 $DC09 INC A           ; Increment #REGa by one.
 $DC0A CP $44          ; {Jump to #R$DC86 until #REGa is equal to #N$44.
 $DC0C JP NZ,$DC86     ; }
 $DC0F LD A,$40        ; #REGa=#N$40.
 $DC11 INC C           ; Increment #REGc by one.
 $DC12 LD (IX+$01),C   ; Write #REGc to *#REGix+#N$01.
 $DC15 JP $DC86        ; Jump to #R$DC86.
*$DC18 LD B,$04        ; #REGb=#N$04.
 $DC1A LD C,$20        ; #REGc=#N$20.
*$DC1C LD A,($D3F6)    ; {Jump to #R$DC4D if *#R$D3F6 is equal to #N$06.
 $DC1F CP $06          ;
 $DC21 JR Z,$DC4D      ; }
; Loop to find an empty slot.
 $DC23 LD HL,$D2A3     ; #REGhl=#R$D2A3 (#R$D2A7-#N$04).
@label=Handler_Helicopters_FindSlot
*$DC26 INC HL          ; {Increment #REGhl by four.
 $DC27 INC HL          ;
 $DC28 INC HL          ;
 $DC29 INC HL          ; }
 $DC2A LD A,(HL)       ; {Jump to #R$DC26 if *#REGhl is not zero.
 $DC2B AND A           ;
 $DC2C JR NZ,$DC26     ; }
 $DC2E LD (HL),B       ; Write #REGb to *#REGhl.
 $DC2F INC HL          ; Increment #REGhl by one.
 $DC30 LD (HL),C       ; Write #REGc to *#REGhl.
 $DC31 INC HL          ; Increment #REGhl by one.
 $DC32 CALL $DA28      ; {Get a random number between 0-31.
 $DC35 AND %00011111   ; }
 $DC37 ADD A,$08       ; #REGa+=#N$08.
 $DC39 AND %00011111   ; Keep only bits 0-4.
 $DC3B LD (HL),A       ; Write #REGa to *#REGhl.
 $DC3C INC HL          ; Increment #REGhl by one.
 $DC3D LD A,(IX+$02)   ; #REGa=*#REGix+#N$02.
 $DC40 DEC A           ; Decrease #REGa by one.
 $DC41 RLCA            ; {RLCA.
 $DC42 RLCA            ; }
 $DC43 ADD A,$04       ; #REGa+=#N$04.
 $DC45 LD (HL),A       ; Write #REGa to *#REGhl.
 $DC46 CALL $DA28      ; {Get a random number between 0-3.
 $DC49 AND %00000011   ; }
 $DC4B ADD A,(HL)      ; #REGa+=*#REGhl.
 $DC4C LD (HL),A       ; Write #REGa to *#REGhl.
*$DC4D LD (IX+$00),$00 ; Write #N$00 to *#REGix+#N$00.
 $DC51 LD A,($D3F5)    ; {Decrease *#R$D3F5 by one.
 $DC54 DEC A           ;
 $DC55 LD ($D3F5),A    ; }
 $DC58 LD A,($D3F6)    ; {Increment *#R$D3F6 by one.
 $DC5B INC A           ;
 $DC5C LD ($D3F6),A    ; }
 $DC5F JP $DC95        ; Jump to #R$DC95.
*$DC62 LD A,C          ; {Jump to #R$DC7F if #REGc is equal to #N$FC.
 $DC63 CP $FC          ;
 $DC65 JP Z,$DC7F      ; }
 $DC68 LD A,$01        ; {Write #N$01 to *#R$D247.
 $DC6A LD ($D247),A    ; }
 $DC6D LD A,D          ; #REGa=#REGd.
 $DC6E AND %10000011   ; Keep only bits 0-1 and 7.
 $DC70 INC A           ; Increment #REGa by one.
 $DC71 CP $84          ; {Jump to #R$DC86 if #REGa is not equal to #N$84.
 $DC73 JP NZ,$DC86     ; }
 $DC76 LD A,$80        ; #REGa=#N$80.
 $DC78 DEC C           ; Decrease #REGc by one.
 $DC79 LD (IX+$01),C   ; Write #REGc to *#REGix+#N$01.
 $DC7C JP $DC86        ; Jump to #R$DC86.
*$DC7F LD B,$02        ; #REGb=#N$02.
 $DC81 LD C,$FC        ; #REGc=#N$FC.
 $DC83 JP $DC1C        ; Jump to #R$DC1C.
*$DC86 LD (IX+$00),A   ; Write #REGa to *#REGix+#N$00.
 $DC89 AND %00000011   ; Keep only bits 0-1.
 $DC8B ADD A,A         ; #REGa+=#REGa.
 $DC8C ADD A,$DE       ; #REGa+=#N$DE.
 $DC8E CALL $D6C9      ; Call #R$D6C9.
 $DC91 XOR A           ; {Write #N$00 to *#R$D247.
 $DC92 LD ($D247),A    ; }
@label=Handler_Helicopters_Next
*$DC95 INC IX          ; {Move onto the next helicopter table data.
 $DC97 INC IX          ;
 $DC99 INC IX          ; }
 $DC9B POP BC          ; Restore helicopter ID from the stack.
 $DC9C DEC B           ; Decrease helicopter ID by one.
 $DC9D JP NZ,$DBEF     ; Jump to #R$DBEF until all helicopters have been
                       ; processed.
 $DCA0 RET             ; Return.

; Routine at DCA1
;
; Used by the routine at #R$DE77.
c$DCA1 LD A,($D3F4)  ; {#REGb=*#R$D3F4.
 $DCA4 LD B,A        ; }
 $DCA5 LD A,($D211)  ; {Return if *#R$D211 is equal to #REGb.
 $DCA8 CP B          ;
 $DCA9 RET Z         ; }
 $DCAA CALL $DA28    ; {#REGb=random number.
 $DCAD LD B,A        ; }
 $DCAE LD A,($D210)  ; #REGa=*#R$D210.
 $DCB1 CP B          ; {Return if #REGa is lower than #REGb.
 $DCB2 RET C         ; }
 $DCB3 CALL $DA28    ; Call #R$DA28.
 $DCB6 LD H,$00      ; #REGh=#N$00.
 $DCB8 LD L,A        ; #REGl=#REGa.
 $DCB9 CALL $DA28    ; Call #R$DA28.
 $DCBC LD B,H        ; #REGb=#REGh.
 $DCBD LD C,A        ; #REGc=#REGa.
 $DCBE CALL $DA28    ; Call #R$DA28.
 $DCC1 LD D,H        ; #REGd=#REGh.
 $DCC2 LD E,A        ; #REGe=#REGa.
 $DCC3 ADD HL,DE     ; #REGhl+=#REGde.
 $DCC4 ADD HL,BC     ; #REGhl+=#REGbc.
 $DCC5 LD B,H        ; #REGb=#REGh.
 $DCC6 LD C,L        ; #REGc=#REGl.
 $DCC7 LD A,$65      ; {#REGh+=#N$65.
 $DCC9 ADD A,H       ;
 $DCCA LD H,A        ; }
 $DCCB LD A,(HL)     ; {Jump to #R$DCD5 if *#REGhl is not zero.
 $DCCC AND A         ;
 $DCCD JR NZ,$DCD5   ; }
 $DCCF DEC H         ; {Decrease #REGh by three.
 $DCD0 DEC H         ;
 $DCD1 DEC H         ; }
 $DCD2 LD A,(HL)     ; {Return if *#REGhl is zero.
 $DCD3 AND A         ;
 $DCD4 RET Z         ; }
*$DCD5 AND %01000000 ; Keep only bit 6.
 $DCD7 LD D,A        ; #REGd=#REGa.
 $DCD8 LD A,(HL)     ; #REGa=*#REGhl.
 $DCD9 CP $07        ; {Return if #REGa is higher than #N$07.
 $DCDB RET NC        ; }
 $DCDC CP $03        ; {Return if #REGa is lower than #N$03.
 $DCDE RET C         ; }
 $DCDF AND %00000001 ; Keep only bit 0.
 $DCE1 JR Z,$DCEF    ; Jump to #R$DCEF if the result is zero.
 $DCE3 LD A,$07      ; #REGa=#N$07.
 $DCE5 OR D          ; Set the bits from #REGd.
 $DCE6 LD (HL),A     ; Write #REGa to *#REGhl.
 $DCE7 INC L         ; Increment #REGl by one.
 $DCE8 LD A,$08      ; #REGa=#N$08.
 $DCEA OR D          ; Set the bits from #REGd.
 $DCEB LD (HL),A     ; Write #REGa to *#REGhl.
 $DCEC DEC L         ; Decrease #REGl by one.
 $DCED JR $DCFA      ; Jump to #R$DCFA.
*$DCEF LD A,$08      ; #REGa=#N$08.
 $DCF1 OR D          ; Set the bits from #REGd.
 $DCF2 LD (HL),A     ; Write #REGa to *#REGhl.
 $DCF3 DEC L         ; Decrease #REGl by one.
 $DCF4 LD A,$07      ; #REGa=#N$07.
 $DCF6 OR D          ; Set the bits from #REGd.
 $DCF7 LD (HL),A     ; Write #REGa to *#REGhl.
 $DCF8 INC L         ; Increment #REGl by one.
 $DCF9 DEC C         ; Decrease #REGc by one.
*$DCFA PUSH BC       ; Stash #REGbc on the stack.
 $DCFB LD A,$68      ; {#REGb+=#N$68.
 $DCFD ADD A,B       ;
 $DCFE LD B,A        ; }
 $DCFF LD A,$FF      ; {Write #N$FF to *#REGbc.
 $DD01 LD (BC),A     ; }
 $DD02 INC C         ; Increment #REGc by one.
 $DD03 LD (BC),A     ; Write #REGa to *#REGbc.
 $DD04 EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $DD05 LD A,($D3F4)  ; #REGa=*#R$D3F4.
 $DD08 INC A         ; Increment #REGa by one.
 $DD09 LD ($D3F4),A  ; Write #REGa to *#R$D3F4.
 $DD0C LD HL,$D251   ; #REGhl=#R$D251.
*$DD0F INC HL        ; {Increment #REGhl by four.
 $DD10 INC HL        ;
 $DD11 INC HL        ;
 $DD12 INC HL        ; }
 $DD13 LD A,(HL)     ; {Jump to #R$DD0F if *#REGhl is not zero.
 $DD14 AND A         ;
 $DD15 JR NZ,$DD0F   ; }
 $DD17 LD (HL),$01   ; Write #N$01 to *#REGhl.
 $DD19 INC HL        ; Increment #REGhl by one.
 $DD1A CALL $DA28    ; {Get a random number between 0-31.
 $DD1D AND %00011111 ; }
 $DD1F ADD A,$1F     ; #REGa+=#N$1F.
 $DD21 LD (HL),A     ; Write #REGa to *#REGhl.
 $DD22 INC HL        ; Increment #REGhl by one.
 $DD23 POP BC        ; Restore #REGbc from the stack.
 $DD24 LD A,C        ; #REGa=#REGc.
 $DD25 AND %00011111 ; Keep only bits 0-4.
 $DD27 LD (HL),A     ; Write #REGa to *#REGhl.
 $DD28 INC HL        ; Increment #REGhl by one.
 $DD29 LD A,B        ; #REGa=#REGb.
 $DD2A RLCA          ; {RLCA.
 $DD2B RLCA          ;
 $DD2C RLCA          ; }
 $DD2D LD B,A        ; #REGb=#REGa.
 $DD2E LD A,C        ; #REGa=#REGc.
 $DD2F RLCA          ; {RLCA.
 $DD30 RLCA          ;
 $DD31 RLCA          ; }
 $DD32 AND %00000111 ; Keep only bits 0-2.
 $DD34 OR B          ; Set the bits from #REGb.
 $DD35 DEC A         ; Decrease #REGa by one.
 $DD36 LD (HL),A     ; Write #REGa to *#REGhl.
 $DD37 RET           ; Return.

; Routine at DD38
;
; Used by the routines at #R$E576, #R$F352 and #R$F69F.
c$DD38 LD H,$00      ; #REGh=#N$00.
 $DD3A LD L,B        ; #REGl=#REGb.
 $DD3B LD D,H        ; #REGd=#REGh.
 $DD3C LD E,C        ; #REGe=#REGc.
 $DD3D ADD HL,HL     ; {#REGhl*=#N$20+#REGde.
 $DD3E ADD HL,HL     ;
 $DD3F ADD HL,HL     ;
 $DD40 ADD HL,HL     ;
 $DD41 ADD HL,HL     ;
 $DD42 ADD HL,DE     ; }
 $DD43 LD A,H        ; #REGa=#REGh.
 $DD44 ADD A,$68     ; #REGa+=#N$68.
 $DD46 LD H,A        ; #REGh=#REGa.
 $DD47 LD A,(HL)     ; #REGa=*#REGhl.
 $DD48 CP $FF        ; {Return if #REGa is not equal to #N$FF.
 $DD4A RET NZ        ; }
 $DD4B XOR A         ; #REGa=#N$00.
 $DD4C RET           ; Return.

; Convert To Monster Data
;
; Used by the routines at #R$E576, #R$F69F and #R$F795.
;
; O:A Monster ID
@label=Convert_To_MonsterData
c$DD4D AND %11000000 ; Keep only bits 6-7.
 $DD4F RLCA          ; {Rotate #REGa left twice, moving bits 6-7 to bits 0-1.
 $DD50 RLCA          ; }
; Converts 0-2 into 1-3 for the monster ID.
 $DD51 INC A         ; Increment #REGa by one.
; Continue on to #R$DD52.

; Sets #REGiy To Monster Data
;
; Used by the routines at #R$F4B8, #R$F4D1 and #R$F795.
;
;   A Monster ID
; O:IY Monster data
@label=SetIYMonsterData
c$DD52 CP $01        ; {Jump to #R$DD5B if #REGa is not equal to #N$01.
 $DD54 JR NZ,$DD5B   ; }
; #REGa is #N$01; set to George:
 $DD56 LD IY,$CFD2   ; #REGiy=#R$CFD2.
 $DD5A RET           ; Return.
; If it's not #N$01, is it #N$02?
@label=SetIYMonsterData_Lizzy
*$DD5B CP $02        ; {Jump to #R$DD64 if #REGa is not equal to #N$02.
 $DD5D JR NZ,$DD64   ; }
; #REGa is #N$02; set to Lizzy:
 $DD5F LD IY,$D001   ; #REGiy=#R$D001.
 $DD63 RET           ; Return.
; Just return if #REGa is none of #N$01, #N$02 or #N$03.
@label=SetIYMonsterData_Ralph
*$DD64 CP $03        ; {Return if #REGa is not equal to #N$03.
 $DD66 RET NZ        ; }
; #REGa is #N$03; set to Ralph:
 $DD67 LD IY,$D030   ; #REGiy=#R$D030.
 $DD6B RET           ; Return.

; Handler: Decrease Energy
;
; Used by the routines at #R$E576, #R$EA43, #R$F4B8, #R$F69F and #R$F795.
;
; IY Monster Pointer
; A Damage value
@label=Handler_DecreaseEnergy
c$DD6C EX AF,AF'       ; Exchange the #REGaf register with the shadow #REGaf
                       ; register.
 $DD6D LD A,(IY+$00)   ; {Return if the monster state (*#REGiy+#N$00) is higher than #N$21 (includes the "explosion" and "human"
 $DD70 CP $21          ;           states). If this is the case then the monster is already "game over".
 $DD72 RET NC          ; }
 $DD73 EX AF,AF'       ; Exchange the shadow #REGaf register back to the normal
                       ; #REGaf register.
; Keep decreasing the monsters energy by the number held in #REGa.
@label=Handler_DecreaseEnergy_Loop
*$DD74 DEC (IY+$0C)    ; Decrease monster energy (*#REGiy+#N$0C) by one.
 $DD77 DEC A           ; Decrease #REGa by one.
 $DD78 JR NZ,$DD74     ; Jump to #R$DD74 until #REGa is zero.
; Is the monster still in-play?
 $DD7A LD A,(IY+$0C)   ; {Return if *#REGiy+#N$0C is lower than #N$C8.
 $DD7D CP $C8          ;
 $DD7F RET C           ; }
; If the monsters energy falls to less than #N$00 - their turn is over.
 $DD80 LD (IY+$0C),$00 ; Reset monsters energy to #N$00 (in *#REGiy+#N$0C).
 $DD84 LD (IY+$00),$21 ; Write #N$21 (explosion state) to the current monster
                       ; state (*#REGiy+#N$00).
 $DD88 RET             ; Return.

; Handler: Increase Energy (Eaten Food)
;
; Used by the routine at #R$F4D1.
;
; IY Monster data
; A Energy increment
@label=Handler_IncreaseEnergy
c$DD89 ADD A,(IY+$0C)  ; {Add the energy value to the monsters current energy
 $DD8C LD (IY+$0C),A   ; level (*#REGiy+#N$0C).}
; Ensure the maximum value for monster energy is not breached.
 $DD8F CP $41          ; {Return if the monsters energy is lower than #N$41.
 $DD91 RET C           ; }
 $DD92 LD (IY+$0C),$40 ; Else write #N$40 to the monsters energy
                       ; (*#REGiy+#N$0C) to keep it within the acceptable
                       ; range.
 $DD96 RET             ; Return.

; Handler: Add Points To Score
;
; Used by the routines at #R$F450, #R$F4E6 and #R$F795.
;
; A Monster ID
; D Points to add to score digit
; E Digit to update
;
; Derive pointer to monster score messaging from the given ID.
@label=Handler_AddPoints
c$DD97 CP $01        ; {Jump to #R$DDA0 if #REGa is not targeting George
 $DD99 JR NZ,$DDA0   ; (#N$01).}
; George:
 $DD9B LD HL,$D066   ; #REGhl=#R$D066.
 $DD9E JR $DDAA      ; Jump to #R$DDAA.
; Ralph:
@label=AddPoints_CheckLizzy
*$DDA0 LD HL,$D082   ; #REGhl=#R$D082.
 $DDA3 CP $02        ; {Jump to #R$DDAA if #REGa is not targeting Lizzy (#N$02)
 $DDA5 JR NZ,$DDAA   ; (i.e. keep Ralph which was set above).}
; Lizzy:
 $DDA7 LD HL,$D074   ; #REGhl=#R$D074.
; Apply points to score.
@label=AddPointsToScore
*$DDAA LD A,E        ; {Work out which digit to update.
 $DDAB XOR %00000111 ;
 $DDAD DEC A         ;
 $DDAE LD E,A        ; }
 $DDAF LD A,D        ; #REGa=points to add.
 $DDB0 LD D,$00      ; {Move #REGhl to the appropriate score digit.
 $DDB2 ADD HL,DE     ; }
@label=AddPointsToScore_Loop
*$DDB3 ADD A,(HL)    ; #REGa=*#REGhl+point value held in #REGa.
 $DDB4 LD (HL),A     ; Write #REGa to *#REGhl.
 $DDB5 CP $3A        ; {Return if #REGa is lower than #N$3A (ASCII #N$39 is
 $DDB7 RET C         ; "#CHR$39").}
; This digit is higher than "#CHR$39" so subtract 10 to make it a valid number
; again.
 $DDB8 SUB $0A       ; #REGa-=#N$0A.
 $DDBA LD (HL),A     ; Update the current score digit.
; We work backwards here, as the smaller units are on the right-hand side. So now we want to add "1" to the next
;       digit. At it's simplest; 19+01 would first set "10" then move the pointer to the "tens" and add one to it to
;       equal 20.
 $DDBB DEC HL        ; Decrease the score pointer by one.
 $DDBC LD A,$01      ; #REGa=#N$01.
 $DDBE JR $DDB3      ; Jump to #R$DDB3.

; Choose Control Type
;
; Used by the routines at #R$F916, #R$F9BF and #R$FAA8.
@label=ChooseControlType
c$DDC0 LD DE,$FF2F                          ; #REGde=#N$FF2F.
 $DDC3 LD BC,$FEFE                          ; #REGbc=#N$FEFE.
@label=ReadKeyboard_Loop
*$DDC6 IN A,(C)                             ; Read from the keyboard.
 $DDC8 CPL                                  ; Invert the bits in #REGa.
 $DDC9 AND %00011111                        ; Keep only bits 0-4.
 $DDCB JR Z,$DDDA                           ; Jump to #R$DDDA if there's no
                                            ; match.
 $DDCD INC D                                ; Increment #REGd by one.
 $DDCE RET NZ                               ; Return if #REGd is not zero.
 $DDCF LD H,A                               ; #REGh=#REGa.
 $DDD0 LD A,E                               ; #REGa=#REGe.
*$DDD1 SUB $08                              ; #REGa-=#N$08.
 $DDD3 SRL H                                ; Shift #REGh right.
 $DDD5 JR NC,$DDD1                          ; Jump to #R$DDD1 if {} is higher.
 $DDD7 RET NZ                               ; Return if {} is not zero.
 $DDD8 LD D,A                               ; #REGd=#REGa.
 $DDD9 LD L,B                               ; #REGl=#REGb.
*$DDDA DEC E                                ; Decrease #REGe by one.
 $DDDB RLC B                                ; Rotate #REGb left (with carry).
 $DDDD JR C,$DDC6                           ; Jump to #R$DDC6 if {} is lower.
 $DDDF LD A,D                               ; #REGa=#REGd.
 $DDE0 AND %00111000                        ; Keep only bits 3-5.
 $DDE2 RRCA                                 ; {Rotate #REGa right three
 $DDE3 RRCA                                 ; positions (bits 3 to 5 are now in
 $DDE4 RRCA                                 ; positions 0 to 2).}
 $DDE5 PUSH HL                              ; Stash #REGhl on the stack.
 $DDE6 LD HL,$DDF2                          ; #REGhl=#R$DDF2.
 $DDE9 LD B,$00                             ; #REGb=#N$00.
 $DDEB LD C,A                               ; #REGc=#REGa.
 $DDEC ADD HL,BC                            ; #REGhl+=#REGbc.
 $DDED LD B,(HL)                            ; #REGb=*#REGhl.
 $DDEE POP HL                               ; Restore #REGhl from the stack.
 $DDEF LD H,B                               ; #REGh=#REGb.
 $DDF0 XOR A                                ; #REGa=#N$00.
 $DDF1 RET                                  ; Return.
 $DDF2 DEFB $10,$08,$04,$02,$01,$00,$00,$00 ;
 $DDFA DEFB $00,$00,$00,$00,$00,$00         ;

@org

; Entry Point
;
; When the game has loaded #R$6B00 contains this copyright splash.
; .
; #PUSHS #SIM(start=$DE06,stop=$DE11)
; #UDGTABLE
; { #SCR$02(splash-screen) }
; UDGTABLE#
; #POPS
@label=EntryPoint
c$DE00 XOR A         ; {#HTML(Write #N$00 to <a
 $DE01 LD ($5C48),A  ; href="https://skoolkid.github.io/rom/asm/5C48.html">BORDCR</a>.)
                     ; }
 $DE04 OUT ($FE),A   ; Set the border colour to BLACK.
 $DE06 LD HL,$6B00   ; #REGhl=#R$6B00.
 $DE09 LD DE,$4000   ; #REGde=#R$4000(#N$4000) (screen buffer).
 $DE0C LD BC,$1B00   ; #REGbc=#N$1B00.
 $DE0F LDIR          ; Copy the splash screen to the screen buffer.
; Show this for an extended period of time.
 $DE11 LD A,$0A      ; #REGa=#N$0A.
@label=GameEntryPoint_PauseLoop
*$DE13 CALL $FBEC    ; Call #R$FBEC.
 $DE16 DEC A         ; Decrease #REGa by one.
 $DE17 JR NZ,$DE13   ; Jump to #R$DE13 until #REGa is zero.
; Continue on to #R$DE19.

; Game Entry Point
@label=GameEntryPoint
c$DE19 CALL $F916    ; Call #R$F916.
 $DE1C CALL $FD2B    ; Call #R$FD2B.
 $DE1F XOR A         ; {Set the border colour to BLACK.
 $DE20 OUT ($FE),A   ; }
 $DE22 CALL $DF46    ; Call #R$DF46.
 $DE25 CALL $DEE1    ; Call #R$DEE1.
@label=GameStartLevel
*$DE28 CALL $DEC6    ; Call #R$DEC6.
 $DE2B LD A,($DF44)  ; #REGa=*#R$DF44.
 $DE2E CALL $DF90    ; Call #R$DF90.
; Game loop.
@label=GameLoop
*$DE31 CALL $F8CF    ; Call #R$F8CF.
; Is the game still in-play?
 $DE34 LD A,($D3FD)  ; {Jump to #R$DE19 if *#R$D3FD is not zero.
 $DE37 AND A         ;
 $DE38 JR NZ,$DE19   ; }
 $DE3A XOR A         ; {#HTML(Write #N$00 to <a
 $DE3B LD ($5C78),A  ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
                     ; }
; Check each monster state. If any are "in-play" then jump to #R$DE53. If not,
; we cycle back round to #R$DE19.
; .
; Is George still in-play?
 $DE3E LD A,($CFD2)  ; {Jump to #R$DE53 if *#R$CFD2 is not equal to #N$FF
 $DE41 CP $FF        ; (in-play).
 $DE43 JR NZ,$DE53   ; }
; Is Lizzy still in-play?
 $DE45 LD A,($D001)  ; {Jump to #R$DE53 if *#R$D001 is not equal to #N$FF
 $DE48 CP $FF        ; (in-play).
 $DE4A JR NZ,$DE53   ; }
; Is Ralph still in-play?
 $DE4C LD A,($D030)  ; {Jump to #R$DE19 if *#R$D030 is equal to #N$FF
 $DE4F CP $FF        ; (in-play).
 $DE51 JR Z,$DE19    ; }
; The game is in-play so run the handlers until the level is completed.
@label=Game_InPlay
*$DE53 LD A,($D3F3)  ; {Jump to #R$DE77 until *#R$D3F3 is zero - until all the
 $DE56 AND A         ; buildings have collapsed.
 $DE57 JR NZ,$DE77   ; }
; Keep running the handlers for a short while even though all the buildings have collapsed. It would be a bit
;       jarring if the level stopped instantly after the last building rubble cleared.s
 $DE59 LD A,($D216)  ; #REGa=*#R$D216.
 $DE5C DEC A         ; {Decrease *#R$D216 by one.
 $DE5D LD ($D216),A  ; }
 $DE60 JR NZ,$DE77   ; Jump to #R$DE77 until #REGa is zero.
; Level complete! Move onto the next level.
 $DE62 LD A,($DF44)  ; #REGa=*#R$DF44.
 $DE65 INC A         ; Increment level number by one.
; Check to see if all levels (#N$28 in total) have been played, if so loop back
; to level #N$01.
 $DE66 CP $29        ; {Jump to #R$DE6C if #REGa is not equal to #N$29.
 $DE68 JR NZ,$DE6C   ; }
; Else cycle back to level 1 again.
 $DE6A LD A,$01      ; #REGa=level #N$01.
@label=WriteLevelNumber
*$DE6C LD ($DF44),A  ; Write level number to *#R$DF44.
 $DE6F CALL $FD2B    ; Call #R$FD2B.
 $DE72 CALL $DF46    ; Call #R$DF46.
 $DE75 JR $DE28      ; Jump to #R$DE28.

; Run Handlers
;
; Used by the routine at #R$DE19.
@label=RunHandlers
c$DE77 CALL $EFE0    ; Call #R$EFE0.
 $DE7A CALL $DCA1    ; Call #R$DCA1.
 $DE7D CALL $F28B    ; Call #R$F28B.
 $DE80 CALL $F2CA    ; Call #R$F2CA.
 $DE83 CALL $D409    ; Call #R$D409.
 $DE86 CALL $F31C    ; Call #R$F31C.
 $DE89 CALL $E25D    ; Call #R$E25D.
 $DE8C CALL $F726    ; Call #R$F726.
 $DE8F CALL $DBE5    ; Call #R$DBE5.
 $DE92 CALL $FC39    ; Call #R$FC39.
 $DE95 CALL $E119    ; Call #R$E119.
 $DE98 CALL $F10E    ; Call #R$F10E.
 $DE9B CALL $FCB6    ; Call #R$FCB6.
 $DE9E CALL $F3EF    ; Call #R$F3EF.
 $DEA1 CALL $E576    ; Call #R$E576.
 $DEA4 CALL $F69F    ; Call #R$F69F.
 $DEA7 CALL $F788    ; Call #R$F788.
 $DEAA CALL $F434    ; Call #R$F434.
 $DEAD CALL $FC1A    ; Call #R$FC1A.
 $DEB0 CALL $D604    ; Call #R$D604.
 $DEB3 CALL $D5F8    ; Call #R$D5F8.
 $DEB6 CALL $F8BE    ; Call #R$F8BE.
 $DEB9 CALL $FF00    ; Call #R$FF00.
@label=WaitForFrameBuffer
*$DEBC LD A,($5C78)  ; #HTML(#REGhl=<a
                     ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
 $DEBF CP $06        ; {Jump to #R$DEBC if #REGa is lower than #N$06.
 $DEC1 JR C,$DEBC    ; }
 $DEC3 JP $DE31      ; Jump to #R$DE31.

; Routine at DEC6
;
; Used by the routine at #R$DE19.
c$DEC6 CALL $FBDB    ; Call #R$FBDB.
 $DEC9 LD A,$80      ; {Write #N$80 to #R$D210.
 $DECB LD ($D210),A  ; }
 $DECE LD A,$20      ; {Write #N$20 to #R$D216.
 $DED0 LD ($D216),A  ; }
 $DED3 LD HL,$D255   ; #REGhl=#R$D255.
 $DED6 LD D,H        ; {#REGde=#REGhl+#N$01.
 $DED7 LD E,L        ;
 $DED8 INC E         ; }
 $DED9 LD BC,$01AD   ; #REGbc=#N$01AD.
 $DEDC XOR A         ; {Write #N$00 to *#REGhl.
 $DEDD LD (HL),A     ; }
 $DEDE LDIR          ;
 $DEE0 RET           ; Return.

; Initialise New Game
;
; Used by the routine at #R$DE19.
@label=InitialiseNewGame
c$DEE1 XOR A           ; #REGa=#N$00 (face right).
; Set up George.
 $DEE2 LD IY,$CFD2     ; #REGiy=#R$CFD2.
 $DEE6 CALL $DF1F      ; Call #R$DF1F.
 $DEE9 LD (IY+$03),$01 ; Write #N$01 (face left) to monster direction
                       ; (*#REGiy+#N$03).
 $DEED LD (IY+$09),$15 ; Write #N$15 to monster X position (*#REGiy+#N$09).
; Set up Lizzy.
 $DEF1 LD IY,$D001     ; #REGiy=#R$D001.
 $DEF5 CALL $DF1F      ; Call #R$DF1F.
 $DEF8 LD (IY+$09),$FD ; Write #N$FD to monster X position (*#REGiy+#N$09).
; Set up Ralph.
 $DEFC LD IY,$D030     ; #REGiy=#R$D030.
 $DF00 CALL $DF1F      ; Call #R$DF1F.
 $DF03 LD (IY+$09),$08 ; Write #N$08 to monster X position (*#REGiy+#N$09).
; Set starting level.
 $DF07 LD A,$01        ; {Write #N$01 to *#R$DF44.
 $DF09 LD ($DF44),A    ; }
; Set all monster scores to "000000".
 $DF0C LD HL,$D066     ; #REGhl=#R$D066.
 $DF0F CALL $DF39      ; Call #R$DF39.
 $DF12 LD HL,$D074     ; #REGhl=#R$D074.
 $DF15 CALL $DF39      ; Call #R$DF39.
 $DF18 LD HL,$D082     ; #REGhl=#R$D082.
 $DF1B CALL $DF39      ; Call #R$DF39.
 $DF1E RET             ; Return.

; Set Monster States
;
; Used by the routine at #R$DEE1.
;
; A Default for
;
; See: #R$CFD2, #R$D001, #R$D030.
@label=SetMonsterStates
c$DF1F LD (IY+$00),$1C ; Write #N$1C (falling) to monster state (#REGiy+#N$00).
 $DF23 LD (IY+$02),A   ; {Write #REGa to: #LIST { #REGiy+#N$02 } { monster
 $DF26 LD (IY+$03),A   ; direction (#REGiy+#N$03) } { #REGiy+#N$08 } LIST#
 $DF29 LD (IY+$08),A   ; }
 $DF2C LD (IY+$04),$01 ; Write #N$01 to #REGiy+#N$04.
 $DF30 LD (IY+$0A),$FE ; Write #N$FE to monster Y position (#REGiy+#N$0A).
 $DF34 LD (IY+$0C),$40 ; Write #N$40 to monster energy (#REGiy+#N$0C).
 $DF38 RET             ; Return.

; Reset Score
;
; Used by the routine at #R$DEE1.
;
; HL Pointer to monsters score
@label=ResetScore
c$DF39 LD D,H        ; {#REGde=#REGhl+#N$01.
 $DF3A LD E,L        ;
 $DF3B INC E         ; }
 $DF3C LD BC,$0005   ; #REGbc=#N($0005,$04,$04).
 $DF3F LD (HL),$30   ; Write #N$30 (ASCII "0") to *#REGhl.
 $DF41 LDIR          ; Copy the "0" to the following five memory locations.
 $DF43 RET           ; Return.

; Game: Current Level
@label=CurrentLevel
g$DF44 DEFB $00

; Temporary Monster ID
@label=Temp_MonsterID
g$DF45 DEFB $00

; Set Monster Defaults
;
; Used by the routine at #R$DE19.
;
; .
;
; George:
@label=MonsterDefaults
c$DF46 LD IY,$CFD2     ; #REGiy=#R$CFD2.
 $DF4A CALL $DF68      ; Call #R$DF68.
 $DF4D LD (IY+$09),$01 ; Write #N$01 to #R$CFDB (*#REGiy+#N$09).
; Lizzy:
 $DF51 LD IY,$D001     ; #REGiy=#R$D001.
 $DF55 CALL $DF68      ; Call #R$DF68.
 $DF58 LD (IY+$09),$0D ; Write #N$0D to #R$D00A (*#REGiy+#N$09).
; Ralph:
 $DF5C LD IY,$D030     ; #REGiy=#R$D030.
 $DF60 CALL $DF68      ; Call #R$DF68.
 $DF63 LD (IY+$09),$19 ; Write #N$19 to #R$D039 (*#REGiy+#N$09).
 $DF67 RET             ; Return.
; Sets common defaults on #REGiy=Monster data.
@label=SetMonsterDefaults
*$DF68 LD A,(IY+$00)   ; {Return if the monster state (#REGiy+#N$00) is "No
 $DF6B CP $FF          ; Monster".
 $DF6D RET Z           ; }
 $DF6E XOR A           ; {Write #N$00 to: #LIST { State (#REGiy+#N$00) } {
 $DF6F LD (IY+$00),A   ; #REGiy+#N$02 } LIST#
 $DF72 LD (IY+$02),A   ; }
 $DF75 LD (IY+$03),$01 ; Write #N$01 (face left) to monster direction
                       ; (#REGiy+#N$03).
 $DF79 LD (IY+$04),A   ; Write #N$00 to #REGiy+#N$04.
 $DF7C LD (IY+$05),$19 ; Write #N$19 to #REGiy+#N$05.
 $DF80 LD (IY+$06),$03 ; Write #N$03 to #REGiy+#N$06.
 $DF84 LD (IY+$07),$19 ; Write #N$19 to #REGiy+#N$07.
 $DF88 LD (IY+$08),A   ; Write #N$00 to #REGiy+#N$08.
 $DF8B LD (IY+$0A),$12 ; Write #N$12 to Y position (#REGiy+#N$0A).
 $DF8F RET             ; Return.

; Find Scene
;
; Used by the routines at #R$DE19 and #R$F916.
;
; A Level
;
; In order to find the scene data for the requested level, the code "counts"
; the number of terminator bytes found.
@label=FindScene
c$DF90 LD E,A                               ; #REGe=level.
 $DF91 LD HL,$CDE2                          ; #REGhl=#R$CDE2.
@label=FindScene_Loop
*$DF94 LD A,(HL)                            ; #REGa=byte of scene data.
 $DF95 INC HL                               ; Increment scene data pointer by
                                            ; one.
; Check for a terminator byte.
 $DF96 CP $FF                               ; {Loop back to #R$DF94 until #REGa
 $DF98 JR NZ,$DF94                          ; is equal to #N$FF.}
; Only continue when the "level" has been decreased to zero.
;       This is when the appropriate scene data has been found.
 $DF9A DEC E                                ; Decrease level by one.
 $DF9B JR NZ,$DF94                          ; Jump to #R$DF94 until #REGe is
                                            ; zero.
; Process the scene data.
 $DF9D LD A,(HL)                            ; #REGa=byte of scene data.
 $DF9E PUSH HL                              ; Stash the scene data pointer on
                                            ; the stack temporarily.
 $DF9F CALL $D50C                           ; Call #R$D50C.
 $DFA2 POP HL                               ; Restore the scene data pointer
                                            ; from the stack.
 $DFA3 INC HL                               ; Increment the scene data pointer
                                            ; by one.
 $DFA4 LD A,(HL)                            ; #REGa=byte of scene data.
 $DFA5 PUSH HL                              ; Stash the scene data pointer on
                                            ; the stack temporarily.
 $DFA6 CALL $D55B                           ; Call #R$D55B.
 $DFA9 POP HL                               ; Restore the scene data pointer
                                            ; from the stack.
 $DFAA INC HL                               ; Increment the scene data pointer
                                            ; by one.
 $DFAB LD A,(HL)                            ; #REGa=byte of scene data.
 $DFAC AND %01111000                        ; Keep only bits 3-6.
 $DFAE RRCA                                 ; {Rotate #REGa right three
 $DFAF RRCA                                 ; positions (bits 3 to 6 are now in
 $DFB0 RRCA                                 ; positions 0 to 3).}
 $DFB1 PUSH HL                              ; Stash the scene data pointer on
                                            ; the stack temporarily.
 $DFB2 LD ($D400),A                         ; Write #REGa to *#R$D400.
 $DFB5 CALL $D593                           ; Call #R$D593.
 $DFB8 POP HL                               ; Restore the scene data pointer
                                            ; from the stack.
 $DFB9 XOR A                                ; {Write #N$00 to: #LIST { *#R$D220
 $DFBA LD ($D220),A                         ; } { *#R$D222 } LIST#
 $DFBD LD ($D222),A                         ; }
; Set the number of buildings for this level.
 $DFC0 LD A,(HL)                            ; #REGa=*#REGhl.
 $DFC1 AND %00000111                        ; Keep only bits 0-2.
 $DFC3 LD ($D3F3),A                         ; Write #REGa to *#R$D3F3.
 $DFC6 INC HL                               ; Increment the scene data pointer
                                            ; by one.
*$DFC7 PUSH AF                              ; {Stash #REGaf and #REGhl on the
 $DFC8 PUSH HL                              ; stack.}
 $DFC9 LD HL,$D39F                          ; #REGhl=#R$D39F.
 $DFCC LD A,($D220)                         ; #REGa=*#R$D220.
 $DFCF LD D,$00                             ; #REGd=#N$00.
 $DFD1 LD E,A                               ; #REGe=#REGa.
 $DFD2 ADD HL,DE                            ; #REGhl+=#REGde.
 $DFD3 PUSH HL                              ; {#REGix=#REGhl using the stack.
 $DFD4 POP IX                               ; }
 $DFD6 ADD A,$0E                            ; #REGa+=#N$0E.
 $DFD8 LD ($D220),A                         ; Write #REGa to *#R$D220.
 $DFDB LD A,($D222)                         ; #REGa=*#R$D222.
 $DFDE INC A                                ; Increment #REGa by one.
 $DFDF LD ($D222),A                         ; Write #REGa to *#R$D222.
 $DFE2 POP HL                               ; Restore #REGhl from the stack.
 $DFE3 LD A,(HL)                            ; #REGa=*#REGhl.
 $DFE4 AND %01111111                        ; Keep only bits 0-6.
 $DFE6 LD E,A                               ; #REGe=#REGa.
 $DFE7 LD A,(HL)                            ; #REGa=*#REGhl.
 $DFE8 AND %10000000                        ; Keep only bit 7.
 $DFEA RLCA                                 ; Move bit 7 to bit 0, and also
                                            ; set/ unset the carry flag.
 $DFEB INC A                                ; Increment #REGa by one.
 $DFEC EX AF,AF'                            ; Exchange the #REGaf register with
                                            ; the shadow #REGaf register.
 $DFED INC HL                               ; Increment #REGhl by one.
 $DFEE LD A,(HL)                            ; #REGa=*#REGhl.
 $DFEF AND %11100000                        ; Keep only bits 5-7.
 $DFF1 RLCA                                 ; {Rotate #REGa left three
 $DFF2 RLCA                                 ; positions (bits 5 to 7 are now in
 $DFF3 RLCA                                 ; positions 0 to 2).}
 $DFF4 LD B,$00                             ; #REGb=#N$00.
 $DFF6 LD C,A                               ; #REGc=#REGa.
 $DFF7 PUSH HL                              ; Stash #REGhl on the stack.
 $DFF8 LD HL,$E0A5                          ; #REGhl=#R$E0A5.
 $DFFB ADD HL,BC                            ; #REGhl+=#REGbc.
 $DFFC LD D,(HL)                            ; #REGd=*#REGhl.
 $DFFD POP HL                               ; Restore #REGhl from the stack.
 $DFFE LD A,(HL)                            ; #REGa=*#REGhl.
 $DFFF AND %00011111                        ; Keep only bits 0-4.
 $E001 LD C,A                               ; #REGc=#REGa.
 $E002 INC HL                               ; Increment #REGhl by one.
 $E003 PUSH HL                              ; Stash #REGhl on the stack.
 $E004 LD HL,$0080                          ; #REGhl=#N($0080,$04,$04).
 $E007 ADD HL,BC                            ; #REGhl+=#REGbc.
 $E008 LD C,$08                             ; #REGc=#N$08.
 $E00A LD A,E                               ; #REGa=#REGe.
 $E00B DEC A                                ; Decrease #REGa by one.
*$E00C DEC C                                ; Decrease #REGc by one.
 $E00D SUB $06                              ; #REGa-=#N$06.
 $E00F JR NC,$E00C                          ; Jump to #R$E00C if there's no
                                            ; carry (i.e. #REGa was higher than
                                            ; #N$06).
 $E011 RRC C                                ; {Rotate #REGc right three
 $E013 RRC C                                ; positions.
 $E015 RRC C                                ; }
 $E017 ADD HL,BC                            ; #REGhl+=#REGbc.
 $E018 LD B,H                               ; #REGb=#REGh.
 $E019 LD C,L                               ; #REGc=#REGl.
 $E01A EX AF,AF'                            ; Exchange the #REGaf register with
                                            ; the shadow #REGaf register.
 $E01B CALL $DA71                           ; Call #R$DA71.
 $E01E LD HL,$D31F                          ; #REGhl=#R$D31F.
 $E021 LD A,(IX+$07)                        ; #REGa=*#REGix+#N$07.
 $E024 RRCA                                 ; Rotate #REGa left one position,
                                            ; setting the carry flag if bit 0
                                            ; was set.
 $E025 JR C,$E02A                           ; Jump to #R$E02A if the carry flag
                                            ; was set.
 $E027 LD HL,$D35F                          ; #REGhl=#R$D35F.
*$E02A LD D,$00                             ; #REGd=#N$00.
 $E02C LD E,(IX+$01)                        ; #REGe=*#REGix+#N$01.
 $E02F ADD HL,DE                            ; #REGhl+=#REGde.
 $E030 LD A,(IX+$02)                        ; #REGa=*#REGix+#N$02.
 $E033 SUB E                                ; #REGa-=#REGe.
 $E034 INC A                                ; Increment #REGa by one.
 $E035 LD B,A                               ; #REGb=#REGa.
*$E036 LD A,($D222)                         ; #REGa=*#R$D222.
 $E039 LD (HL),A                            ; Write #REGa to *#REGhl.
 $E03A PUSH HL                              ; Stash #REGhl on the stack.
 $E03B LD E,$20                             ; #REGe=#N$20.
 $E03D ADD HL,DE                            ; #REGhl+=#REGde.
 $E03E LD A,(IX+$08)                        ; #REGa=*#REGix+#N$08.
 $E041 LD (HL),A                            ; Write #REGa to *#REGhl.
 $E042 POP HL                               ; Restore #REGhl from the stack.
 $E043 INC HL                               ; Increment #REGhl by one.
 $E044 DJNZ $E036                           ; Decrease counter by one and loop
                                            ; back to #R$E036 until counter is
                                            ; zero.
 $E046 POP HL                               ; {Restore #REGhl and #REGaf from
 $E047 POP AF                               ; the stack.}
 $E048 DEC A                                ; Decrease #REGa by one.
 $E049 JP NZ,$DFC7                          ; Jump to #R$DFC7 until #REGa is
                                            ; zero.
 $E04C LD HL,$D31F                          ; #REGhl=#R$D31F.
 $E04F LD DE,$D35F                          ; #REGde=#R$D35F.
 $E052 LD B,$20                             ; #REGb=#N$20 (counter).
*$E054 LD A,(DE)                            ; #REGa=*#REGde.
 $E055 RLCA                                 ; {Rotate #REGa left three
 $E056 RLCA                                 ; positions.
 $E057 RLCA                                 ; }
 $E058 OR (HL)                              ; Set the bits from *#REGhl.
 $E059 LD (HL),A                            ; Write #REGa to *#REGhl.
 $E05A INC HL                               ; Increment #REGhl by one.
 $E05B INC DE                               ; Increment #REGde by one.
 $E05C DJNZ $E054                           ; Decrease counter by one and loop
                                            ; back to #R$E054 until counter is
                                            ; zero.
; Default to not using the train.
 $E05E LD A,$FE                             ; {Write #N$FE (spawning "off") to
 $E060 LD ($D405),A                         ; *#R$D405.}
 $E063 LD A,($D400)                         ; {Jump to #R$E099 if *#R$D400 is
 $E066 CP $02                               ; equal to #N$02.
 $E068 JR Z,$E099                           ; }
 $E06A CP $05                               ; {Jump to #R$E09E if #REGa is
 $E06C JR Z,$E09E                           ; equal to #N$05.}
; Anything else uses vehicles.
 $E06E LD A,$18                             ; {Write #N$18 to *#R$D401.
 $E070 LD ($D401),A                         ; }
@label=Helicopters_CalculateCount
*$E073 LD A,($DF44)                         ; #REGa=*#R$DF44.
; Divide the level number by #N$08 but ensure the result is no higher than
; #N$07.
 $E076 RRCA                                 ; {Rotate #REGa right three
 $E077 RRCA                                 ; positions (bits 3 to 5 are now in
 $E078 RRCA                                 ; positions 0 to 2).}
 $E079 AND %00000111                        ; Keep only bits 0-2.
; Always ensure there are at least two helicopters.
 $E07B ADD A,$02                            ; #REGa+=#N$02.
; Don't allow any more than six helicopters.
 $E07D CP $07                               ; {Jump to #R$E083 if #REGa is
 $E07F JR C,$E083                           ; lower than #N$07.}
; Else, set the limit of six which is the maximum the game can support.
 $E081 LD A,$06                             ; #REGa=#N$06.
@label=Helicopter_SetCount
*$E083 LD ($D212),A                         ; Write #REGa to *#R$D212.
 $E086 LD A,($DF44)                         ; #REGa=*#R$DF44.
; Divide the level number by #N$04 but ensure the result is no higher than
; #N$0F.
 $E089 RRCA                                 ; {Rotate #REGa right two positions
 $E08A RRCA                                 ; (bits 2 to 5 are now in positions
                                            ; 0 to 3).}
 $E08B AND %00001111                        ; Keep only bits 0-3.
 $E08D ADD A,$06                            ; #REGa+=#N$06.
 $E08F CP $11                               ; {Jump to #R$E095 if #REGa is
 $E091 JR C,$E095                           ; lower than #N$11.}
 $E093 LD A,$10                             ; {Write #N$10 to *#R$D211.
*$E095 LD ($D211),A                         ; }
 $E098 RET                                  ; Return.
; Sets the train countdown and turns off vehicles as they can't co-exist.
@label=Train_Enable
*$E099 LD A,$20                             ; {Write #N$20 to *#R$D405.
 $E09B LD ($D405),A                         ; }
@label=Vehicle_Disable
*$E09E LD A,$FE                             ; {Write #N$FE (spawning "off") to
 $E0A0 LD ($D401),A                         ; *#R$D401.}
 $E0A3 JR $E073                             ; Jump to #R$E073.
 $E0A5 DEFB $50,$58,$60,$20,$70,$30,$78,$38 ;

; Routine at E0AD
;
; Used by the routines at #R$E62D, #R$E68C and #R$EAF6.
c$E0AD LD HL,$D24D   ; #REGhl=#R$D24D.
 $E0B0 LD A,C        ; #REGa=#REGc.
 $E0B1 AND A         ; {Jump to #R$E0C1 if the sign flag set.
 $E0B2 JP M,$E0C1    ; }
 $E0B5 ADD A,(HL)    ; #REGa+=*#REGhl.
 $E0B6 LD C,A        ; #REGc=#REGa.
*$E0B7 INC HL        ; Increment #REGhl by one.
 $E0B8 LD A,B        ; #REGa=#REGb.
 $E0B9 AND A         ; {Jump to #R$E0C9 if the sign flag set.
 $E0BA JP M,$E0C9    ; }
 $E0BD ADD A,(HL)    ; #REGa+=*#REGhl.
 $E0BE LD B,A        ; #REGb=#REGa.
 $E0BF JR $E0CF      ; Jump to #R$E0CF.
*$E0C1 XOR %10000000 ; Flip bit 7.
 $E0C3 SUB (HL)      ; #REGa-=*#REGhl.
 $E0C4 CPL           ; Invert the bits in #REGa.
 $E0C5 INC A         ; Increment #REGa by one.
 $E0C6 LD C,A        ; #REGc=#REGa.
 $E0C7 JR $E0B7      ; Jump to #R$E0B7.
*$E0C9 XOR %10000000 ; Flip bit 7.
 $E0CB SUB (HL)      ; #REGa-=*#REGhl.
 $E0CC CPL           ; Invert the bits in #REGa.
 $E0CD INC A         ; Increment #REGa by one.
 $E0CE LD B,A        ; #REGb=#REGa.
; This entry point is used by the routines at #R$E25D, #R$F450 and #R$F4E6.
*$E0CF LD A,C        ; #REGa=#REGc.
 $E0D0 CP $20        ; {Jump to #R$E10A if #REGa is higher than #N$20.
 $E0D2 JR NC,$E10A   ; }
 $E0D4 LD A,B        ; #REGa=#REGb.
 $E0D5 CP $18        ; {Jump to #R$E10A if #REGa is higher than #N$18.
 $E0D7 JR NC,$E10A   ; }
 $E0D9 RRCA          ; {RRCA.
 $E0DA RRCA          ;
 $E0DB RRCA          ; }
 $E0DC LD L,A        ; #REGl=#REGa.
 $E0DD AND %00000011 ; Keep only bits 0-1.
 $E0DF ADD A,$65     ; #REGa+=#N$65.
 $E0E1 LD H,A        ; #REGh=#REGa.
 $E0E2 LD A,L        ; #REGa=#REGl.
 $E0E3 AND %11100000 ; Keep only bits 5-7.
 $E0E5 ADD A,C       ; #REGa+=#REGc.
 $E0E6 LD L,A        ; #REGl=#REGa.
 $E0E7 LD A,(HL)     ; {Jump to #R$E0FE if *#REGhl is not zero.
 $E0E8 AND A         ;
 $E0E9 JR NZ,$E0FE   ; }
 $E0EB DEC H         ; {Decrease #REGh by three.
 $E0EC DEC H         ;
 $E0ED DEC H         ; }
 $E0EE LD A,(HL)     ; {Jump to #R$E0FE if *#REGhl is not zero.
 $E0EF AND A         ;
 $E0F0 JR NZ,$E0FE   ; }
 $E0F2 LD A,D        ; #REGa=#REGd.
 $E0F3 CP $3D        ; {Jump to #R$E113 if #REGa is not equal to #N$3D.
 $E0F5 JR NZ,$E113   ; }
 $E0F7 DEC H         ; {Decrease #REGh by three.
 $E0F8 DEC H         ;
 $E0F9 DEC H         ; }
 $E0FA LD A,(HL)     ; {Jump to #R$E114 if *#REGhl is zero.
 $E0FB AND A         ;
 $E0FC JR Z,$E114    ; }
*$E0FE CP D          ; {Jump to #R$E114 if #REGa is lower than #REGd.
 $E0FF JR C,$E114    ; }
 $E101 INC E         ; Increment #REGe by one.
 $E102 CP E          ; {Jump to #R$E114 if #REGa is higher than #REGe.
 $E103 JR NC,$E114   ; }
 $E105 LD ($D215),A  ; Write #REGa to *#R$D215.
 $E108 OR A          ; Set the bits from #REGa.
 $E109 RET           ; Return.
*$E10A POP HL        ; Restore #REGhl from the stack.
 $E10B LD A,($D3FB)  ; {Jump to #R$EF86 if *#R$D3FB is zero.
 $E10E AND A         ;
 $E10F JP Z,$EF86    ; }
 $E112 PUSH HL       ; Stash #REGhl on the stack.
*$E113 XOR A         ; {Write #N$00 to *#R$D215.
*$E114 LD ($D215),A  ; }
 $E117 XOR A         ; #REGa=#N$00.
 $E118 RET           ; Return.

; Routine at E119
;
; Used by the routine at #R$DE77.
;
; .
;
; George:
c$E119 LD HL,$CFD2   ; #REGhl=#R$CFD2.
 $E11C CALL $E16B    ; Call #R$E16B.
 $E11F CALL $E62D    ; Call #R$E62D.
 $E122 CALL $F3CA    ; Call #R$F3CA.
 $E125 LD DE,$CFD2   ; #REGde=#R$CFD2.
 $E128 CALL $E170    ; Call #R$E170.
; Lizzy:
 $E12B LD HL,$D001   ; #REGhl=#R$D001.
 $E12E CALL $E16B    ; Call #R$E16B.
 $E131 CALL $E62D    ; Call #R$E62D.
 $E134 LD HL,$D22C   ; #REGhl=#R$D22C.
 $E137 LD DE,$D23E   ; #REGde=#R$D23E.
 $E13A CALL $F41A    ; Call #R$F41A.
 $E13D CALL $F3CA    ; Call #R$F3CA.
 $E140 LD DE,$D001   ; #REGde=#R$D001.
 $E143 CALL $E170    ; Call #R$E170.
; Ralph:
 $E146 LD HL,$D030   ; #REGhl=#R$D030.
 $E149 CALL $E16B    ; Call #R$E16B.
 $E14C CALL $E62D    ; Call #R$E62D.
 $E14F LD HL,$D22C   ; #REGhl=#R$D22C.
 $E152 LD DE,$D23E   ; #REGde=#R$D23E.
 $E155 CALL $F41A    ; Call #R$F41A.
 $E158 LD HL,$D232   ; #REGhl=#R$D232.
 $E15B LD DE,$D23F   ; #REGde=#R$D23F.
 $E15E CALL $F41A    ; Call #R$F41A.
 $E161 CALL $F3CA    ; Call #R$F3CA.
 $E164 LD DE,$D030   ; #REGde=#R$D030.
 $E167 CALL $E170    ; Call #R$E170.
 $E16A RET           ; Return.
*$E16B LD DE,$D244   ; #REGde=#R$D244.
 $E16E JR $E173      ; Jump to #R$E173.
*$E170 LD HL,$D244   ; #REGhl=#R$D244.
*$E173 LD BC,$0011   ; #REGbc=#N($0011,$04,$04).
 $E176 LDIR          ; LDIR.
 $E178 RET           ; Return.

; Controls?
;
; Used by the routines at #R$E68C, #R$E99B, #R$EA9C, #R$EAF6 and #R$EF50.
@label=Controls
c$E179 LD A,($D252)  ; {Jump to #R$E1CE if *#R$D252 is not zero.
 $E17C AND A         ;
 $E17D JR NZ,$E1CE   ; }
*$E17F CALL $DA28    ; {Write a random number between 0-31 to *#R$D217.
 $E182 AND %00011111 ;
 $E184 LD ($D217),A  ; }
 $E187 LD A,($D248)  ; #REGa=*#R$D248.
 $E18A RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E18B JR NC,$E193   ; Jump to #R$E193 if the carry flag is not set.
 $E18D LD A,$08      ; {Write #N$08 to *#R$D217.
 $E18F LD ($D217),A  ; }
 $E192 RET           ; Return.
*$E193 LD A,($D246)  ; #REGa=*#R$D246.
 $E196 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E197 JR NC,$E1A1   ; Jump to #R$E1A1 if the carry flag is not set.
 $E199 LD A,($D217)  ; {Jump to #R$E17F if *#R$D217 is equal to #N$10.
 $E19C CP $10        ;
 $E19E JR Z,$E17F    ; }
 $E1A0 RET           ; Return.
*$E1A1 LD A,($D24E)  ; #REGa=*#R$D24E.
 $E1A4 CP $11        ; Compare #REGa with #N$11...
 $E1A6 LD A,($D217)  ; #REGa=*#R$D217.
 $E1A9 RET C         ; Return if #REGa was is lower than #N$11 on line #R$E1A4.
 $E1AA CP $10        ; {Jump to #R$E17F if #REGa is equal to #N$10.
 $E1AC JR Z,$E17F    ; }
 $E1AE LD A,($D24D)  ; #REGa=*#R$D24D.
 $E1B1 CP $FA        ; {Jump to #R$E1C3 if #REGa is higher than #N$FA.
 $E1B3 JR NC,$E1C3   ; }
 $E1B5 CP $03        ; {Jump to #R$E1C3 if #REGa is lower than #N$03.
 $E1B7 JR C,$E1C3    ; }
 $E1B9 CP $1B        ; Compare #REGa with #N$1B...
 $E1BB LD A,($D217)  ; #REGa=*#R$D217.
 $E1BE RET C         ; Return if #REGa was lower #N$1B on line #R$E1B9.
 $E1BF RES 1,A       ; Reset bit 1 of #REGa.
 $E1C1 JR $E1C8      ; Jump to #R$E1C8.
*$E1C3 LD A,($D217)  ; #REGa=*#R$D217.
 $E1C6 RES 0,A       ; Reset bit 0 of #REGa.
*$E1C8 RES 4,A       ; Reset bit 4 of #REGa.
 $E1CA LD ($D217),A  ; Write #REGa to *#R$D217.
 $E1CD RET           ; Return.
*$E1CE ADD A,A       ; #REGa+=#REGa.
 $E1CF LD H,$00      ; #REGh=#N$00.
 $E1D1 LD L,A        ; #REGl=#REGa.
 $E1D2 LD DE,$E24F   ; #REGde=#R$E24F.
 $E1D5 ADD HL,DE     ; #REGhl+=#REGde.
 $E1D6 LD A,(HL)     ; #REGa=*#REGhl.
 $E1D7 INC HL        ; Increment #REGhl by one.
 $E1D8 LD H,(HL)     ; #REGh=*#REGhl.
 $E1D9 LD L,A        ; #REGl=#REGa.
 $E1DA JP (HL)       ; Jump to the address held by *#REGhl.
 $E1DB XOR A         ; #REGa=#N$00.
 $E1DC JP $E243      ; Jump to #R$E243.
 $E1DF LD A,$F7      ; #REGa=#N$F7.
 $E1E1 IN A,($FE)    ;
 $E1E3 XOR %10111111 ; Flip bits 0-5 and 7.
 $E1E5 AND %00011111 ; Keep only bits 0-4.
 $E1E7 JP $E243      ; Jump to #R$E243.
 $E1EA LD A,$EF      ; #REGa=#N$EF.
 $E1EC IN A,($FE)    ;
 $E1EE LD B,$C6      ; #REGb=#N$C6.
 $E1F0 LD C,A        ;
 $E1F1 LD A,(BC)     ; #REGa=*#REGbc.
 $E1F2 RRCA          ; {RRCA.
 $E1F3 RRCA          ;
 $E1F4 RRCA          ; }
 $E1F5 XOR %10111111 ; Flip bits 0-5 and 7.
 $E1F7 AND %00011111 ; Keep only bits 0-4.
 $E1F9 JP $E243      ; Jump to #R$E243.
 $E1FC IN A,($1F)    ;
 $E1FE AND %00011111 ; Keep only bits 0-4.
 $E200 JP Z,$E243    ; Jump to #R$E243 if the result is zero.
 $E203 LD B,A        ; #REGb=#REGa.
 $E204 AND %00000011 ; Keep only bits 0-1.
 $E206 LD A,B        ; #REGa=#REGb.
 $E207 JP Z,$E20C    ; Jump to #R$E20C if #REGa is zero.
 $E20A XOR %00000011 ; Flip bits 0-1.
*$E20C OR A          ; Set the bits from #REGa.
 $E20D JP $E243      ; Jump to #R$E243.
 $E210 LD HL,$C850   ; #REGhl=#R$C850.
 $E213 JR $E21D      ; Jump to #R$E21D.
 $E215 LD HL,$C85A   ; #REGhl=#R$C85A.
 $E218 JR $E21D      ; Jump to #R$E21D.
 $E21A LD HL,$C864   ; #REGhl=#R$C864.
*$E21D LD C,$00      ; #REGc=#N$00.
 $E21F CALL $E248    ; Call #R$E248.
 $E222 JR NZ,$E226   ; Jump to #R$E226 if {} is not zero.
 $E224 SET 0,C       ; Set bit 0 of #REGc.
*$E226 CALL $E248    ; Call #R$E248.
 $E229 JR NZ,$E22D   ; Jump to #R$E22D if {} is not zero.
 $E22B SET 1,C       ; Set bit 1 of #REGc.
*$E22D CALL $E248    ; Call #R$E248.
 $E230 JR NZ,$E234   ; Jump to #R$E234 if {} is not zero.
 $E232 SET 3,C       ; Set bit 3 of #REGc.
*$E234 CALL $E248    ; Call #R$E248.
 $E237 JR NZ,$E23B   ; Jump to #R$E23B if {} is not zero.
 $E239 SET 2,C       ; Set bit 2 of #REGc.
*$E23B CALL $E248    ; Call #R$E248.
 $E23E JR NZ,$E242   ; Jump to #R$E242 if {} is not zero.
 $E240 SET 4,C       ; Set bit 4 of #REGc.
*$E242 LD A,C        ; #REGa=#REGc.
*$E243 AND A         ; Set flags.
 $E244 LD ($D217),A  ; Write #REGa to *#R$D217.
 $E247 RET           ; Return.
*$E248 LD A,(HL)     ; #REGa=*#REGhl.
 $E249 IN A,($FE)    ;
 $E24B INC HL        ; Increment #REGhl by one.
 $E24C AND (HL)      ; Merge the bits from *#REGhl.
 $E24D INC HL        ; Increment #REGhl by one.
 $E24E RET           ; Return.
 $E24F DEFW $E1DB    ;
 $E251 DEFW $E1DF    ;
 $E253 DEFW $E1EA    ;
 $E255 DEFW $E1FC    ;
 $E257 DEFW $E210    ;
 $E259 DEFW $E215    ;
 $E25B DEFW $E21A    ;

; Routine at E25D
;
; Used by the routine at #R$DE77.
c$E25D LD B,$10      ; #REGb=#N$10.
 $E25F XOR A         ; {Write #N$00 to *#R$D247.
 $E260 LD ($D247),A  ; }
 $E263 LD HL,$D255   ; #REGhl=#R$D255.
*$E266 PUSH BC       ; Stash #REGbc on the stack.
 $E267 LD A,(HL)     ; #REGa=*#REGhl.
 $E268 INC HL        ; Increment #REGhl by one.
 $E269 AND A         ; {Jump to #R$E54D if #REGa is zero.
 $E26A JP Z,$E54D    ; }
 $E26D EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $E26E PUSH HL       ; Stash #REGhl on the stack.
 $E26F INC HL        ; Increment #REGhl by one.
 $E270 LD C,(HL)     ; #REGc=*#REGhl.
 $E271 INC HL        ; Increment #REGhl by one.
 $E272 LD B,(HL)     ; #REGb=*#REGhl.
 $E273 LD DE,$0108   ; #REGde=#N($0108,$04,$04).
 $E276 CALL $E0CF    ; Call #R$E0CF.
 $E279 JR NZ,$E286   ; Jump to #R$E286 if {} is not zero.
 $E27B POP HL        ; Restore #REGhl from the stack.
 $E27C DEC HL        ; Decrease #REGhl by one.
 $E27D XOR A         ; Reset the bits from #REGa.
 $E27E LD (HL),A     ; Write #REGa to *#REGhl.
 $E27F INC HL        ; {Increment #REGhl by four.
 $E280 INC HL        ;
 $E281 INC HL        ;
 $E282 INC HL        ; }
 $E283 JP $E550      ; Jump to #R$E550.
*$E286 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $E287 DEC A         ; Decrease #REGa by one.
 $E288 ADD A,A       ; #REGa+=#REGa.
 $E289 LD D,$00      ; #REGd=#N$00.
 $E28B LD E,A        ; #REGe=#REGa.
 $E28C LD HL,$E556   ; #REGhl=#R$E556.
 $E28F ADD HL,DE     ; #REGhl+=#REGde.
 $E290 LD A,(HL)     ; #REGa=*#REGhl.
 $E291 INC HL        ; Increment #REGhl by one.
 $E292 LD H,(HL)     ; #REGh=*#REGhl.
 $E293 LD L,A        ; #REGl=#REGa.
 $E294 JP (HL)       ; Jump to *#REGhl.
 $E295 POP HL        ; Restore #REGhl from the stack.
 $E296 LD A,(HL)     ; #REGa=*#REGhl.
 $E297 DEC A         ; Decrease #REGa by one.
 $E298 LD (HL),A     ; Write #REGa to *#REGhl.
 $E299 JP NZ,$E54D   ; Jump to #R$E54D until #REGa is zero.
 $E29C LD (HL),$10   ; Write #N$10 to *#REGhl.
 $E29E DEC HL        ; Decrease #REGhl by one.
 $E29F LD (HL),$02   ; Write #N$02 to *#REGhl.
 $E2A1 POP BC        ; Restore #REGbc from the stack.
 $E2A2 JP $E266      ; Jump to #R$E266.
 $E2A5 POP HL        ; Restore #REGhl from the stack.
 $E2A6 LD A,(HL)     ; #REGa=*#REGhl.
 $E2A7 DEC A         ; Decrease #REGa by one.
 $E2A8 LD (HL),A     ; Write #REGa to *#REGhl.
 $E2A9 JP NZ,$E54D   ; Jump to #R$E54D until #REGa is zero.
 $E2AC LD (HL),$0E   ; Write #N$0E to *#REGhl.
 $E2AE DEC HL        ; Decrease #REGhl by one.
 $E2AF CALL $DA28    ; {Get a random number between 0-15.
 $E2B2 AND %00001111 ; }
 $E2B4 INC A         ; Increment #REGa by one.
 $E2B5 LD (HL),A     ; Write #REGa to *#REGhl.
 $E2B6 POP BC        ; Restore #REGbc from the stack.
 $E2B7 JP $E266      ; Jump to #R$E266.
*$E2BA CALL $DA28    ; Call #R$DA28.
 $E2BD CP $08        ; {Return if #REGa is higher than #N$08.
 $E2BF RET NC        ; }
 $E2C0 LD (HL),$CE   ; Write #N$CE to *#REGhl.
 $E2C2 RET           ; Return.
*$E2C3 LD (HL),$20   ; Write #N$20 to *#REGhl.
 $E2C5 DEC HL        ; Decrease #REGhl by one.
 $E2C6 LD (HL),$01   ; Write #N$01 to *#REGhl.
 $E2C8 POP BC        ; Restore #REGbc from the stack.
 $E2C9 JP $E266      ; Jump to #R$E266.
 $E2CC POP HL        ; Restore #REGhl from the stack.
*$E2CD LD A,(HL)     ; #REGa=*#REGhl.
 $E2CE DEC A         ; Decrease #REGa by one.
 $E2CF LD (HL),A     ; Write #REGa to *#REGhl.
 $E2D0 CP $C8        ; {Jump to #R$E36B if #REGa is higher than #N$C8.
 $E2D2 JP NC,$E36B   ; }
 $E2D5 CP $5A        ; {Jump to #R$E319 if #REGa is higher than #N$5A.
 $E2D7 JR NC,$E319   ; }
 $E2D9 CP $50        ; {Jump to #R$E320 if #REGa is higher than #N$50.
 $E2DB JR NC,$E320   ; }
 $E2DD CP $46        ; {Jump to #R$E327 if #REGa is higher than #N$46.
 $E2DF JR NC,$E327   ; }
 $E2E1 CP $3C        ; {Jump to #R$E333 if #REGa is higher than #N$3C.
 $E2E3 JR NC,$E333   ; }
 $E2E5 CP $32        ; {Jump to #R$E341 if #REGa is higher than #N$32.
 $E2E7 JR NC,$E341   ; }
 $E2E9 CP $28        ; {Jump to #R$E348 if #REGa is higher than #N$28.
 $E2EB JR NC,$E348   ; }
 $E2ED CP $1E        ; {Jump to #R$E34F if #REGa is higher than #N$1E.
 $E2EF JR NC,$E34F   ; }
 $E2F1 CP $14        ; {Jump to #R$E35B if #REGa is higher than #N$14.
 $E2F3 JR NC,$E35B   ; }
 $E2F5 CP $0A        ; {Jump to #R$E365 if #REGa is higher than #N$0A.
 $E2F7 JR NC,$E365   ; }
*$E2F9 AND A         ; Set flags.
 $E2FA LD A,$C2      ; #REGa=#N$C2.
 $E2FC JR NZ,$E33B   ; Jump to #R$E33B if {} is not zero.
 $E2FE CALL $E2BA    ; Call #R$E2BA.
 $E301 JR C,$E2CD    ; Jump to #R$E2CD if {} is lower.
 $E303 LD A,($D3FA)  ; #REGa=*#R$D3FA.
 $E306 INC A         ; Increment #REGa by one.
 $E307 CP $07        ; {Jump to #R$E2CD if #REGa is equal to #N$07.
 $E309 JR Z,$E2CD    ; }
 $E30B LD ($D3FA),A  ; Write #REGa to *#R$D3FA.
 $E30E CALL $DB7E    ; Call #R$DB7E.
 $E311 INC HL        ; Increment #REGhl by one.
 $E312 LD A,(HL)     ; #REGa=*#REGhl.
 $E313 DEC HL        ; Decrease #REGhl by one.
 $E314 CP B          ; {Jump to #R$E33E if #REGa is higher than #REGb.
 $E315 JR NC,$E33E   ; }
 $E317 LD (HL),$62   ; Write #N$62 to *#REGhl.
*$E319 LD A,$C2      ; #REGa=#N$C2.
 $E31B JR NZ,$E33B   ; Jump to #R$E33B if {} is not zero.
 $E31D LD (HL),$55   ; Write #N$55 to *#REGhl.
 $E31F OR A          ; Set the bits from #REGa.
*$E320 LD A,$C4      ; #REGa=#N$C4.
 $E322 JR NZ,$E33B   ; Jump to #R$E33B if {} is not zero.
 $E324 LD (HL),$47   ; Write #N$47 to *#REGhl.
 $E326 OR A          ; Set the bits from #REGa.
*$E327 LD A,$C6      ; #REGa=#N$C6.
 $E329 JR NZ,$E33B   ; Jump to #R$E33B if {} is not zero.
 $E32B LD A,$01      ; #REGa=#N$01.
 $E32D CALL $E375    ; Call #R$E375.
 $E330 LD (HL),$3E   ; Write #N$3E to *#REGhl.
 $E332 OR A          ; Set the bits from #REGa.
*$E333 LD A,$C8      ; #REGa=#N$C8.
 $E335 JR NZ,$E33B   ; Jump to #R$E33B if {} is not zero.
 $E337 LD (HL),$14   ; Write #N$14 to *#REGhl.
 $E339 LD A,$C2      ; #REGa=#N$C2.
*$E33B JP $E541      ; Jump to #R$E541.
*$E33E LD (HL),$3A   ; Write #N$3A to *#REGhl.
 $E340 OR A          ; Set the bits from #REGa.
*$E341 LD A,$C2      ; #REGa=#N$C2.
 $E343 JR NZ,$E372   ; Jump to #R$E372 if {} is not zero.
 $E345 LD (HL),$2D   ; Write #N$2D to *#REGhl.
 $E347 OR A          ; Set the bits from #REGa.
*$E348 LD A,$C4      ; #REGa=#N$C4.
 $E34A JR NZ,$E372   ; Jump to #R$E372 if {} is not zero.
 $E34C LD (HL),$1F   ; Write #N$1F to *#REGhl.
 $E34E OR A          ; Set the bits from #REGa.
*$E34F LD A,$C6      ; #REGa=#N$C6.
 $E351 JR NZ,$E372   ; Jump to #R$E372 if {} is not zero.
 $E353 LD A,$41      ; #REGa=#N$41.
 $E355 CALL $E375    ; Call #R$E375.
 $E358 LD (HL),$18   ; Write #N$18 to *#REGhl.
 $E35A OR A          ; Set the bits from #REGa.
*$E35B LD A,$C8      ; #REGa=#N$C8.
 $E35D JR NZ,$E372   ; Jump to #R$E372 if {} is not zero.
 $E35F LD (HL),$0A   ; Write #N$0A to *#REGhl.
 $E361 LD A,$C2      ; #REGa=#N$C2.
 $E363 JR $E33B      ; Jump to #R$E33B.
*$E365 LD A,$C0      ; #REGa=#N$C0.
 $E367 JR NZ,$E33B   ; Jump to #R$E33B if {} is not zero.
 $E369 JR $E2F9      ; Jump to #R$E2F9.
*$E36B LD A,$C0      ; #REGa=#N$C0.
 $E36D JR NZ,$E33B   ; Jump to #R$E33B if {} is not zero.
 $E36F JP $E2C3      ; Jump to #R$E2C3.
*$E372 JP $E535      ; Jump to #R$E535.
*$E375 PUSH HL       ; Stash #REGhl on the stack.
 $E376 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $E377 INC HL        ; Increment #REGhl by one.
 $E378 LD C,(HL)     ; #REGc=*#REGhl.
 $E379 INC HL        ; Increment #REGhl by one.
 $E37A LD B,(HL)     ; #REGb=*#REGhl.
 $E37B LD HL,$D30A   ; #REGhl=#R$D30A.
*$E37E INC HL        ; {Increment #REGhl by three.
 $E37F INC HL        ;
 $E380 INC HL        ; }
 $E381 LD A,(HL)     ; {Jump to #R$E37E if *#REGhl is not zero.
 $E382 AND A         ;
 $E383 JR NZ,$E37E   ; }
 $E385 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $E386 LD (HL),A     ; Write #REGa to *#REGhl.
 $E387 INC HL        ; Increment #REGhl by one.
 $E388 LD (HL),B     ; Write #REGb to *#REGhl.
 $E389 INC HL        ; Increment #REGhl by one.
 $E38A LD (HL),C     ; Write #REGc to *#REGhl.
 $E38B POP HL        ; Restore #REGhl from the stack.
 $E38C RET           ; Return.
 $E38D POP HL        ; Restore #REGhl from the stack.
*$E38E LD A,(HL)     ; #REGa=*#REGhl.
 $E38F DEC A         ; Decrease #REGa by one.
 $E390 LD (HL),A     ; Write #REGa to *#REGhl.
 $E391 CP $C8        ; {Jump to #R$E3D9 if #REGa is higher than #N$C8.
 $E393 JR NC,$E3D9   ; }
 $E395 CP $80        ; {Jump to #R$E3B1 if #REGa is equal to #N$80.
 $E397 JR Z,$E3B1    ; }
 $E399 JR C,$E3D5    ; Jump to #R$E3D5 if {} is lower.
 $E39B AND %00111111 ; Keep only bits 0-5.
 $E39D CP $20        ; {Jump to #R$E3A9 if #REGa is higher than #N$20.
 $E39F JR NC,$E3A9   ; }
 $E3A1 AND %00000011 ; Keep only bits 0-1.
 $E3A3 CP $02        ; {Jump to #R$E3C1 if #REGa is lower than #N$02.
 $E3A5 JR C,$E3C1    ; }
 $E3A7 JR $E3C6      ; Jump to #R$E3C6.
*$E3A9 AND %00000011 ; Keep only bits 0-1.
 $E3AB CP $02        ; {Jump to #R$E3CB if #REGa is lower than #N$02.
 $E3AD JR C,$E3CB    ; }
 $E3AF JR $E3D0      ; Jump to #R$E3D0.
*$E3B1 CALL $E2BA    ; Call #R$E2BA.
 $E3B4 JR C,$E38E    ; Jump to #R$E38E if {} is lower.
 $E3B6 CALL $DA28    ; Call #R$DA28.
 $E3B9 LD (HL),$C0   ; Write #N$C0 to *#REGhl.
 $E3BB AND %00000001 ; Keep only bit 0.
 $E3BD JR Z,$E3CB    ; Jump to #R$E3CB if the result is zero.
 $E3BF LD (HL),$A0   ; Write #N$A0 to *#REGhl.
*$E3C1 LD A,$C4      ; #REGa=#N$C4.
 $E3C3 JP $E541      ; Jump to #R$E541.
*$E3C6 LD A,$C8      ; #REGa=#N$C8.
 $E3C8 JP $E541      ; Jump to #R$E541.
*$E3CB LD A,$C4      ; #REGa=#N$C4.
 $E3CD JP $E535      ; Jump to #R$E535.
*$E3D0 LD A,$C8      ; #REGa=#N$C8.
 $E3D2 JP $E535      ; Jump to #R$E535.
*$E3D5 CP $0A        ; {Jump to #R$E3B1 if #REGa is equal to #N$0A.
 $E3D7 JR Z,$E3B1    ; }
*$E3D9 LD A,$C0      ; #REGa=#N$C0.
 $E3DB JP NZ,$E541   ; Jump to #R$E541 if {} is not zero.
 $E3DE JP $E2C3      ; Jump to #R$E2C3.
 $E3E1 POP HL        ; Restore #REGhl from the stack.
*$E3E2 LD A,(HL)     ; #REGa=*#REGhl.
 $E3E3 DEC A         ; Decrease #REGa by one.
 $E3E4 LD (HL),A     ; Write #REGa to *#REGhl.
 $E3E5 CP $C8        ; {Jump to #R$E40C if #REGa is higher than #N$C8.
 $E3E7 JR NC,$E40C   ; }
 $E3E9 CP $80        ; {Jump to #R$E3F7 if #REGa is equal to #N$80.
 $E3EB JR Z,$E3F7    ; }
 $E3ED JR C,$E408    ; Jump to #R$E408 if #REGa is lower than #N$80.
 $E3EF AND %00000011 ; Keep only bits 0-1.
 $E3F1 CP $02        ; {Jump to #R$E3FE if #REGa is lower than #N$02.
 $E3F3 JR C,$E3FE    ; }
 $E3F5 JR $E403      ; Jump to #R$E403.
*$E3F7 CALL $E2BA    ; Call #R$E2BA.
 $E3FA JR C,$E3E2    ; Jump to #R$E3E2 if {} is lower.
 $E3FC LD (HL),$A0   ; Write #N$A0 to *#REGhl.
*$E3FE LD A,$C8      ; #REGa=#N$C8.
 $E400 JP $E541      ; Jump to #R$E541.
*$E403 LD A,$C8      ; #REGa=#N$C8.
 $E405 JP $E535      ; Jump to #R$E535.
*$E408 CP $0A        ; {Jump to #R$E3F7 if #REGa is equal to #N$0A.
 $E40A JR Z,$E3F7    ; }
*$E40C LD A,$C0      ; #REGa=#N$C0.
 $E40E JP NZ,$E541   ; Jump to #R$E541 if {} is not zero.
 $E411 JP $E2C3      ; Jump to #R$E2C3.
 $E414 POP HL        ; Restore #REGhl from the stack.
*$E415 LD A,(HL)     ; #REGa=*#REGhl.
 $E416 DEC A         ; Decrease #REGa by one.
 $E417 LD (HL),A     ; Write #REGa to *#REGhl.
 $E418 CP $C8        ; {Jump to #R$E43F if #REGa is higher than #N$C8.
 $E41A JR NC,$E43F   ; }
 $E41C CP $80        ; {Jump to #R$E42A if #REGa is equal to #N$80.
 $E41E JR Z,$E42A    ; }
 $E420 JR C,$E43B    ; Jump to #R$E43B if {} is lower.
 $E422 AND %00000111 ; Keep only bits 0-2.
 $E424 CP $04        ; {Jump to #R$E431 if #REGa is lower than #N$04.
 $E426 JR C,$E431    ; }
 $E428 JR $E436      ; Jump to #R$E436.
*$E42A CALL $E2BA    ; Call #R$E2BA.
 $E42D JR C,$E415    ; Jump to #R$E415 if {} is lower.
 $E42F LD (HL),$C0   ; Write #N$C0 to *#REGhl.
*$E431 LD A,$C4      ; #REGa=#N$C4.
 $E433 JP $E541      ; Jump to #R$E541.
*$E436 LD A,$C4      ; #REGa=#N$C4.
 $E438 JP $E535      ; Jump to #R$E535.
*$E43B CP $0A        ; {Jump to #R$E42A if #REGa is equal to #N$0A.
 $E43D JR Z,$E42A    ; }
*$E43F LD A,$C0      ; #REGa=#N$C0.
 $E441 JP NZ,$E541   ; Jump to #R$E541 if {} is not zero.
 $E444 JP $E2C3      ; Jump to #R$E2C3.
 $E447 POP HL        ; Restore #REGhl from the stack.
*$E448 LD A,(HL)     ; #REGa=*#REGhl.
 $E449 DEC A         ; Decrease #REGa by one.
 $E44A LD (HL),A     ; Write #REGa to *#REGhl.
 $E44B CP $C8        ; {Jump to #R$E4D6 if #REGa is higher than #N$C8.
 $E44D JP NC,$E4D6   ; }
 $E450 CP $14        ; {Jump to #R$E4D2 if #REGa is lower than #N$14.
 $E452 JR C,$E4D2    ; }
 $E454 AND %00011111 ; Keep only bits 0-4.
 $E456 JR Z,$E463    ; Jump to #R$E463 if the result is zero.
 $E458 LD A,(HL)     ; #REGa=*#REGhl.
 $E459 RLCA          ; {RLCA.
 $E45A RLCA          ;
 $E45B RLCA          ; }
 $E45C AND %00000011 ; Keep only bits 0-1.
 $E45E CALL $DBD9    ; Call #R$DBD9.
 $E461 JR $E474      ; Jump to #R$E474.
*$E463 CALL $E2BA    ; Call #R$E2BA.
 $E466 JR C,$E448    ; Jump to #R$E448 if {} is lower.
 $E468 CALL $DB7E    ; Call #R$DB7E.
 $E46B EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $E46C AND %00000011 ; Keep only bits 0-1.
 $E46E RRCA          ; {RRCA.
 $E46F RRCA          ;
 $E470 RRCA          ; }
 $E471 OR %00011111  ; Set bits 0-4.
 $E473 LD (HL),A     ; Write #REGa to *#REGhl.
*$E474 INC HL        ; Increment #REGhl by one.
 $E475 LD A,(HL)     ; #REGa=*#REGhl.
 $E476 CP B          ; Compare #REGa with #REGb.
 $E477 INC HL        ; Increment #REGhl by one.
 $E478 LD A,(HL)     ; #REGa=*#REGhl.
 $E479 DEC HL        ; {Decrease #REGhl by two.
 $E47A DEC HL        ; }
 $E47B JR Z,$E486    ; Jump to #R$E486 if #REGhl is zero.
 $E47D JR NC,$E48B   ; Jump to #R$E48B if {} is higher.
 $E47F CP C          ; {Jump to #R$E49A if #REGa is equal to #REGc.
 $E480 JR Z,$E49A    ; }
 $E482 JR C,$E496    ; Jump to #R$E496 if #REGa is lower than #REGc.
 $E484 JR $E49E      ; Jump to #R$E49E.
*$E486 CP C          ; {Jump to #R$E492 if #REGa is lower than #REGc.
 $E487 JR C,$E492    ; }
 $E489 JR $E4BD      ; Jump to #R$E4BD.
*$E48B CP C          ; {Jump to #R$E4B5 if #REGa is equal to #REGc.
 $E48C JR Z,$E4B5    ; }
 $E48E JR C,$E4B1    ; Jump to #R$E4B1 if #REGa is lower than #REGc.
 $E490 JR $E4B9      ; Jump to #R$E4B9.
*$E492 LD B,$CA      ; #REGb=#N$CA.
 $E494 JR $E4C1      ; Jump to #R$E4C1.
*$E496 LD B,$CC      ; #REGb=#N$CC.
 $E498 JR $E4A0      ; Jump to #R$E4A0.
*$E49A LD B,$CE      ; #REGb=#N$CE.
 $E49C JR $E4A0      ; Jump to #R$E4A0.
*$E49E LD B,$D0      ; #REGb=#N$D0.
*$E4A0 CALL $DA28    ; Call #R$DA28.
 $E4A3 CP $04        ; Compare #REGa with #N$04.
 $E4A5 LD A,B        ; #REGa=#REGb.
 $E4A6 JP NC,$E541   ; Jump to #R$E541 if {} is higher.
 $E4A9 LD C,$00      ; #REGc=#N$00.
 $E4AB CALL $E4DE    ; Call #R$E4DE.
 $E4AE JP $E541      ; Jump to #R$E541.
*$E4B1 LD B,$CC      ; #REGb=#N$CC.
 $E4B3 JR $E4C1      ; Jump to #R$E4C1.
*$E4B5 LD B,$CE      ; #REGb=#N$CE.
 $E4B7 JR $E4C1      ; Jump to #R$E4C1.
*$E4B9 LD B,$D0      ; #REGb=#N$D0.
 $E4BB JR $E4C1      ; Jump to #R$E4C1.
*$E4BD LD B,$D2      ; #REGb=#N$D2.
 $E4BF JR $E4A0      ; Jump to #R$E4A0.
*$E4C1 CALL $DA28    ; Call #R$DA28.
 $E4C4 CP $04        ; Compare #REGa with #N$04...
 $E4C6 LD A,B        ; #REGa=#REGb.
 $E4C7 JP NC,$E535   ; Jump to #R$E535 if #REGa is higher than #N$04.
 $E4CA LD C,$80      ; #REGc=#N$80.
 $E4CC CALL $E4DE    ; Call #R$E4DE.
 $E4CF JP $E535      ; Jump to #R$E535.
*$E4D2 CP $0A        ; {Jump to #R$E463 if #REGa is equal to #N$0A.
 $E4D4 JR Z,$E463    ; }
*$E4D6 LD A,$C0      ; #REGa=#N$C0.
 $E4D8 JP NZ,$E541   ; Jump to #R$E541 if {} is not zero.
 $E4DB JP $E2C3      ; Jump to #R$E2C3.
*$E4DE LD A,($D3F8)  ; #REGa=*#R$D3F8.
 $E4E1 CP $08        ; Compare #REGa with #N$08.
 $E4E3 LD A,B        ; #REGa=#REGb.
 $E4E4 RET Z         ; Return if {} is zero.
 $E4E5 LD DE,$D2BC   ; #REGde=#R$D2BC.
 $E4E8 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
*$E4E9 INC DE        ; {Increment #REGde by three.
 $E4EA INC DE        ;
 $E4EB INC DE        ; }
 $E4EC LD A,(DE)     ; {Jump to #R$E4E9 if *#REGde is not zero.
 $E4ED AND A         ;
 $E4EE JR NZ,$E4E9   ; }
 $E4F0 LD A,B        ; #REGa=#REGb.
 $E4F1 SUB $C8       ; #REGa-=#N$C8.
 $E4F3 RRCA          ; RRCA.
 $E4F4 OR C          ; Set the bits from #REGc.
 $E4F5 LD (DE),A     ; Write #REGa to *#REGde.
 $E4F6 INC DE        ; Increment #REGde by one.
 $E4F7 INC HL        ; Increment #REGhl by one.
 $E4F8 LD C,(HL)     ; #REGc=*#REGhl.
 $E4F9 INC HL        ; Increment #REGhl by one.
 $E4FA LD B,(HL)     ; #REGb=*#REGhl.
 $E4FB CP $04        ; {Jump to #R$E502 if #REGa is not equal to #N$04.
 $E4FD JR NZ,$E502   ; }
 $E4FF INC C         ; Increment #REGc by one.
 $E500 JR $E520      ; Jump to #R$E520.
*$E502 CP $82        ; {Jump to #R$E509 if #REGa is not equal to #N$82.
 $E504 JR NZ,$E509   ; }
 $E506 INC B         ; Increment #REGb by one.
 $E507 JR $E520      ; Jump to #R$E520.
*$E509 CP $02        ; {Jump to #R$E515 if #REGa is equal to #N$02.
 $E50B JR Z,$E515    ; }
 $E50D CP $01        ; {Jump to #R$E515 if #REGa is equal to #N$01.
 $E50F JR Z,$E515    ; }
 $E511 CP $85        ; {Jump to #R$E519 if #REGa is not equal to #N$85.
 $E513 JR NZ,$E519   ; }
*$E515 INC B         ; Increment #REGb by one.
 $E516 INC C         ; Increment #REGc by one.
 $E517 JR $E520      ; Jump to #R$E520.
*$E519 AND %00000011 ; Keep only bits 0-1.
 $E51B CP $03        ; {Jump to #R$E520 if #REGa is not equal to #N$03.
 $E51D JR NZ,$E520   ; }
 $E51F INC B         ; Increment #REGb by one.
*$E520 LD A,C        ; #REGa=#REGc.
 $E521 LD (DE),A     ; Write #REGa to *#REGde.
 $E522 INC DE        ; Increment #REGde by one.
 $E523 LD A,B        ; #REGa=#REGb.
 $E524 LD (DE),A     ; Write #REGa to *#REGde.
 $E525 DEC HL        ; {Decrease #REGhl by two.
 $E526 DEC HL        ; }
 $E527 LD A,($D3F8)  ; #REGa=*#R$D3F8.
 $E52A INC A         ; Increment #REGa by one.
 $E52B LD ($D3F8),A  ; Write #REGa to *#R$D3F8.
; #AUDIO(helicopter.wav)(#INCLUDE(Helicopter))
 $E52E LD A,$02      ; {Write melody ID #N$02 to *#R$FF8D.
 $E530 LD ($FF8D),A  ; }
 $E533 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $E534 RET           ; Return.
*$E535 INC HL        ; Increment #REGhl by one.
 $E536 LD C,(HL)     ; #REGc=*#REGhl.
 $E537 INC HL        ; Increment #REGhl by one.
 $E538 LD B,(HL)     ; #REGb=*#REGhl.
 $E539 INC HL        ; Increment #REGhl by one.
 $E53A PUSH HL       ; Stash #REGhl on the stack.
 $E53B CALL $D7F6    ; Call #R$D7F6.
 $E53E POP HL        ; Restore #REGhl from the stack.
 $E53F JR $E550      ; Jump to #R$E550.
*$E541 INC HL        ; Increment #REGhl by one.
 $E542 LD C,(HL)     ; #REGc=*#REGhl.
 $E543 INC HL        ; Increment #REGhl by one.
 $E544 LD B,(HL)     ; #REGb=*#REGhl.
 $E545 INC HL        ; Increment #REGhl by one.
 $E546 PUSH HL       ; Stash #REGhl on the stack.
 $E547 CALL $D6C9    ; Call #R$D6C9.
 $E54A POP HL        ; Restore #REGhl from the stack.
 $E54B JR $E550      ; Jump to #R$E550.
*$E54D INC HL        ; {Increment #REGhl by three.
 $E54E INC HL        ;
 $E54F INC HL        ; }
*$E550 POP BC        ; Restore #REGbc from the stack.
 $E551 DEC B         ; Decrease #REGb by one.
 $E552 JP NZ,$E266   ; Jump to #R$E266 until #REGb is zero.
 $E555 RET           ; Return.

; Jump Table
w$E556 DEFW $E295
 $E558 DEFW $E2A5
 $E55A DEFW $E2CC
 $E55C DEFW $E38D
 $E55E DEFW $E3E1
 $E560 DEFW $E414
 $E562 DEFW $E447
 $E564 DEFW $E447
 $E566 DEFW $E447
 $E568 DEFW $E447
 $E56A DEFW $E447
 $E56C DEFW $E447
 $E56E DEFW $E2CC
 $E570 DEFW $E2CC
 $E572 DEFW $E2CC
 $E574 DEFW $E2CC

; Handler: Bullets
;
; Used by the routine at #R$DE77.
@label=Handler_Bullets
c$E576 LD B,$1A      ; #REGb=#N$1A (number of possible bullets).
 $E578 LD HL,$D2BF   ; #REGhl=#R$D2BF.
@label=Handler_Bullets_Loop
*$E57B PUSH BC       ; Stash current bullet on the stack.
 $E57C LD A,(HL)     ; {Jump to #R$E624 if this bullet is not active.
 $E57D AND A         ;
 $E57E JP Z,$E624    ; }
; This bullet is active so let's process it.
 $E581 INC HL        ; Increment #REGhl by one.
 $E582 LD C,(HL)     ; #REGc=*#REGhl.
 $E583 INC HL        ; Increment #REGhl by one.
 $E584 LD B,(HL)     ; #REGb=*#REGhl.
 $E585 PUSH HL       ; Stash the bullet table pointer on the stack.
 $E586 CP $80        ; {Jump to #R$E5AC if #REGa is higher than #N$80.
 $E588 JP NC,$E5AC   ; }
 $E58B CP $05        ; {Jump to #R$E5A9 if #REGa is equal to #N$05.
 $E58D JR Z,$E5A9    ; }
 $E58F CP $04        ; {Jump to #R$E5A5 if #REGa is equal to #N$04.
 $E591 JR Z,$E5A5    ; }
 $E593 CP $03        ; {Jump to #R$E5A2 if #REGa is equal to #N$03.
 $E595 JR Z,$E5A2    ; }
 $E597 CP $02        ; {Jump to #R$E59E if #REGa is equal to #N$02.
 $E599 JR Z,$E59E    ; }
 $E59B INC B         ; Increment #REGb by one.
 $E59C JR $E5CD      ; Jump to #R$E5CD.
*$E59E INC C         ; Increment #REGc by one.
 $E59F INC B         ; Increment #REGb by one.
 $E5A0 JR $E5CD      ; Jump to #R$E5CD.
*$E5A2 INC C         ; Increment #REGc by one.
 $E5A3 JR $E5CD      ; Jump to #R$E5CD.
*$E5A5 DEC B         ; Decrease #REGb by one.
 $E5A6 INC C         ; Increment #REGc by one.
 $E5A7 JR $E5CD      ; Jump to #R$E5CD.
*$E5A9 DEC B         ; Decrease #REGb by one.
 $E5AA JR $E5CD      ; Jump to #R$E5CD.
*$E5AC AND %00001111 ; Keep only bits 0-3.
 $E5AE CP $05        ; {Jump to #R$E5CC if #REGa is equal to #N$05.
 $E5B0 JR Z,$E5CC    ; }
 $E5B2 CP $04        ; {Jump to #R$E5C8 if #REGa is equal to #N$04.
 $E5B4 JR Z,$E5C8    ; }
 $E5B6 CP $03        ; {Jump to #R$E5C5 if #REGa is equal to #N$03.
 $E5B8 JR Z,$E5C5    ; }
 $E5BA CP $02        ; {Jump to #R$E5C1 if #REGa is equal to #N$02.
 $E5BC JR Z,$E5C1    ; }
 $E5BE INC B         ; Increment #REGb by one.
 $E5BF JR $E5CD      ; Jump to #R$E5CD.
*$E5C1 DEC C         ; Decrease #REGc by one.
 $E5C2 INC B         ; Increment #REGb by one.
 $E5C3 JR $E5CD      ; Jump to #R$E5CD.
*$E5C5 DEC C         ; Decrease #REGc by one.
 $E5C6 JR $E5CD      ; Jump to #R$E5CD.
*$E5C8 DEC B         ; Decrease #REGb by one.
 $E5C9 DEC C         ; Decrease #REGc by one.
 $E5CA JR $E5CD      ; Jump to #R$E5CD.
*$E5CC DEC B         ; Decrease #REGb by one.
*$E5CD LD A,B        ; #REGa=#REGb.
 $E5CE CP $18        ; {Jump to #R$E600 if #REGa is higher than #N$18.
 $E5D0 JR NC,$E600   ; }
 $E5D2 LD A,C        ; #REGa=#REGc.
 $E5D3 CP $20        ; {Jump to #R$E600 if #REGa is higher than #N$20.
 $E5D5 JR NC,$E600   ; }
 $E5D7 PUSH HL       ; Stash #REGhl on the stack.
 $E5D8 CALL $DD38    ; Call #R$DD38.
 $E5DB AND A         ; {Jump to #R$E5F4 if #REGa is zero.
 $E5DC JR Z,$E5F4    ; }
 $E5DE CP $C1        ; {Jump to #R$E5F4 if #REGa is higher than #N$C1.
 $E5E0 JR NC,$E5F4   ; }
 $E5E2 AND %00111111 ; Keep only bits 0-5.
 $E5E4 CP $32        ; {Jump to #R$E5F4 if #REGa is higher than #N$32.
 $E5E6 JR NC,$E5F4   ; }
; There's been a hit, find out which monster.
 $E5E8 LD A,(HL)     ; #REGa=*#REGhl.
 $E5E9 CALL $DD4D    ; Call #R$DD4D.
; Take off one hit point from the monsters energy.
 $E5EC LD A,$01      ; #REGa=#N$01 (damage).
 $E5EE CALL $DD6C    ; Call #R$DD6C.
 $E5F1 POP HL        ; Restore #REGhl from the stack.
 $E5F2 JR $E61B      ; Jump to #R$E61B.
*$E5F4 POP HL        ; Restore #REGhl from the stack.
 $E5F5 LD (HL),B     ; Write #REGb to *#REGhl.
 $E5F6 DEC HL        ; Decrease #REGhl by one.
 $E5F7 LD (HL),C     ; Write #REGc to *#REGhl.
 $E5F8 LD A,$F4      ; #REGa=#N$F4.
 $E5FA CALL $D6C9    ; Call #R$D6C9.
 $E5FD POP HL        ; Restore #REGhl from the stack.
 $E5FE JR $E626      ; Jump to #R$E626.
*$E600 DEC HL        ; {Decrease #REGhl by two.
 $E601 DEC HL        ; }
 $E602 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $E604 LD A,($D3F8)  ; {Jump to #R$E614 if *#R$D3F8 is not zero.
 $E607 AND A         ;
 $E608 JR NZ,$E614   ; }
 $E60A LD A,($D3F9)  ; #REGa=*#R$D3F9.
 $E60D DEC A         ; Decrease #REGa by one.
 $E60E LD ($D3F9),A  ; Write #REGa to *#R$D3F9.
 $E611 POP HL        ; Restore #REGhl from the stack.
 $E612 JR $E626      ; Jump to #R$E626.
*$E614 DEC A         ; Decrease #REGa by one.
 $E615 LD ($D3F8),A  ; Write #REGa to *#R$D3F8.
 $E618 POP HL        ; Restore #REGhl from the stack.
 $E619 JR $E626      ; Jump to #R$E626.
*$E61B LD A,$73      ; #REGa=#N$73.
 $E61D PUSH HL       ; Stash #REGhl on the stack.
 $E61E CALL $D6C9    ; Call #R$D6C9.
 $E621 POP HL        ; Restore #REGhl from the stack.
 $E622 JR $E600      ; Jump to #R$E600.
@label=Collision_Bullets_Next
*$E624 INC HL        ; {Increment #REGhl by three.
 $E625 INC HL        ;
*$E626 INC HL        ; }
 $E627 POP BC        ; Restore bullet ID from the stack.
 $E628 DEC B         ; Decrease bullet ID by one.
 $E629 JP NZ,$E57B   ; Jump to #R$E57B until all bullets have been processed.
 $E62C RET           ; Return.

; Routine at E62D
;
; Used by the routine at #R$E119.
c$E62D LD A,($D244)  ; {Return if *#R$D244 is equal to #N$FF.
 $E630 CP $FF        ;
 $E632 RET Z         ; }
 $E633 CP $20        ; {Jump to #R$E67C if *#R$D244 is higher than #N$20.
 $E635 JR NC,$E67C   ; }
 $E637 LD A,($D248)  ; #REGa=*#R$D248.
 $E63A RRCA          ; Rotate #REGa right; bit 0 moves to the carry flag (and
                     ; to bit 7).
 $E63B JR C,$E67C    ; Jump to #R$E67C if the carry flag is set (if bit 0 was
                     ; set).
 $E63D LD A,($D246)  ; #REGa=*#R$D246.
 $E640 RRCA          ; Rotate #REGa right; bit 0 moves to the carry flag (and
                     ; to bit 7).
 $E641 JR NC,$E658   ; Jump to #R$E658 if the carry flag is not set (if bit 0
                     ; was unset).
 $E643 LD DE,$80FE   ; #REGde=#N$80FE.
 $E646 LD B,$03      ; #REGb=#N$03.
 $E648 LD A,($D247)  ; {#REGc=*#R$D247.
 $E64B LD C,A        ; }
 $E64C LD A,B        ; #REGa=#REGb.
 $E64D SUB C         ; #REGa-=#REGc.
 $E64E SUB C         ; #REGa-=#REGc.
 $E64F SUB C         ; #REGa-=#REGc.
 $E650 LD C,A        ; #REGc=#REGa.
 $E651 CALL $E0AD    ; Call #R$E0AD.
 $E654 JR Z,$E67C    ; Jump to #R$E67C if {} is zero.
 $E656 JR $E66F      ; Jump to #R$E66F.
*$E658 LD A,($D24E)  ; {Jump to #R$E67C if *#R$D24E is equal to #N$12.
 $E65B CP $12        ;
 $E65D JR Z,$E67C    ; }
 $E65F LD B,$05      ; #REGb=#N$05.
 $E661 LD A,($D247)  ; #REGa=*#R$D247.
 $E664 ADD A,$02     ; #REGa+=#N$02.
 $E666 LD C,A        ; #REGc=#REGa.
 $E667 LD DE,$090F   ; #REGde=#N$090F.
 $E66A CALL $E0AD    ; Call #R$E0AD.
 $E66D JR NZ,$E67C   ; Jump to #R$E67C if {} is not zero.
*$E66F LD A,$06      ; {Write #N$06 to: #LIST { *#R$D244 } { *#R$D24A } LIST#
 $E671 LD ($D244),A  ;
 $E674 LD ($D24A),A  ; }
 $E677 LD A,$01      ; {Write #N$01 to *#R$D248.
 $E679 LD ($D248),A  ; }
; This entry point is used by the routines at #R$E68C, #R$EA04, #R$EA18,
; #R$EA43, #R$EA9C, #R$EAF6, #R$EE70, #R$EE9B and #R$EF50.
*$E67C LD A,($D244)  ; {#REGa=*#R$D244*#N$02.
 $E67F ADD A,A       ; }
; Create an offset using #REGhl.
 $E680 LD H,$00      ; #REGh=#N$00.
 $E682 LD L,A        ; #REGl=#REGa.
 $E683 LD DE,$EF98   ; {#REGhl+=#R$EF98.
 $E686 ADD HL,DE     ; }
; Fetch the address to jump and store it in #REGhl.
 $E687 LD A,(HL)     ; #REGa=*#REGhl.
 $E688 INC HL        ; Increment #REGhl by one.
 $E689 LD H,(HL)     ; #REGh=*#REGhl.
 $E68A LD L,A        ; #REGl=#REGa.
 $E68B JP (HL)       ; Jump to the address held by *#REGhl.

; Routine at E68C
c$E68C CALL $E179    ; Call #R$E179.
 $E68F AND A         ; {Jump to #R$E950 if #REGa is zero.
 $E690 JP Z,$E950    ; }
; This entry point is used by the routine at #R$E99B.
*$E693 BIT 4,A       ; {Jump to #R$E6C5 if bit 4 of #REGa is not set.
 $E695 JP Z,$E6C5    ; }
 $E698 XOR %00010000 ; Flip bit 4.
 $E69A JR NZ,$E6A9   ; Jump to #R$E6A9 if the result is not zero.
*$E69C LD A,$0A      ; {Write #N$0A to *#R$D244.
 $E69E LD ($D244),A  ; }
 $E6A1 LD A,$01      ; {Write #N$01 to *#R$D248.
 $E6A3 LD ($D248),A  ; }
 $E6A6 JP $E67C      ; Jump to #R$E67C.
*$E6A9 LD A,($D246)  ; {Jump to #R$E6B7 if *#R$D246 is zero.
 $E6AC AND A         ;
 $E6AD JR Z,$E6B7    ; }
 $E6AF LD A,$0D      ; {Write #N$0D to *#R$D244.
 $E6B1 LD ($D244),A  ; }
 $E6B4 JP $E67C      ; Jump to #R$E67C.
*$E6B7 LD A,($D252)  ; {Jump to #R$E69C if *#R$D252 is zero.
 $E6BA AND A         ;
 $E6BB JR Z,$E69C    ; }
 $E6BD LD A,$0E      ; {Write #N$0E to *#R$D244.
 $E6BF LD ($D244),A  ; }
 $E6C2 JP $E67C      ; Jump to #R$E67C.
; This entry point is used by the routine at #R$EAF6.
*$E6C5 BIT 3,A       ; {Jump to #R$E7DE if bit 3 of #REGa is not set.
 $E6C7 JP Z,$E7DE    ; }
 $E6CA LD A,($D247)  ; #REGa=*#R$D247.
 $E6CD RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E6CE JR C,$E6E4    ; Jump to #R$E6E4 if the carry flag is set.
 $E6D0 LD BC,$0102   ; #REGbc=#N$0102.
 $E6D3 LD DE,$090F   ; #REGde=#N$090F.
 $E6D6 CALL $E0AD    ; Call #R$E0AD.
 $E6D9 JR Z,$E712    ; Jump to #R$E712 if {} is zero.
 $E6DB LD A,($D248)  ; #REGa=*#R$D248.
 $E6DE RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E6DF JP C,$E795    ; Jump to #R$E795 if the carry flag is set.
 $E6E2 JR $E6F9      ; Jump to #R$E6F9.
*$E6E4 LD BC,$0101   ; #REGbc=#N$0101.
 $E6E7 LD DE,$090F   ; #REGde=#N$090F.
 $E6EA CALL $E0AD    ; Call #R$E0AD.
 $E6ED JR Z,$E746    ; Jump to #R$E746 if {} is zero.
 $E6EF LD A,($D248)  ; #REGa=*#R$D248.
 $E6F2 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E6F3 JP C,$E795    ; Jump to #R$E795 if the carry flag is set.
 $E6F6 CALL $DA61    ; Call #R$DA61.
*$E6F9 LD A,($D24E)  ; #REGa=*#R$D24E.
 $E6FC SUB $04       ; #REGa-=#N$04.
 $E6FE LD ($D24E),A  ; Write #REGa to *#R$D24E.
 $E701 XOR A         ; {Write #N$00 to: #LIST { *#R$D248 } { *#R$D246 } {
 $E702 LD ($D248),A  ; *#R$D24C } LIST#
 $E705 LD ($D246),A  ;
 $E708 LD ($D24C),A  ; }
 $E70B INC A         ; {Write #N$01 to *#R$D244.
 $E70C LD ($D244),A  ; }
 $E70F JP $E67C      ; Jump to #R$E67C.
*$E712 LD BC,$0202   ; #REGbc=#N$0202.
 $E715 LD DE,$1113   ; #REGde=#N$1113.
 $E718 LD A,($D246)  ; #REGa=*#R$D246.
 $E71B RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E71C JR C,$E729    ; Jump to #R$E729 if the carry flag is set.
*$E71E INC C         ; Increment #REGc by one.
 $E71F CALL $E0AD    ; Call #R$E0AD.
 $E722 JR Z,$E734    ; Jump to #R$E734 if {} is zero.
 $E724 CALL $DA51    ; Call #R$DA51.
 $E727 JR $E763      ; Jump to #R$E763.
*$E729 LD A,($D248)  ; #REGa=*#R$D248.
 $E72C RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E72D JR C,$E71E    ; Jump to #R$E71E if the carry flag is set.
 $E72F CALL $E0AD    ; Call #R$E0AD.
 $E732 JR NZ,$E763   ; Jump to #R$E763 if {} is not zero.
*$E734 LD BC,$0202   ; #REGbc=#N$0202.
 $E737 LD DE,$1416   ; #REGde=#N$1416.
 $E73A CALL $E0AD    ; Call #R$E0AD.
 $E73D JR Z,$E785    ; Jump to #R$E785 if {} is zero.
 $E73F LD A,$01      ; {Write #N$01 to *#R$D247.
 $E741 LD ($D247),A  ; }
 $E744 JR $E763      ; Jump to #R$E763.
*$E746 LD BC,$0202   ; #REGbc=#N$0202.
 $E749 LD DE,$1416   ; #REGde=#N$1416.
 $E74C CALL $E0AD    ; Call #R$E0AD.
 $E74F JR NZ,$E763   ; Jump to #R$E763 if {} is not zero.
 $E751 LD BC,$0203   ; #REGbc=#N$0203.
 $E754 LD DE,$1113   ; #REGde=#N$1113.
 $E757 CALL $E0AD    ; Call #R$E0AD.
 $E75A JR Z,$E785    ; Jump to #R$E785 if {} is zero.
 $E75C XOR A         ; {Write #N$00 to *#R$D247.
 $E75D LD ($D247),A  ; }
 $E760 CALL $DA51    ; Call #R$DA51.
*$E763 LD A,($D246)  ; #REGa=*#R$D246.
 $E766 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E767 JR C,$E7AA    ; Jump to #R$E7AA if the carry flag is set.
 $E769 LD A,($D24E)  ; #REGa=*#R$D24E.
 $E76C CP $12        ; {Jump to #R$E775 if #REGa is no equal to #N$12.
 $E76E JR NZ,$E775   ; }
 $E770 SUB $02       ; #REGa-=#N$02.
 $E772 LD ($D24E),A  ; Write #REGa to *#R$D24E.
*$E775 XOR A         ; {Write #N$00 to: #LIST { *#R$D248 } { *#R$D24C } LIST#
 $E776 LD ($D248),A  ;
 $E779 LD ($D24C),A  ; }
 $E77C INC A         ; {Write #N$01 to *#R$D246.
 $E77D LD ($D246),A  ; }
 $E780 LD A,$03      ; {Write #N$03 to *#R$D24F.
 $E782 LD ($D24F),A  ; }
*$E785 LD A,($D248)  ; #REGa=*#R$D248.
 $E788 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E789 JR C,$E795    ; Jump to #R$E795 if the carry flag is set.
 $E78B XOR A         ; {Write #N$00 to: #LIST { *#R$D248 } { *#R$D24C } LIST#
 $E78C LD ($D248),A  ;
 $E78F LD ($D24C),A  ; }
 $E792 JP $EF86      ; Jump to #R$EF86.
*$E795 LD HL,$D247   ; #REGhl=#R$D247.
 $E798 LD A,(HL)     ; #REGa=*#REGhl.
 $E799 XOR %00000001 ; Flip bit 0.
 $E79B INC HL        ; Increment #REGhl by one.
 $E79C AND (HL)      ; Merge the bits from *#REGhl.
 $E79D CALL NZ,$DA51 ; Call #R$DA51 not zero.
 $E7A0 LD A,($D246)  ; #REGa=*#R$D246.
 $E7A3 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E7A4 CALL C,$DA69  ; Call #R$DA69 if the carry flag is set.
 $E7A7 JP $EB2F      ; Jump to #R$EB2F.
*$E7AA LD A,$03      ; {Write #N$03 to *#R$D24F.
 $E7AC LD ($D24F),A  ; }
 $E7AF LD DE,($D253) ; #REGde=*#R$D253.
 $E7B3 CALL $DA0F    ; Call #R$DA0F.
 $E7B6 LD A,($D245)  ; #REGa=*#R$D245.
 $E7B9 AND %00000001 ; Keep only bit 0.
 $E7BB XOR %00000001 ; Flip bit 0.
 $E7BD LD (IX+$05),A ; Write #REGa to *#REGix+#N$05.
 $E7C0 CALL Z,$DA69  ; Call #R$DA69 zero.
 $E7C3 LD A,$08      ; {Write #N$08 to *#REGix+#N$00.
 $E7C5 LD (IX+$00),A ; }
 $E7C8 XOR A         ; {Write #N$00 to: #LIST { *#R$D248 } { *#R$D24C } LIST#
 $E7C9 LD ($D248),A  ;
 $E7CC LD ($D24C),A  ; }
 $E7CF INC A         ; {Write #N$01 to *#R$D246.
 $E7D0 LD ($D246),A  ; }
 $E7D3 LD A,$03      ; {Write #N$03 to: #LIST { *#R$D244 } { *#R$D245 } LIST#
 $E7D5 LD ($D244),A  ;
 $E7D8 LD ($D245),A  ; }
 $E7DB JP $E67C      ; Jump to #R$E67C.
*$E7DE BIT 2,A       ; {Jump to #R$E8E7 if bit 2 of #REGa is not set.
 $E7E0 JP Z,$E8E7    ; }
 $E7E3 LD A,($D24E)  ; {Jump to #R$E8CF if *#R$D24E is equal to #N$10.
 $E7E6 CP $10        ;
 $E7E8 JP Z,$E8CF    ; }
 $E7EB LD A,($D247)  ; #REGa=*#R$D247.
 $E7EE RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E7EF JR C,$E81F    ; Jump to #R$E81F if the carry flag is set.
 $E7F1 LD BC,$0502   ; #REGbc=#N$0502.
 $E7F4 LD DE,$090F   ; #REGde=#N$090F.
 $E7F7 CALL $E0AD    ; Call #R$E0AD.
 $E7FA LD C,$02      ; #REGc=#N$02.
 $E7FC JR Z,$E851    ; Jump to #R$E851 if {} is zero.
 $E7FE LD BC,$0602   ; #REGbc=#N$0602.
 $E801 LD DE,$1416   ; #REGde=#N$1416.
 $E804 CALL $E0AD    ; Call #R$E0AD.
 $E807 JR Z,$E80E    ; Jump to #R$E80E if {} is zero.
 $E809 LD A,$01      ; #REGa=#N$01.
 $E80B JP $E8B4      ; Jump to #R$E8B4.
*$E80E LD BC,$0602   ; #REGbc=#N$0602.
 $E811 LD DE,$1113   ; #REGde=#N$1113.
 $E814 CALL $E0AD    ; Call #R$E0AD.
 $E817 LD C,$02      ; #REGc=#N$02.
 $E819 JR Z,$E851    ; Jump to #R$E851 if {} is zero.
 $E81B XOR A         ; #REGa=#N$00.
 $E81C JP $E8B4      ; Jump to #R$E8B4.
*$E81F LD BC,$0503   ; #REGbc=#N$0503.
 $E822 LD DE,$090F   ; #REGde=#N$090F.
 $E825 CALL $E0AD    ; Call #R$E0AD.
 $E828 LD C,$03      ; #REGc=#N$03.
 $E82A JR Z,$E851    ; Jump to #R$E851 if {} is zero.
 $E82C LD BC,$0603   ; #REGbc=#N$0603.
 $E82F LD DE,$1113   ; #REGde=#N$1113.
 $E832 CALL $E0AD    ; Call #R$E0AD.
 $E835 JR Z,$E83D    ; Jump to #R$E83D if {} is zero.
 $E837 CALL $DA51    ; Call #R$DA51.
 $E83A XOR A         ; #REGa=#N$00.
 $E83B JR $E8B4      ; Jump to #R$E8B4.
*$E83D LD BC,$0603   ; #REGbc=#N$0603.
 $E840 LD DE,$1416   ; #REGde=#N$1416.
 $E843 CALL $E0AD    ; Call #R$E0AD.
 $E846 LD C,$03      ; #REGc=#N$03.
 $E848 JR Z,$E851    ; Jump to #R$E851 if {} is zero.
 $E84A CALL $DA51    ; Call #R$DA51.
 $E84D LD A,$01      ; #REGa=#N$01.
 $E84F JR $E8B4      ; Jump to #R$E8B4.
*$E851 LD A,($D246)  ; #REGa=*#R$D246.
 $E854 XOR %00000001 ; Flip bit 0.
 $E856 ADD A,$05     ; #REGa+=#N$05.
 $E858 LD B,A        ; #REGb=#REGa.
 $E859 LD DE,$090F   ; #REGde=#N$090F.
 $E85C CALL $E0AD    ; Call #R$E0AD.
 $E85F JR Z,$E876    ; Jump to #R$E876 if {} is zero.
 $E861 XOR A         ; {Write #N$00 to *#R$D246.
 $E862 LD ($D246),A  ; }
 $E865 INC A         ; {Write #N$01 to: #LIST { *#R$D244 } { *#R$D24F } LIST#
 $E866 LD ($D244),A  ;
 $E869 LD ($D24F),A  ; }
 $E86C LD A,($D247)  ; #REGa=*#R$D247.
 $E86F RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E870 CALL NC,$DA61 ; Call #R$DA61 if the carry flag is not set.
 $E873 JP $EF86      ; Jump to #R$EF86.
*$E876 LD A,($D246)  ; #REGa=*#R$D246.
 $E879 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E87A JP NC,$EF86   ; Jump to #R$EF86 if the carry flag is not set.
 $E87D LD BC,$0402   ; #REGbc=#N$0402.
 $E880 LD DE,$1113   ; #REGde=#N$1113.
 $E883 LD A,($D247)  ; #REGa=*#R$D247.
 $E886 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E887 JR NC,$E88C   ; Jump to #R$E88C if the carry flag is not set.
 $E889 LD DE,$1416   ; #REGde=#N$1416.
*$E88C CALL $E0AD    ; Call #R$E0AD.
 $E88F JP Z,$EF86    ; Jump to #R$EF86 if {} is zero.
 $E892 LD A,$02      ; {Write #N$02 to *#R$D24F.
 $E894 LD ($D24F),A  ; }
 $E897 LD DE,($D253) ; #REGde=*#R$D253.
 $E89B CALL $DA0F    ; Call #R$DA0F.
 $E89E LD A,($D245)  ; #REGa=*#R$D245.
 $E8A1 AND %00000001 ; Keep only bit 0.
 $E8A3 LD (IX+$05),A ; Write #REGa to *#REGix+#N$05.
 $E8A6 LD A,$04      ; {Write #N$04 to: #LIST { *#REGix+#N$00 } { *#R$D244 } {
 $E8A8 LD (IX+$00),A ; *#R$D245 } LIST#
 $E8AB LD ($D244),A  ;
 $E8AE LD ($D245),A  ; }
 $E8B1 JP $E67C      ; Jump to #R$E67C.
*$E8B4 LD ($D247),A  ; Write #REGa to *#R$D247.
 $E8B7 LD A,($D24E)  ; #REGa=*#R$D24E.
 $E8BA ADD A,$04     ; #REGa+=#N$04.
 $E8BC LD ($D24E),A  ; Write #REGa to *#R$D24E.
 $E8BF LD A,$03      ; {Write #N$03 to: #LIST { *#R$D244 } { *#R$D24F } LIST#
 $E8C1 LD ($D244),A  ;
 $E8C4 LD ($D24F),A  ; }
 $E8C7 LD A,$01      ; {Write #N$01 to *#R$D246.
 $E8C9 LD ($D246),A  ; }
 $E8CC JP $E67C      ; Jump to #R$E67C.
*$E8CF LD A,$12      ; {Write #N$12 to *#R$D24E.
 $E8D1 LD ($D24E),A  ; }
 $E8D4 LD A,$01      ; {Write #N$01 to *#R$D244.
 $E8D6 LD ($D244),A  ; }
 $E8D9 LD A,($D247)  ; #REGa=*#R$D247.
 $E8DC RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E8DD CALL NC,$DA61 ; Call #R$DA61 if the carry flag is not set.
 $E8E0 XOR A         ; {Write #N$00 to *#R$D246.
 $E8E1 LD ($D246),A  ; }
 $E8E4 JP $E67C      ; Jump to #R$E67C.
*$E8E7 BIT 0,A       ; {Jump to #R$E91C if bit 0 of #REGa is not set.
 $E8E9 JR Z,$E91C    ; }
 $E8EB LD A,($D246)  ; #REGa=*#R$D246.
 $E8EE RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E8EF JP C,$EF86    ; Jump to #R$EF86 if the carry flag is set.
 $E8F2 LD A,$01      ; {Write #N$01 to *#R$D24F.
 $E8F4 LD ($D24F),A  ; }
 $E8F7 LD DE,($D253) ; #REGde=*#R$D253.
 $E8FB CALL $DA0F    ; Call #R$DA0F.
 $E8FE LD A,($D24D)  ; #REGa=*#R$D24D.
 $E901 DEC A         ; Decrease #REGa by one.
 $E902 CP $FC        ; {Jump to #R$EF86 if #REGa is equal to #N$FC.
 $E904 JP Z,$EF86    ; }
 $E907 LD ($D24D),A  ; Write #REGa to *#R$D24D.
 $E90A XOR A         ; {Write #N$00 to *#REGix+#N$05.
 $E90B LD (IX+$05),A ; }
 $E90E INC A         ; {Write #N$01 to *#R$D247.
 $E90F LD ($D247),A  ; }
 $E912 INC A         ; {Write #N$02 to: #LIST { *#REGix+#N$00 } { *#R$D244 }
 $E913 LD (IX+$00),A ; LIST#
 $E916 LD ($D244),A  ; }
 $E919 JP $E67C      ; Jump to #R$E67C.
*$E91C BIT 1,A       ; {Jump to #R$E950 if bit 1 of #REGa is not set.
 $E91E JR Z,$E950    ; }
 $E920 LD A,($D246)  ; #REGa=*#R$D246.
 $E923 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E924 JP C,$EF86    ; Jump to #R$EF86 if the carry flag is set.
 $E927 LD A,$01      ; {Write #N$01 to *#R$D24F.
 $E929 LD ($D24F),A  ; }
 $E92C LD DE,($D253) ; #REGde=*#R$D253.
 $E930 CALL $DA0F    ; Call #R$DA0F.
 $E933 LD A,($D24D)  ; #REGa=*#R$D24D.
 $E936 INC A         ; Increment #REGa by one.
 $E937 CP $1E        ; {Jump to #R$EF86 if #REGa is equal to #N$1E.
 $E939 JP Z,$EF86    ; }
 $E93C LD ($D24D),A  ; Write #REGa to *#R$D24D.
 $E93F XOR A         ; {Write #N$00 to: #LIST { *#REGix+#N$05 } { *#R$D247 }
 $E940 LD (IX+$05),A ; LIST#
 $E943 LD ($D247),A  ; }
 $E946 INC A         ; {Write #N$01 to: #LIST { *#REGix+#N$00 } { *#R$D244 }
 $E947 LD (IX+$00),A ; LIST#
 $E94A LD ($D244),A  ; }
 $E94D JP $E67C      ; Jump to #R$E67C.
*$E950 LD A,($D249)  ; #REGa=*#R$D249.
 $E953 DEC A         ; Decrease #REGa by one.
 $E954 LD ($D249),A  ; Write #REGa to *#R$D249.
 $E957 JP NZ,$EF86   ; Jump to #R$EF86 if #REGa is not zero.
 $E95A LD A,$19      ; {Write #N$19 to *#R$D249.
 $E95C LD ($D249),A  ; }
 $E95F LD A,$05      ; {Write #N$05 to *#R$D244.
 $E961 LD ($D244),A  ; }
 $E964 JP $E67C      ; Jump to #R$E67C.

; Routine at E967
c$E967 LD A,$01      ; {Write #N$01 to *#R$D24F.
 $E969 LD ($D24F),A  ; }
 $E96C JP $EF86      ; Jump to #R$EF86.
 $E96F JR $E967      ; Jump to #R$E967.

; Routine at E971
c$E971 CALL $DB54    ; Call #R$DB54.
 $E974 LD A,$03      ; #REGa=#N$03.
 $E976 CALL $DA0F    ; Call #R$DA0F.
 $E979 CALL $D9C3    ; Call #R$D9C3.
 $E97C RET NZ        ; Return if {} is not zero.
 $E97D XOR A         ; {Write #N$00 to *#R$D244.
 $E97E LD ($D244),A  ; }
 $E981 RET           ; Return.

; Routine at E982
c$E982 CALL $DB54    ; Call #R$DB54.
 $E985 LD A,$02      ; #REGa=#N$02.
 $E987 CALL $DA0F    ; Call #R$DA0F.
 $E98A CALL $D9C3    ; Call #R$D9C3.
 $E98D RET NZ        ; Return if {} is not zero.
 $E98E CALL $DA59    ; Call #R$DA59.
 $E991 LD A,$03      ; {Write #N$03 to *#R$D24F.
 $E993 LD ($D24F),A  ; }
 $E996 XOR A         ; {Write #N$00 to *#R$D244.
 $E997 LD ($D244),A  ; }
 $E99A RET           ; Return.

; Routine at E99B
c$E99B CALL $E179    ; Call #R$E179.
 $E99E AND A         ; Set flags.
 $E99F JP NZ,$E693   ; Jump to #R$E693 if {} is not zero.
 $E9A2 LD A,($D252)  ; {Jump to #R$E9AE if *#R$D252 is not zero.
 $E9A5 AND A         ;
 $E9A6 JR NZ,$E9AE   ; }
 $E9A8 CALL $DA28    ; Call #R$DA28.
 $E9AB JP $E693      ; Jump to #R$E693.
*$E9AE LD A,($D246)  ; #REGa=*#R$D246.
 $E9B1 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $E9B2 JP C,$E9EA    ; Jump to #R$E9EA if the carry flag is set.
 $E9B5 LD A,$05      ; #REGa=#N$05.
 $E9B7 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $E9BB CALL $D9BB    ; Call #R$D9BB.
 $E9BE LD BC,($D24D) ; #REGbc=*#R$D24D.
 $E9C2 LD A,($D247)  ; #REGa=*#R$D247.
 $E9C5 XOR %00000001 ; Flip bit 0.
 $E9C7 ADD A,C       ; #REGa+=#REGc.
 $E9C8 LD C,A        ; #REGc=#REGa.
 $E9C9 LD A,$0F      ; #REGa=#N$0F.
 $E9CB CALL $D9BB    ; Call #R$D9BB.
 $E9CE LD BC,($D24D) ; #REGbc=*#R$D24D.
 $E9D2 INC B         ; Increment #REGb by one.
 $E9D3 INC C         ; Increment #REGc by one.
 $E9D4 LD A,($D247)  ; #REGa=*#R$D247.
 $E9D7 XOR %00000001 ; Flip bit 0.
 $E9D9 ADD A,C       ; #REGa+=#REGc.
 $E9DA LD C,A        ; #REGc=#REGa.
*$E9DB CALL $DA28    ; Call #R$DA28.
 $E9DE AND %00000011 ; Keep only bits 0-1.
 $E9E0 JR Z,$E9DB    ; Jump to #R$E9DB if the result is zero.
 $E9E2 DEC A         ; Decrease #REGa by one.
 $E9E3 ADD A,A       ; #REGa+=#REGa.
 $E9E4 ADD A,$11     ; #REGa+=#N$11.
 $E9E6 CALL $D9BB    ; Call #R$D9BB.
 $E9E9 RET           ; Return.
*$E9EA LD A,$09      ; #REGa=#N$09.
 $E9EC LD BC,($D24D) ; #REGbc=*#R$D24D.
 $E9F0 CALL $D9BB    ; Call #R$D9BB.
 $E9F3 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $E9F7 LD A,$0D      ; #REGa=#N$0D.
 $E9F9 CALL $D9BB    ; Call #R$D9BB.
 $E9FC LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EA00 INC B         ; Increment #REGb by one.
 $EA01 INC C         ; Increment #REGc by one.
 $EA02 JR $E9DB      ; Jump to #R$E9DB.

; Routine at EA04
c$EA04 LD A,$06      ; {Write #N$06 to *#R$D24A.
 $EA06 LD ($D24A),A  ; }
 $EA09 LD A,$07      ; {Write #N$07 to *#R$D244.
 $EA0B LD ($D244),A  ; }
 $EA0E LD A,($D247)  ; #REGa=*#R$D247.
 $EA11 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $EA12 CALL NC,$DA51 ; Call #R$DA51 if the carry flag is not set.
 $EA15 JP $E67C      ; Jump to #R$E67C.

; Routine at EA18
c$EA18 LD A,($D24A)  ; {Decrease *#R$D24A by one.
 $EA1B DEC A         ;
 $EA1C LD ($D24A),A  ; }
 $EA1F JR Z,$EA36    ; Jump to #R$EA36 if *#R$D24A is zero.
 $EA21 LD A,$19      ; #REGa=#N$19.
 $EA23 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EA27 CALL $D9BB    ; Call #R$D9BB.
 $EA2A LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EA2E INC B         ; {Increment #REGb by two.
 $EA2F INC B         ; }
 $EA30 LD A,$23      ; #REGa=#N$23.
 $EA32 CALL $D9BB    ; Call #R$D9BB.
 $EA35 RET           ; Return.
*$EA36 LD A,$03      ; {Write #N$03 to *#R$D24A.
 $EA38 LD ($D24A),A  ; }
 $EA3B LD A,$08      ; {Write #N$08 to *#R$D244.
 $EA3D LD ($D244),A  ; }
 $EA40 JP $E67C      ; Jump to #R$E67C.

; Routine at EA43
c$EA43 LD A,$19      ; #REGa=#N$19.
 $EA45 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EA49 CALL $D9BB    ; Call #R$D9BB.
 $EA4C LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EA50 INC B         ; {Increment #REGb by two.
 $EA51 INC B         ; }
 $EA52 LD A,$23      ; #REGa=#N$23.
 $EA54 CALL $D9BB    ; Call #R$D9BB.
 $EA57 CALL $DA59    ; Call #R$DA59.
 $EA5A CP $12        ; {Jump to #R$EA6E if #REGa is equal to #N$12.
 $EA5C JR Z,$EA6E    ; }
 $EA5E LD A,($D24B)  ; #REGa=*#R$D24B.
 $EA61 DEC A         ; Decrease #REGa by one.
 $EA62 LD ($D24B),A  ; Write #REGa to *#R$D24B.
 $EA65 CP $12        ; {Return if #REGa is higher than #N$12.
 $EA67 RET NC        ; }
 $EA68 CALL $DA59    ; Call #R$DA59.
 $EA6B CP $12        ; {Return if #REGa is not equal to #N$12.
 $EA6D RET NZ        ; }
*$EA6E LD A,$12      ; {Write #N$12 to *#R$D24E.
 $EA70 LD ($D24E),A  ; }
 $EA73 LD A,$0C      ; {Write #N$0C to *#R$D24B.
 $EA75 LD ($D24B),A  ; }
 $EA78 XOR A         ; {Write #N$00 to *#R$D246.
 $EA79 LD ($D246),A  ; }
 $EA7C LD A,($D244)  ; {Jump to #R$EA88 if *#R$D244 is not equal to #N$20.
 $EA7F CP $20        ;
 $EA81 JR NZ,$EA88   ; }
 $EA83 LD A,$21      ; #REGa=#N$21.
 $EA85 JP $E67C      ; Jump to #R$E67C.
*$EA88 LD A,$09      ; {Write #N$09 to *#R$D244.
 $EA8A LD ($D244),A  ; }
 $EA8D LD IY,$D244   ; #REGiy=#R$D244.
; Take off four hit points from the monsters energy.
 $EA91 LD A,$04      ; #REGa=#N$04.
 $EA93 CALL $DD6C    ; Call #R$DD6C.
; #AUDIO(projectile.wav)(#INCLUDE(Projectile))
 $EA96 LD A,$05      ; {Write melody ID #N$05 to *#R$FF8D.
 $EA98 LD ($FF8D),A  ; }
 $EA9B RET           ; Return.

; Routine at EA9C
c$EA9C LD A,($D24B)  ; {Jump to #R$EAB4 if *#R$D24B is equal to #N$19.
 $EA9F CP $19        ;
 $EAA1 JR Z,$EAB4    ; }
 $EAA3 DEC A         ; Decrease #REGa by one.
 $EAA4 LD ($D24B),A  ; Write #REGa to *#R$D24B.
 $EAA7 JR NZ,$EACE   ; Jump to #R$EACE if #REGa is not zero.
 $EAA9 LD A,$19      ; {Write #N$19 to *#R$D24B.
 $EAAB LD ($D24B),A  ; }
 $EAAE LD A,($D252)  ; {Jump to #R$EABA if *#R$D252 is zero.
 $EAB1 AND A         ;
 $EAB2 JR Z,$EABA    ; }
*$EAB4 CALL $E179    ; Call #R$E179.
 $EAB7 AND A         ; {Jump to #R$EACE if #REGa is zero.
 $EAB8 JR Z,$EACE    ; }
*$EABA LD A,($D247)  ; #REGa=*#R$D247.
 $EABD RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $EABE CALL NC,$DA61 ; Call #R$DA61 if the carry flag is not set.
 $EAC1 XOR A         ; {Write #N$00 to: #LIST { *#R$D244 } { *#R$D246 } {
 $EAC2 LD ($D244),A  ; *#R$D248 } LIST#
 $EAC5 LD ($D246),A  ;
 $EAC8 LD ($D248),A  ; }
 $EACB JP $E67C      ; Jump to #R$E67C.
*$EACE LD A,$07      ; #REGa=#N$07.
 $EAD0 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EAD4 CALL $D9BB    ; Call #R$D9BB.
 $EAD7 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EADB INC B         ; {Increment #REGb by two.
 $EADC INC B         ; }
 $EADD INC C         ; Increment #REGc by one.
 $EADE LD A,($D247)  ; #REGa=*#R$D247.
 $EAE1 XOR %00000001 ; Flip bit 0.
 $EAE3 ADD A,C       ; #REGa+=#REGc.
 $EAE4 LD C,A        ; #REGc=#REGa.
 $EAE5 LD A,$1B      ; #REGa=#N$1B.
 $EAE7 CALL $D9BB    ; Call #R$D9BB.
 $EAEA LD A,($D244)  ; {Return if *#R$D244 is not equal to #N$20.
 $EAED CP $20        ;
 $EAEF RET NZ        ; }
 $EAF0 LD A,$21      ; {Write #N$21 to *#R$D244.
 $EAF2 LD ($D244),A  ; }
 $EAF5 RET           ; Return.

; Routine at EAF6
c$EAF6 CALL $E179    ; Call #R$E179.
 $EAF9 CP $08        ; {Jump to #R$EB2F if #REGa is not equal to #N$08.
 $EAFB JP NZ,$EB2F   ; }
 $EAFE LD A,($D244)  ; {Jump to #R$EB2F if *#R$D244 is equal to #N$1C.
 $EB01 CP $1C        ;
 $EB03 JP Z,$EB2F    ; }
 $EB06 LD A,($D24E)  ; {Jump to #R$EB2F if *#R$D24E is higher than #N$11.
 $EB09 CP $11        ;
 $EB0B JR NC,$EB2F   ; }
 $EB0D LD A,($D24D)  ; {Jump to #R$EB18 if *#R$D24D is equal to #N$FF.
 $EB10 CP $FF        ;
 $EB12 JR Z,$EB18    ; }
 $EB14 CP $1D        ; {Jump to #R$EB2F if *#R$D24D is higher than #N$1D.
 $EB16 JR NC,$EB2F   ; }
*$EB18 LD HL,$D247   ; #REGhl=#R$D247.
 $EB1B LD A,(HL)     ; #REGa=*#REGhl.
 $EB1C XOR %00000001 ; Flip bit 0.
 $EB1E INC HL        ; Increment #REGhl by one.
 $EB1F AND (HL)      ; Merge the bits from *#REGhl.
 $EB20 CALL NZ,$DA61 ; Call #R$DA61 not zero.
 $EB23 LD A,($D246)  ; #REGa=*#R$D246.
 $EB26 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $EB27 CALL C,$DA59  ; Call #R$DA59 if the carry flag is set.
 $EB2A LD A,$08      ; #REGa=#N$08.
 $EB2C JP $E6C5      ; Jump to #R$E6C5.
; This entry point is used by the routine at #R$E68C.
*$EB2F LD A,($D246)  ; #REGa=*#R$D246.
 $EB32 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $EB33 JR NC,$EB43   ; Jump to #R$EB43 if the carry flag is not set.
 $EB35 LD HL,$C896   ; #REGhl=#R$C896.
 $EB38 LD A,($D247)  ; #REGa=*#R$D247.
 $EB3B RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $EB3C JR NC,$EB4F   ; Jump to #R$EB4F if the carry flag is not set.
 $EB3E LD HL,$C8A9   ; #REGhl=#R$C8A9.
 $EB41 JR $EB4F      ; Jump to #R$EB4F.
*$EB43 LD HL,$C86E   ; #REGhl=#R$C86E.
 $EB46 LD A,($D247)  ; #REGa=*#R$D247.
 $EB49 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $EB4A JR NC,$EB4F   ; Jump to #R$EB4F if the carry flag is not set.
 $EB4C LD HL,$C882   ; #REGhl=#R$C882.
*$EB4F LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EB53 LD A,($D24C)  ; {Increment *#R$D24C by one.
 $EB56 INC A         ;
 $EB57 LD ($D24C),A  ; }
; This entry point is used by the routine at #R$F69F.
*$EB5A LD D,$00      ; #REGd=#N$00.
 $EB5C LD E,A        ; #REGe=#REGa.
 $EB5D ADD HL,DE     ; #REGhl+=#REGde.
 $EB5E LD ($D21E),HL ; Write #REGhl to *#R$D21E.
 $EB61 LD D,(HL)     ; #REGd=*#REGhl.
 $EB62 BIT 5,D       ; {Jump to #R$EB67 if bit 5 of #REGd is not set.
 $EB64 JR Z,$EB67    ; }
 $EB66 INC C         ; Increment #REGc by one.
*$EB67 BIT 0,D       ; {Jump to #R$EB6C if bit 0 of #REGd is not set.
 $EB69 JR Z,$EB6C    ; }
 $EB6B INC C         ; Increment #REGc by one.
*$EB6C BIT 1,D       ; {Jump to #R$EB71 if bit 1 of #REGd is not set.
 $EB6E JR Z,$EB71    ; }
 $EB70 DEC C         ; Decrease #REGc by one.
*$EB71 LD A,($D3FF)  ; {Jump to #R$EB88 if *#R$D3FF is not zero.
 $EB74 AND A         ;
 $EB75 JR NZ,$EB88   ; }
 $EB77 LD A,($D247)  ; #REGa=*#R$D247.
 $EB7A XOR %00011111 ; Flip bits 0-4.
 $EB7C CP C          ; {Jump to #R$EC6E if #REGa is equal to #REGc.
 $EB7D JP Z,$EC6E    ; }
 $EB80 XOR %00011110 ; Flip bits 1-4.
 $EB82 ADD A,$FC     ; #REGa+=#N$FC.
 $EB84 CP C          ; {Jump to #R$EC6E if #REGa is equal to #REGc.
 $EB85 JP Z,$EC6E    ; }
*$EB88 BIT 2,D       ; {Jump to #R$EB8D if bit 2 of #REGd is not set.
 $EB8A JR Z,$EB8D    ; }
 $EB8C DEC B         ; Decrease #REGb by one.
*$EB8D LD A,D        ; #REGa=#REGd.
 $EB8E EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $EB8F BIT 3,D       ; {Jump to #R$EBDD if bit 3 of #REGd is not set.
 $EB91 JR Z,$EBDD    ; }
 $EB93 INC B         ; Increment #REGb by one.
 $EB94 LD A,($D3FF)  ; {Jump to #R$EBDD if *#R$D3FF is not zero.
 $EB97 AND A         ;
 $EB98 JR NZ,$EBDD   ; }
 $EB9A LD A,$12      ; {Jump to #R$EC52 if #REGb is equal to #N$12.
 $EB9C CP B          ;
 $EB9D JP Z,$EC52    ; }
 $EBA0 LD A,B        ; {Write #REGb to *#R$D24E.
 $EBA1 LD ($D24E),A  ; }
 $EBA4 LD ($D21C),BC ; Write #REGbc to *#R$D21C.
 $EBA8 LD BC,$0502   ; #REGbc=#N$0502.
 $EBAB LD DE,$090F   ; #REGde=#N$090F.
 $EBAE CALL $E0AD    ; Call #R$E0AD.
 $EBB1 LD BC,($D21C) ; #REGbc=*#R$D21C.
 $EBB5 JR Z,$EBDD    ; Jump to #R$EBDD if {} is zero.
 $EBB7 LD A,($D244)  ; {Jump to #R$EBDD if *#R$D244 is equal to #N$1C.
 $EBBA CP $1C        ;
 $EBBC JR Z,$EBDD    ; }
 $EBBE LD A,($D246)  ; #REGa=*#R$D246.
 $EBC1 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $EBC2 JP NC,$EC52   ; Jump to #R$EC52 if the carry flag is not set.
 $EBC5 LD ($D21C),BC ; Write #REGbc to *#R$D21C.
 $EBC9 LD B,$05      ; #REGb=#N$05.
 $EBCB LD A,($D247)  ; {#REGc=*#R$D247*#N$04.
 $EBCE ADD A,A       ;
 $EBCF ADD A,A       ;
 $EBD0 LD C,A        ; }
 $EBD1 LD DE,$090F   ; #REGde=#N$090F.
 $EBD4 CALL $E0AD    ; Call #R$E0AD.
 $EBD7 LD BC,($D21C) ; #REGbc=*#R$D21C.
 $EBDB JR NZ,$EC52   ; Jump to #R$EC52 if {} is not zero.
*$EBDD LD A,($D3FF)  ; {Return if *#R$D3FF is not zero.
 $EBE0 AND A         ;
 $EBE1 RET NZ        ; }
 $EBE2 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $EBE3 BIT 4,A       ; {Jump to #R$EC30 if bit 4 of #REGa is not set.
 $EBE5 JR Z,$EC30    ; }
 $EBE7 INC B         ; Increment #REGb by one.
 $EBE8 LD A,($D3FF)  ; {Return if *#R$D3FF is not zero.
 $EBEB AND A         ;
 $EBEC RET NZ        ; }
 $EBED LD A,$12      ; {Jump to #R$EC52 if #REGb is not equal to #N$12.
 $EBEF CP B          ;
 $EBF0 JR Z,$EC52    ; }
 $EBF2 LD A,B        ; #REGa=#REGb.
 $EBF3 LD ($D24E),A  ; Write #REGa to *#R$D24E.
 $EBF6 LD ($D21C),BC ; Write #REGbc to *#R$D21C.
 $EBFA LD BC,$0502   ; #REGbc=#N$0502.
 $EBFD LD DE,$090F   ; #REGde=#N$090F.
 $EC00 CALL $E0AD    ; Call #R$E0AD.
 $EC03 LD BC,($D21C) ; #REGbc=*#R$D21C.
 $EC07 JP Z,$EC30    ; Jump to #R$EC30 if {} is zero.
 $EC0A LD A,($D244)  ; {Jump to #R$EC30 if *#R$D244 is equal to #N$1C.
 $EC0D CP $1C        ;
 $EC0F JP Z,$EC30    ; }
 $EC12 LD A,($D246)  ; #REGa=*#R$D246.
 $EC15 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $EC16 JR NC,$EC52   ; Jump to #R$EC52 if the carry flag is not set.
 $EC18 LD ($D21C),BC ; Write #REGbc to *#R$D21C.
 $EC1C LD B,$05      ; #REGb=#N$05.
 $EC1E LD A,($D247)  ; {#REGc=*#R$D247*#N$04.
 $EC21 ADD A,A       ;
 $EC22 ADD A,A       ;
 $EC23 LD C,A        ; }
 $EC24 LD DE,$090F   ; #REGde=#N$090F.
 $EC27 CALL $E0AD    ; Call #R$E0AD.
 $EC2A LD BC,($D21C) ; #REGbc=*#R$D21C.
 $EC2E JR NZ,$EC52   ; Jump to #R$EC52 if {} is not zero.
*$EC30 LD ($D24D),BC ; Write #REGbc to *#R$D24D.
 $EC34 LD A,($D217)  ; {Jump to #R$ECE0 if *#R$D217 is higher than #N$11.
 $EC37 CP $11        ;
 $EC39 JP NC,$ECE0   ; }
 $EC3C LD A,$09      ; #REGa=#N$09.
 $EC3E PUSH BC       ; Stash #REGbc on the stack.
 $EC3F CALL $D9BB    ; Call #R$D9BB.
 $EC42 POP BC        ; Restore #REGbc from the stack.
 $EC43 INC B         ; Increment #REGb by one.
 $EC44 INC C         ; Increment #REGc by one.
 $EC45 LD A,($D247)  ; #REGa=*#R$D247.
 $EC48 XOR %00000001 ; Flip bit 0.
 $EC4A ADD A,C       ; #REGa+=#REGc.
 $EC4B LD C,A        ; #REGc=#REGa.
 $EC4C LD A,$17      ; #REGa=#N$17.
 $EC4E CALL $D9BB    ; Call #R$D9BB.
 $EC51 RET           ; Return.
*$EC52 LD ($D24D),BC ; Write #REGbc to *#R$D24D.
 $EC56 LD A,($D247)  ; #REGa=*#R$D247.
 $EC59 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $EC5A CALL NC,$DA61 ; Call #R$DA61 if the carry flag is not set.
 $EC5D XOR A         ; {Write #N$00 to: #LIST { *#R$D24C } { *#R$D246 } {
 $EC5E LD ($D24C),A  ; *#R$D248 } LIST#
 $EC61 LD ($D246),A  ;
 $EC64 LD ($D248),A  ; }
 $EC67 INC A         ; Increment #REGa by one.
 $EC68 LD ($D24F),A  ; Write #REGa to *#R$D24F.
 $EC6B JP $EF86      ; Jump to #R$EF86.
*$EC6E XOR A         ; {Write #N$00 to *#R$D24C.
 $EC6F LD ($D24C),A  ; }
 $EC72 INC A         ; Increment #REGa by one.
 $EC73 LD ($D244),A  ; Write #REGa to *#R$D244.
 $EC76 LD A,($D24E)  ; {Jump to #R$EF86 if *#R$D24E is equal to #N$12.
 $EC79 CP $12        ;
 $EC7B JP Z,$EF86    ; }
 $EC7E LD A,$0B      ; {Write #N$0B to *#R$D244.
 $EC80 LD ($D244),A  ; }
 $EC83 LD A,B        ; {Write #REGb to *#R$D24E.
 $EC84 LD ($D24E),A  ; }
 $EC87 JP $E67C      ; Jump to #R$E67C.

; Routine at EC8A
c$EC8A LD A,($D24E)  ; {Jump to #R$ECC0 if *#R$D24E is equal to #N$12.
 $EC8D CP $12        ;
 $EC8F JR Z,$ECC0    ; }
 $EC91 LD A,($D24B)  ; {Decrease *#R$D24B by one.
 $EC94 DEC A         ;
 $EC95 LD ($D24B),A  ; }
 $EC98 CP $12        ; {Jump to #R$ECA3 if *#R$D24B is higher than #N$12.
 $EC9A JR NC,$ECA3   ; }
 $EC9C CALL $DA59    ; Call #R$DA59.
 $EC9F CP $12        ; {Jump to #R$ECC0 if #REGa is equal to #N$12.
 $ECA1 JR Z,$ECC0    ; }
*$ECA3 LD A,$09      ; #REGa=#N$09.
 $ECA5 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $ECA9 PUSH BC       ; Stash #REGbc on the stack.
 $ECAA CALL $D9BB    ; Call #R$D9BB.
 $ECAD POP BC        ; Restore #REGbc from the stack.
 $ECAE INC B         ; Increment #REGb by one.
 $ECAF INC C         ; Increment #REGc by one.
 $ECB0 LD A,($D247)  ; #REGa=*#R$D247.
 $ECB3 XOR %00000001 ; Flip bit 0.
 $ECB5 ADD A,C       ; #REGa+=#REGc.
 $ECB6 LD C,A        ; #REGc=#REGa.
 $ECB7 LD A,$17      ; #REGa=#N$17.
 $ECB9 CALL $D9BB    ; Call #R$D9BB.
 $ECBC CALL $DA59    ; Call #R$DA59.
 $ECBF RET           ; Return.
*$ECC0 LD A,($D247)  ; #REGa=*#R$D247.
 $ECC3 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $ECC4 CALL NC,$DA61 ; Call #R$DA61 if the carry flag is not set.
 $ECC7 LD A,$12      ; {Write #N$12 to *#R$D24E.
 $ECC9 LD ($D24E),A  ; }
 $ECCC LD A,$19      ; {Write #N$19 to *#R$D24B.
 $ECCE LD ($D24B),A  ; }
 $ECD1 XOR A         ; {Write #N$00 to: #LIST { *#R$D246 } { *#R$D248 } LIST#
 $ECD2 LD ($D246),A  ;
 $ECD5 LD ($D248),A  ; }
 $ECD8 LD A,$01      ; {Write #N$01 to *#R$D24F.
 $ECDA LD ($D24F),A  ; }
 $ECDD JP $EF86      ; Jump to #R$EF86.

; Routine at ECE0
;
; Used by the routine at #R$EAF6.
c$ECE0 LD A,($D217)  ; #REGa=*#R$D217.
 $ECE3 AND %00001111 ; Keep only bits 0-3.
 $ECE5 LD B,A        ; #REGb=#REGa.
 $ECE6 BIT 3,B       ; {Jump to #R$ECEC if bit 3 of #REGb is set.
 $ECE8 JR NZ,$ECEC   ; }
 $ECEA JR $ED0C      ; Jump to #R$ED0C.
*$ECEC LD HL,$FE00   ; #REGhl=#R$FE00.
 $ECEF LD DE,$FE03   ; #REGde=#N$FE03.
 $ECF2 CALL $F352    ; Call #R$F352.
 $ECF5 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $ECF9 DEC B         ; {Decrease #REGb by two.
 $ECFA DEC B         ; }
 $ECFB LD A,$25      ; #REGa=#N$25.
 $ECFD CALL $D9BB    ; Call #R$D9BB.
 $ED00 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $ED04 INC B         ; {Increment #REGb by two.
 $ED05 INC B         ; }
 $ED06 LD A,$23      ; #REGa=#N$23.
 $ED08 CALL $D9BB    ; Call #R$D9BB.
 $ED0B RET           ; Return.
*$ED0C LD HL,$0103   ; #REGhl=#N$0103.
 $ED0F LD DE,$0100   ; #REGde=#N$0100.
 $ED12 CALL $F352    ; Call #R$F352.
 $ED15 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $ED19 INC B         ; {Increment #REGb by two.
 $ED1A INC B         ; }
 $ED1B LD A,$23      ; #REGa=#N$23.
 $ED1D CALL $D9BB    ; Call #R$D9BB.
 $ED20 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $ED24 LD A,($D247)  ; {#REGh=*#R$D247.
 $ED27 LD H,A        ; }
 $ED28 LD A,C        ; {#REGc-=#REGh.
 $ED29 SUB H         ;
 $ED2A LD C,A        ; }
 $ED2B LD A,$1D      ; #REGa=#N$1D.
 $ED2D CALL $D9BB    ; Call #R$D9BB.
 $ED30 RET           ; Return.

; Routine at ED31
c$ED31 LD A,($D217)  ; #REGa=*#R$D217.
 $ED34 AND %00001111 ; Keep only bits 0-3.
 $ED36 LD B,A        ; #REGb=#REGa.
 $ED37 BIT 2,B       ; {Jump to #R$EDA3 if bit 2 of #REGb is set.
 $ED39 JP NZ,$EDA3   ; }
 $ED3C BIT 3,B       ; {Jump to #R$ED54 if bit 3 of #REGb is set.
 $ED3E JR NZ,$ED54   ; }
 $ED40 LD A,($D247)  ; #REGa=*#R$D247.
 $ED43 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $ED44 JR C,$ED4D    ; Jump to #R$ED4D if the carry flag is set.
 $ED46 BIT 1,B       ; {Jump to #R$ED79 if bit 1 of #REGb is set.
 $ED48 JR NZ,$ED79   ; }
 $ED4A JP $EF86      ; Jump to #R$EF86.
*$ED4D BIT 1,B       ; {Jump to #R$ED79 if bit 1 of #REGb is not set.
 $ED4F JR Z,$ED79    ; }
 $ED51 JP $EF86      ; Jump to #R$EF86.
*$ED54 LD HL,$FE00   ; #REGhl=#R$FE00.
 $ED57 LD DE,$FE03   ; #REGde=#N$FE03.
 $ED5A CALL $F352    ; Call #R$F352.
 $ED5D LD A,$12      ; {Write #N$12 to *#R$D244.
 $ED5F LD ($D244),A  ; }
 $ED62 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $ED66 DEC B         ; {Decrease #REGb by two.
 $ED67 DEC B         ; }
 $ED68 LD A,$25      ; #REGa=#N$25.
 $ED6A CALL $D9BB    ; Call #R$D9BB.
 $ED6D LD BC,($D24D) ; #REGbc=*#R$D24D.
 $ED71 INC B         ; {Increment #REGb by two.
 $ED72 INC B         ; }
 $ED73 LD A,$21      ; #REGa=#N$21.
 $ED75 CALL $D9BB    ; Call #R$D9BB.
 $ED78 RET           ; Return.
*$ED79 LD HL,$0103   ; #REGhl=#N$0103.
 $ED7C LD DE,$0100   ; #REGde=#N$0100.
 $ED7F CALL $F352    ; Call #R$F352.
 $ED82 LD A,$13      ; {Write #N$13 to *#R$D244.
 $ED84 LD ($D244),A  ; }
 $ED87 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $ED8B INC B         ; {Increment #REGb by two.
 $ED8C INC B         ; }
 $ED8D LD A,$21      ; #REGa=#N$21.
 $ED8F CALL $D9BB    ; Call #R$D9BB.
 $ED92 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $ED96 LD A,($D247)  ; #REGa=*#R$D247.
 $ED99 SUB C         ; #REGa-=#REGc.
 $ED9A CPL           ; Invert the bits in #REGa.
 $ED9B INC A         ; Increment #REGa by one.
 $ED9C LD C,A        ; #REGc=#REGa.
 $ED9D LD A,$1D      ; #REGa=#N$1D.
 $ED9F CALL $D9BB    ; Call #R$D9BB.
 $EDA2 RET           ; Return.
*$EDA3 LD HL,$0302   ; #REGhl=#N$0302.
 $EDA6 LD DE,$0301   ; #REGde=#N$0301.
 $EDA9 CALL $F352    ; Call #R$F352.
 $EDAC LD A,$15      ; {Write #N$15 to *#R$D244.
 $EDAE LD ($D244),A  ; }
 $EDB1 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EDB5 LD A,($D247)  ; #REGa=*#R$D247.
 $EDB8 SUB C         ; #REGa-=#REGc.
 $EDB9 CPL           ; Invert the bits in #REGa.
 $EDBA INC A         ; Increment #REGa by one.
 $EDBB LD C,A        ; #REGc=#REGa.
 $EDBC LD A,$29      ; #REGa=#N$29.
 $EDBE CALL $D9BB    ; Call #R$D9BB.
 $EDC1 RET           ; Return.

; Routine at EDC2
c$EDC2 LD A,($D217)  ; #REGa=*#R$D217.
 $EDC5 AND %00001111 ; Keep only bits 0-3.
 $EDC7 LD B,A        ; #REGb=#REGa.
 $EDC8 BIT 3,B       ; {Jump to #R$EDE5 if bit 3 of #REGb is set.
 $EDCA JR NZ,$EDE5   ; }
 $EDCC BIT 2,B       ; {Jump to #R$EE4A if bit 2 of #REGb is set.
 $EDCE JP NZ,$EE4A   ; }
 $EDD1 LD A,($D247)  ; #REGa=*#R$D247.
 $EDD4 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $EDD5 JR C,$EDDE    ; Jump to #R$EDDE if the carry flag is set.
 $EDD7 BIT 1,B       ; {Jump to #R$EE12 if bit 1 of #REGb is set.
 $EDD9 JR NZ,$EE12   ; }
 $EDDB JP $EF86      ; Jump to #R$EF86.
*$EDDE BIT 1,B       ; {Jump to #R$EE12 if bit 1 of #REGb is not set.
 $EDE0 JR Z,$EE12    ; }
 $EDE2 JP $EF86      ; Jump to #R$EF86.
*$EDE5 LD HL,$FE01   ; #REGhl=#N$FE01.
 $EDE8 LD DE,$FE03   ; #REGde=#N$FE03.
 $EDEB CALL $F352    ; Call #R$F352.
 $EDEE LD A,$16      ; {Write #N$16 to *#R$D244.
 $EDF0 LD ($D244),A  ; }
 $EDF3 LD H,$FE      ; #REGh=#N$FE.
 $EDF5 LD D,H        ; #REGd=#REGh.
 $EDF6 LD L,$01      ; #REGl=#N$01.
 $EDF8 LD E,$00      ; #REGe=#N$00.
 $EDFA CALL $EF38    ; Call #R$EF38.
 $EDFD LD A,$25      ; #REGa=#N$25.
 $EDFF CALL $D9BB    ; Call #R$D9BB.
 $EE02 LD H,$02      ; #REGh=#N$02.
 $EE04 LD L,$01      ; #REGl=#N$01.
 $EE06 LD D,H        ; #REGd=#REGh.
 $EE07 LD E,$00      ; #REGe=#N$00.
 $EE09 CALL $EF38    ; Call #R$EF38.
 $EE0C LD A,$1F      ; #REGa=#N$1F.
 $EE0E CALL $D9BB    ; Call #R$D9BB.
 $EE11 RET           ; Return.
*$EE12 LD HL,$0104   ; #REGhl=#N$0104.
 $EE15 LD DE,$0100   ; #REGde=#N$0100.
 $EE18 CALL $F352    ; Call #R$F352.
 $EE1B LD A,$17      ; {Write #N$17 to *#R$D244.
 $EE1D LD ($D244),A  ; }
 $EE20 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EE24 INC B         ; {Increment #REGb by two.
 $EE25 INC B         ; }
 $EE26 LD A,($D247)  ; #REGa=*#R$D247.
 $EE29 XOR %00000001 ; Flip bit 0.
 $EE2B ADD A,C       ; #REGa+=#REGc.
 $EE2C LD C,A        ; #REGc=#REGa.
 $EE2D LD A,$1F      ; #REGa=#N$1F.
 $EE2F CALL $D9BB    ; Call #R$D9BB.
 $EE32 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EE36 LD A,($D247)  ; #REGa=*#R$D247.
 $EE39 SUB C         ; #REGa-=#REGc.
 $EE3A CPL           ; Invert the bits in #REGa.
 $EE3B INC A         ; Increment #REGa by one.
 $EE3C LD C,A        ; #REGc=#REGa.
 $EE3D LD A,($D247)  ; #REGa=*#R$D247.
 $EE40 XOR %00000001 ; Flip bit 0.
 $EE42 ADD A,C       ; #REGa+=#REGc.
 $EE43 LD C,A        ; #REGc=#REGa.
 $EE44 LD A,$1D      ; #REGa=#N$1D.
 $EE46 CALL $D9BB    ; Call #R$D9BB.
 $EE49 RET           ; Return.
*$EE4A LD HL,$0303   ; #REGhl=#N$0303.
 $EE4D LD DE,$0301   ; #REGde=#N$0301.
 $EE50 CALL $F352    ; Call #R$F352.
 $EE53 LD A,$19      ; {Write #N$19 to *#R$D244.
 $EE55 LD ($D244),A  ; }
 $EE58 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EE5C LD A,($D247)  ; #REGa=*#R$D247.
 $EE5F SUB C         ; #REGa-=#REGc.
 $EE60 CPL           ; Invert the bits in #REGa.
 $EE61 INC A         ; Increment #REGa by one.
 $EE62 LD C,A        ; #REGc=#REGa.
 $EE63 LD A,($D247)  ; #REGa=*#R$D247.
 $EE66 XOR %00000001 ; Flip bit 0.
 $EE68 ADD A,C       ; #REGa+=#REGc.
 $EE69 LD C,A        ; #REGc=#REGa.
 $EE6A LD A,$0B      ; #REGa=#N$0B.
 $EE6C CALL $D9BB    ; Call #R$D9BB.
 $EE6F RET           ; Return.

; Routine at EE70
c$EE70 LD A,($D24B)  ; {Decrease *#R$D24B by one.
 $EE73 DEC A         ;
 $EE74 LD ($D24B),A  ; }
 $EE77 JR Z,$EE8E    ; Jump to #R$EE8E if *#R$D24B is zero.
 $EE79 LD A,$21      ; #REGa=#N$21.
 $EE7B LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EE7F INC B         ; {Increment #REGb by two.
 $EE80 INC B         ; }
 $EE81 CALL $D9BB    ; Call #R$D9BB.
 $EE84 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EE88 LD A,$03      ; #REGa=#N$03.
 $EE8A CALL $D9BB    ; Call #R$D9BB.
 $EE8D RET           ; Return.
*$EE8E LD A,$1B      ; {Write #N$1B to *#R$D244.
 $EE90 LD ($D244),A  ; }
 $EE93 LD A,$06      ; {Write #N$06 to *#R$D24B.
 $EE95 LD ($D24B),A  ; }
 $EE98 JP $E67C      ; Jump to #R$E67C.

; Routine at EE9B
c$EE9B LD A,($D24B)  ; #REGa=*#R$D24B.
 $EE9E DEC A         ; Decrease #REGa by one.
 $EE9F CP $FF        ; {Jump to #R$EECA if #REGa is equal to #N$FF.
 $EEA1 JR Z,$EECA    ; }
 $EEA3 LD ($D24B),A  ; Write #REGa to *#R$D24B.
 $EEA6 LD A,$09      ; #REGa=#N$09.
 $EEA8 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EEAC CALL $D9BB    ; Call #R$D9BB.
 $EEAF LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EEB3 LD A,$0D      ; #REGa=#N$0D.
 $EEB5 CALL $D9BB    ; Call #R$D9BB.
 $EEB8 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EEBC INC B         ; Increment #REGb by one.
 $EEBD INC C         ; Increment #REGc by one.
 $EEBE LD A,($D24B)  ; #REGa=*#R$D24B.
 $EEC1 AND %00000011 ; Keep only bits 0-1.
 $EEC3 ADD A,A       ; #REGa+=#REGa.
 $EEC4 ADD A,$2B     ; #REGa+=#N$2B.
 $EEC6 CALL $D9BB    ; Call #R$D9BB.
 $EEC9 RET           ; Return.
*$EECA XOR A         ; {Write #N$00 to *#R$D244.
 $EECB LD ($D244),A  ; }
 $EECE LD A,$19      ; {Write #N$19 to *#R$D24B.
 $EED0 LD ($D24B),A  ; }
 $EED3 JP $E67C      ; Jump to #R$E67C.

; Routine at EED6
c$EED6 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EEDA INC B         ; Increment #REGb by one.
 $EEDB INC C         ; Increment #REGc by one.
 $EEDC LD A,$77      ; #REGa=explosion sprite (#N$77).
 $EEDE CALL $D6C9    ; Call #R$D6C9.
 $EEE1 LD A,$22      ; {Write #N$22 to *#R$D244.
 $EEE3 LD ($D244),A  ; }
 $EEE6 XOR A         ; {Write #N$00 to *#R$D249.
 $EEE7 LD ($D249),A  ; }
 $EEEA RET           ; Return.

; Routine at EEEB
c$EEEB LD A,($D24E)  ; {Jump to #R$EEFC if *#R$D24E is not equal to #N$14.
 $EEEE CP $14        ;
 $EEF0 JR NZ,$EEFC   ; }
 $EEF2 LD A,$23      ; {Write #N$23 to *#R$D244.
 $EEF4 LD ($D244),A  ; }
 $EEF7 XOR A         ; {Write #N$00 to *#R$D249.
 $EEF8 LD ($D249),A  ; }
 $EEFB RET           ; Return.
*$EEFC INC A         ; Increment #REGa by one.
 $EEFD LD ($D24E),A  ; Write #REGa to *#R$D24E.
 $EF00 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EF04 LD A,$35      ; #REGa=#N$35.
 $EF06 CALL $D6C9    ; Call #R$D6C9.
 $EF09 RET           ; Return.

; Routine at EF0A
c$EF0A LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EF0E LD A,($D249)  ; #REGa=*#R$D249.
 $EF11 AND %00000001 ; Keep only bit 0.
 $EF13 XOR %00000001 ; Flip bit 0.
 $EF15 LD ($D249),A  ; Write #REGa to *#R$D249.
 $EF18 JR NZ,$EF20   ; Jump to #R$EF20 if #REGa is not zero.
 $EF1A LD A,$37      ; #REGa=#N$37.
 $EF1C CALL $D6C9    ; Call #R$D6C9.
 $EF1F RET           ; Return.
*$EF20 LD A,($D24D)  ; {Increment *#R$D24D by one.
 $EF23 INC A         ;
 $EF24 LD ($D24D),A  ; }
 $EF27 CP $28        ; {Jump to #R$EF32 if #REGa is equal to #N$28.
 $EF29 JR Z,$EF32    ; }
 $EF2B INC C         ; Increment #REGc by one.
 $EF2C LD A,$35      ; #REGa=#N$35.
 $EF2E CALL $D6C9    ; Call #R$D6C9.
 $EF31 RET           ; Return.
*$EF32 LD A,$FF      ; {Write #N$FF to *#R$D244.
 $EF34 LD ($D244),A  ; }
 $EF37 RET           ; Return.

; Routine at EF38
;
; Used by the routines at #R$EDC2 and #R$F352.
c$EF38 LD BC,($D24D) ; #REGbc=*#R$D24D.
 $EF3C LD A,($D247)  ; #REGa=*#R$D247 (will be #N$00 or #N$01).
; Moves the orientation flag into the carry flag.
 $EF3F RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $EF40 JR C,$EF49    ; Jump to #R$EF49 if the carry flag is set.
 $EF42 LD A,B        ; {#REGb+=#REGh.
 $EF43 ADD A,H       ;
 $EF44 LD B,A        ; }
 $EF45 LD A,C        ; {#REGc+=#REGl.
 $EF46 ADD A,L       ;
 $EF47 LD C,A        ; }
 $EF48 RET           ; Return.
*$EF49 LD A,B        ; {#REGb+=#REGd.
 $EF4A ADD A,D       ;
 $EF4B LD B,A        ; }
 $EF4C LD A,C        ; {#REGc+=#REGe.
 $EF4D ADD A,E       ;
 $EF4E LD C,A        ; }
 $EF4F RET           ; Return.

; Routine at EF50
c$EF50 CALL $E179    ; Call #R$E179.
 $EF53 AND %00010000 ; Keep only bit 4.
 $EF55 JR NZ,$EF5E   ; Jump to #R$EF5E if the result is not zero.
 $EF57 XOR A         ; {Write #N$00 to *#R$D244.
 $EF58 LD ($D244),A  ; }
 $EF5B JP $E67C      ; Jump to #R$E67C.
*$EF5E LD A,($D244)  ; #REGa=*#R$D244.
 $EF61 SUB $0F       ; #REGa-=#N$0F.
 $EF63 LD H,$00      ; #REGh=#N$00.
 $EF65 LD L,A        ; #REGl=#REGa.
 $EF66 ADD HL,HL     ; #REGhl+=#REGhl.
 $EF67 LD DE,$EF70   ; #REGde=#R$EF70.
 $EF6A ADD HL,DE     ; #REGhl+=#REGde.
 $EF6B LD A,(HL)     ; #REGa=*#REGhl.
 $EF6C INC HL        ; Increment #REGhl by one.
 $EF6D LD H,(HL)     ; #REGh=*#REGhl.
 $EF6E LD L,A        ; #REGl=#REGa.
 $EF6F JP (HL)       ; Jump to the address held by *#REGhl.

; Data block at EF70
w$EF70 DEFW $ECF5
 $EF72 DEFW $ED15
 $EF74 DEFW $ECF5
 $EF76 DEFW $ED5D
 $EF78 DEFW $ED82
 $EF7A DEFW $ED5D
 $EF7C DEFW $EDAC
 $EF7E DEFW $EDEE
 $EF80 DEFW $EE1B
 $EF82 DEFW $EDEE
 $EF84 DEFW $EE53

; Routine at EF86
;
; Used by the routines at #R$E0AD, #R$E68C, #R$E967, #R$EAF6, #R$EC8A, #R$ED31
; and #R$EDC2.
c$EF86 CALL $DB54    ; Call #R$DB54.
 $EF89 LD A,($D24F)  ; #REGa=*#R$D24F.
 $EF8C CALL $DA0F    ; Call #R$DA0F.
 $EF8F CALL $D9C3    ; Call #R$D9C3.
 $EF92 RET NZ        ; Return if {} is not zero.
 $EF93 XOR A         ; {Write #N$00 to *#R$D244.
 $EF94 LD ($D244),A  ; }
 $EF97 RET           ; Return.

; Jump Table
@label=Jump_Table
w$EF98 DEFW $E68C
 $EF9A DEFW $E967
 $EF9C DEFW $E96F
 $EF9E DEFW $E971
 $EFA0 DEFW $E982
 $EFA2 DEFW $E99B
 $EFA4 DEFW $EA04
 $EFA6 DEFW $EA18
 $EFA8 DEFW $EA43
 $EFAA DEFW $EA9C
 $EFAC DEFW $EAF6
 $EFAE DEFW $EC8A
 $EFB0 DEFW $ECE0
 $EFB2 DEFW $ED31
 $EFB4 DEFW $EDC2
 $EFB6 DEFW $EF50
 $EFB8 DEFW $EF50
 $EFBA DEFW $EF50
 $EFBC DEFW $EF50
 $EFBE DEFW $EF50
 $EFC0 DEFW $EF50
 $EFC2 DEFW $EF50
 $EFC4 DEFW $EF50
 $EFC6 DEFW $EF50
 $EFC8 DEFW $EF50
 $EFCA DEFW $EF50
 $EFCC DEFW $EE70
 $EFCE DEFW $EE9B
 $EFD0 DEFW $EAF6
 $EFD2 DEFW $EE70
 $EFD4 DEFW $E68C
 $EFD6 DEFW $E68C
 $EFD8 DEFW $EA04
 $EFDA DEFW $EED6
 $EFDC DEFW $EEEB
 $EFDE DEFW $EF0A

; Handler: Buildings
;
; Used by the routine at #R$DE77.
;
; .
;
; This isn't so much a counter; it's more an address offset to select each
; buildings data in turn.
@label=Handler_Buildings
c$EFE0 XOR A           ; #REGa=#N$00 (building data offset).
@label=Handler_Buildings_Loop
*$EFE1 PUSH AF         ; Stash the building data offset on the stack.
 $EFE2 LD D,$00        ; {Create an offset using #REGde.
 $EFE4 LD E,A          ; }
 $EFE5 LD HL,$D39F     ; {#REGix=#R$D39F+building data offset.
 $EFE8 ADD HL,DE       ;
 $EFE9 PUSH HL         ;
 $EFEA POP IX          ; }
 $EFEC LD A,(IX+$00)   ; #REGa=building state (*#REGix+#N$00).
 $EFEF CP $02          ; {Jump to #R$F005 if #REGa is equal to #N$02
 $EFF1 JR Z,$F005      ; (crashing).}
 $EFF3 CP $03          ; {Jump to #R$F05A if #REGa is equal to #N$03.
 $EFF5 JP Z,$F05A      ; }
 $EFF8 CP $04          ; {Jump to #R$F0AB if #REGa is equal to #N$04
 $EFFA JP Z,$F0AB      ; }
@label=Handler_Buildings_Next
*$EFFD POP AF          ; Restore the building data offset from the stack.
 $EFFE ADD A,$0E       ; Move onto the next set of building data
                       ; (offset+#N$0E).
; Have we accounted for all the buildings?
 $F000 CP $54          ; {Jump to #R$EFE1 until #REGa is equal to #N$54.
 $F002 JR NZ,$EFE1     ; }
 $F004 RET             ; Return.
*$F005 DEC (IX+$0D)    ; Decrease *#REGix+#N$0D by one.
 $F008 JP NZ,$F052     ; Jump to #R$F052 until *#REGix+#N$0D is zero.
 $F00B LD (IX+$0D),$02 ; Write #N$02 to *#REGix+#N$0D.
 $F00F DEC (IX+$0A)    ; Decrease *#REGix+#N$0A by one.
 $F012 JR NZ,$F03C     ; Jump to #R$F03C until *#REGix+#N$0A is zero.
 $F014 LD (IX+$00),$03 ; Write #N$03 to building state (*#REGix+#N$00).
 $F018 LD A,(IX+$05)   ; #REGa=*#REGix+#N$05.
 $F01B INC A           ; Increment #REGa by one.
 $F01C LD (IX+$0B),A   ; Write #REGa to *#REGix+#N$0B.
 $F01F LD C,$07        ; #REGc=#N$07.
 $F021 LD A,(IX+$07)   ; #REGa=*#REGix+#N$07.
 $F024 RRCA            ; Rotate #REGa right one position, setting the carry
                       ; flag if bit 0 was set.
 $F025 JR NC,$F029     ; Jump to #R$F029 if the carry flag is not set.
 $F027 LD C,$38        ; #REGc=#N$38.
*$F029 LD E,(IX+$01)   ; #REGe=*#REGix+#N$01.
 $F02C LD B,(IX+$06)   ; #REGb=*#REGix+#N$06.
 $F02F LD HL,$D31F     ; {#REGhl=#R$D31F+#REGde.
 $F032 ADD HL,DE       ; }
*$F033 LD A,(HL)       ; #REGa=*#REGhl.
 $F034 AND C           ; Merge the bits from #REGc.
 $F035 LD (HL),A       ; Write #REGa to *#REGhl.
 $F036 INC HL          ; Increment #REGhl by one.
 $F037 DJNZ $F033      ; Decrease counter by one and loop back to #R$F033 until
                       ; counter is zero.
 $F039 JP $F0AB        ; Jump to #R$F0AB.
*$F03C LD L,(IX+$0A)   ; #REGl=*#REGix+#N$0A.
 $F03F CALL $F0EF      ; Call #R$F0EF.
 $F042 LD E,L          ; #REGe=#REGl.
 $F043 LD B,(IX+$06)   ; #REGb=*#REGix+#N$06.
 $F046 LD C,$FF        ; #REGc=#N$FF.
*$F048 LD A,(HL)       ; #REGa=*#REGhl.
 $F049 OR %10000000    ; Set bit 7.
 $F04B LD (HL),A       ; Write #REGa to *#REGhl.
 $F04C LD A,C          ; #REGa=#REGc.
 $F04D LD (DE),A       ; Write #REGa to *#REGde.
 $F04E INC HL          ; Increment #REGhl by one.
 $F04F INC DE          ; Increment #REGde by one.
 $F050 DJNZ $F048      ; Decrease counter by one and loop back to #R$F048 until
                       ; counter is zero.
; Plays a single building "crumbling" sound, the handler looping will keep it
; going until it's fallen and done.
; .
; #AUDIO(building-crumbling.wav)(#INCLUDE(Crumbling))
@label=Sounds_BuildingCrumbling
*$F052 LD A,$09        ; {Write melody ID #N$09 to *#R$FF8D.
 $F054 LD ($FF8D),A    ; }
 $F057 JP $F0AB        ; Jump to #R$F0AB.
@label=Sounds_BuildingCollapsing
*$F05A DEC (IX+$0D)    ; Decrease *#REGix+#N$0D by one.
 $F05D JR NZ,$F0AB     ; Jump to #R$F0AB until *#REGix+#N$0D is zero.
; Plays a single building "collapsing" sound, the handler looping will keep it
; going until it's fallen and done.
; .
; #AUDIO(building-collapsing.wav)(#INCLUDE(Collapsing))
 $F05F LD A,$08        ; {Write melody ID #N$08 to *#R$FF8D.
 $F061 LD ($FF8D),A    ; }
 $F064 LD (IX+$0D),$02 ; Write #N$02 to *#REGix+#N$0D.
 $F068 DEC (IX+$0B)    ; Decrease *#REGix+#N$0B by one.
 $F06B JR NZ,$F073     ; Jump to #R$F073 until *#REGix+#N$0B is zero.
 $F06D LD (IX+$00),$04 ; Write #N$04 to building state (*#REGix+#N$00).
 $F071 JR $F0AB        ; Jump to #R$F0AB.
*$F073 LD L,(IX+$05)   ; #REGl=*#REGix+#N$05.
 $F076 DEC L           ; Decrease #REGl by one.
 $F077 CALL $F0EF      ; Call #R$F0EF.
 $F07A ADD A,$20       ; #REGa+=#N$20.
 $F07C LD E,A          ; #REGe=#REGa.
 $F07D LD B,(IX+$0B)   ; #REGb=*#REGix+#N$0B.
*$F080 PUSH BC         ; {Stash #REGbc, #REGhl and #REGde (twice) on the stack.
 $F081 PUSH HL         ;
 $F082 PUSH DE         ;
 $F083 PUSH DE         ; }
 $F084 LD D,H          ; #REGd=#REGh.
 $F085 LD E,L          ; #REGe=#REGl.
 $F086 LD BC,$0020     ; {#REGhl+=#N($0020,$04,$04).
 $F089 ADD HL,BC       ; }
 $F08A LD B,(IX+$06)   ; #REGb=*#REGix+#N$06.
*$F08D LD A,(DE)       ; #REGa=*#REGde.
 $F08E LD (HL),A       ; Write #REGa to *#REGhl.
 $F08F INC E           ; Increment #REGe by one.
 $F090 INC L           ; Increment #REGl by one.
 $F091 DJNZ $F08D      ; Decrease counter by one and loop back to #R$F08D until
                       ; counter is zero.
 $F093 POP HL          ; Restore #REGhl from the stack.
 $F094 LD B,(IX+$06)   ; #REGb=*#REGix+#N$06.
 $F097 LD C,$FF        ; {Write #N$FF to *#REGhl.
*$F099 LD (HL),C       ; }
 $F09A INC HL          ; Increment #REGhl by one.
 $F09B DJNZ $F099      ; Decrease counter by one and loop back to #R$F099 until
                       ; counter is zero.
 $F09D LD BC,$0020     ; #REGbc=#N($0020,$04,$04).
 $F0A0 POP HL          ; Restore #REGhl from the stack.
 $F0A1 AND A           ; Set flags.
 $F0A2 SBC HL,BC       ; #REGhl-=#REGbc.
 $F0A4 EX DE,HL        ; Exchange the #REGde register with the shadow #REGhl
                       ; register.
 $F0A5 POP HL          ; Restore #REGhl from the stack.
 $F0A6 SBC HL,BC       ; #REGhl-=#REGbc.
 $F0A8 POP BC          ; Restore #REGbc from the stack.
 $F0A9 DJNZ $F080      ; Decrease counter by one and loop back to #R$F080 until
                       ; counter is zero.
; Self-modifying code.
*$F0AB XOR A           ; {Write #N$00 to *#R$F0DD.
 $F0AC LD ($F0DD),A    ; }
 $F0AF DEC (IX+$0C)    ; Decrease *#REGix+#N$0C by one.
 $F0B2 JR NZ,$F0C4     ; Jump to #R$F0C4 until *#REGix+#N$0C is zero.
 $F0B4 LD (IX+$00),$05 ; Write #N$05 to building state (*#REGix+#N$00).
 $F0B8 LD A,($D3F3)    ; {Decrease *#R$D3F3 by one.
 $F0BB DEC A           ;
 $F0BC LD ($D3F3),A    ; }
; Self-modifying code.
 $F0BF LD A,$AF        ; {Write #N$AF (XOR #REGa) to *#R$F0DD.
 $F0C1 LD ($F0DD),A    ; }
*$F0C4 LD L,(IX+$05)   ; #REGl=*#REGix+#N$05.
 $F0C7 DEC L           ; Decrease #REGl by one.
 $F0C8 CALL $F0EF      ; Call #R$F0EF.
 $F0CB ADD A,$20       ; #REGa+=#N$20.
 $F0CD LD L,A          ; #REGl=#REGa.
 $F0CE LD E,A          ; #REGe=#REGa.
 $F0CF LD B,(IX+$06)   ; #REGb=*#REGix+#N$06.
 $F0D2 EX DE,HL        ; Exchange the #REGde register with the shadow #REGhl
                       ; register.
 $F0D3 LD A,(IX+$0C)   ; #REGa=*#REGix+#N$0C.
 $F0D6 AND %00000001   ; Keep only bit 0.
 $F0D8 ADD A,A         ; {#REGa*=#N$08.
 $F0D9 ADD A,A         ;
 $F0DA ADD A,A         ; }
 $F0DB ADD A,$44       ; #REGa+=#N$44.
; #HTML(The value here is self-modified at:
; #TABLE(default,centre,centre,centre) { =h Location | =h Value Set | =h Code }
; { #R$F0AB | #N$00 | <code>NOP</code> } { #R$F0BF | #N$AF | <code>XOR #REGa</code> }
; TABLE#)
*$F0DD NOP             ; No operation OR #REGa=#N$00 depending on the above.
 $F0DE LD (HL),$FF     ; Write #N$FF to *#REGhl.
 $F0E0 LD (DE),A       ; Write #REGa to *#REGde.
 $F0E1 INC L           ; Increment #REGl by one.
 $F0E2 INC E           ; Increment #REGe by one.
 $F0E3 INC A           ; Increment #REGa by one.
 $F0E4 CP $4D          ; {Jump to #R$F0EA if #REGa is not equal to #N$4D.
 $F0E6 JR NZ,$F0EA     ; }
 $F0E8 LD A,$44        ; #REGa=#N$44.
*$F0EA DJNZ $F0DD      ; Decrease counter by one and loop back to #R$F0DD until
                       ; counter is zero.
 $F0EC JP $EFFD        ; Jump to #R$EFFD.
*$F0EF LD H,$00        ; #REGh=#N$00.
 $F0F1 DEC L           ; Decrease #REGl by one.
 $F0F2 ADD HL,HL       ; {#REGhl*=#N$20.
 $F0F3 ADD HL,HL       ;
 $F0F4 ADD HL,HL       ;
 $F0F5 ADD HL,HL       ;
 $F0F6 ADD HL,HL       ; }
 $F0F7 LD E,(IX+$03)   ; #REGe=*#REGix+#N$03.
 $F0FA LD D,(IX+$04)   ; #REGd=*#REGix+#N$04.
 $F0FD ADD HL,DE       ; #REGhl+=#REGde.
 $F0FE LD A,(IX+$07)   ; #REGa=*#REGix+#N$07.
 $F101 LD B,A          ; #REGb=#REGa.
 $F102 ADD A,A         ; #REGa+=#REGa.
 $F103 ADD A,B         ; #REGa+=#REGb.
 $F104 ADD A,$5F       ; #REGa+=#N$5F.
 $F106 LD B,A          ; #REGb=#REGa.
 $F107 LD A,H          ; #REGa=#REGh.
 $F108 SUB B           ; #REGa-=#REGb.
 $F109 ADD A,$68       ; #REGa+=#N$68.
 $F10B LD D,A          ; #REGd=#REGa.
 $F10C LD A,L          ; #REGa=#REGl.
 $F10D RET             ; Return.

; Helicopter Something
;
; Used by the routine at #R$DE77.
@label=Something_Helicopter
c$F10E LD B,$06        ; #REGb=#N$06.
 $F110 LD IX,$D2A7     ; #REGix=#R$D2A7.
*$F114 LD A,$07        ; {#REGa=#N$EC-#REGb.
 $F116 SUB B           ;
 $F117 ADD A,$E5       ; }
 $F119 LD ($D408),A    ; Write #REGa to *#R$D408.
 $F11C XOR A           ; {Write #N$00 to *#R$D247.
 $F11D LD ($D247),A    ; }
 $F120 PUSH BC         ; Stash #REGbc on the stack.
 $F121 LD A,(IX+$00)   ; {Jump to #R$F27D if *#REGix+#N$00 is zero.
 $F124 OR A            ;
 $F125 JP Z,$F27D      ; }
 $F128 LD A,(IX+$00)   ; #REGa=*#REGix+#N$00.
 $F12B LD C,(IX+$01)   ; #REGc=*#REGix+#N$01.
 $F12E LD E,(IX+$02)   ; #REGe=*#REGix+#N$02.
 $F131 LD B,(IX+$03)   ; #REGb=*#REGix+#N$03.
 $F134 XOR %00000001   ; Flip bit 0.
 $F136 LD (IX+$00),A   ; Write #REGa to *#REGix+#N$00.
 $F139 AND %00000001   ; Keep only bit 0.
 $F13B LD D,A          ; #REGd=#REGa.
 $F13C LD A,(IX+$00)   ; #REGa=*#REGix+#N$00.
 $F13F RRCA            ; RRCA.
 $F140 AND %00000111   ; Keep only bits 0-2.
 $F142 CP $01          ; {Jump to #R$F161 if #REGa is equal to #N$01.
 $F144 JR Z,$F161      ; }
 $F146 CP $02          ; {Jump to #R$F1A0 if #REGa is equal to #N$02.
 $F148 JR Z,$F1A0      ; }
 $F14A CP $03          ; {Jump to #R$F1BE if #REGa is equal to #N$03.
 $F14C JP Z,$F1BE      ; }
 $F14F CP $04          ; {Jump to #R$F22E if #REGa is equal to #N$04.
 $F151 JP Z,$F22E      ; }
 $F154 CP $05          ; {Jump to #R$F254 if #REGa is equal to #N$05.
 $F156 JP Z,$F254      ; }
 $F159 CP $06          ; {Jump to #R$F161 if #REGa is equal to #N$06.
 $F15B JP Z,$F161      ; }
 $F15E JP $F1A0        ; Jump to #R$F1A0.
*$F161 LD A,E          ; {Jump to #R$F16A if #REGe is not equal to #REGc.
 $F162 CP C            ;
 $F163 JR NZ,$F16A     ; }
 $F165 INC (IX+$02)    ; Increment *#REGix+#N$02 by one.
 $F168 JR $F17A        ; Jump to #R$F17A.
*$F16A LD A,D          ; #REGa=#REGd.
 $F16B RRCA            ; Rotate #REGa right one position, setting the carry
                       ; flag if bit 0 was set.
 $F16C LD A,$E8        ; #REGa=#N$E8.
 $F16E JP NC,$F276     ; Jump to #R$F276 if the carry flag is not set.
 $F171 INC C           ; Increment #REGc by one.
 $F172 LD (IX+$01),C   ; Write #REGc to *#REGix+#N$01.
 $F175 LD A,$E6        ; #REGa=#N$E6.
 $F177 JP $F276        ; Jump to #R$F276.
*$F17A LD A,(IX+$00)   ; #REGa=*#REGix+#N$00.
 $F17D AND %01111111   ; Keep only bits 0-6.
 $F17F CP $08          ; {Jump to #R$F191 if #REGa is lower than #N$08.
 $F181 JR C,$F191      ; }
 $F183 LD (IX+$00),$00 ; Write #N$00 to *#REGix+#N$00.
 $F187 LD A,($D3F6)    ; {Decrease *#R$D3F6 by one.
 $F18A DEC A           ;
 $F18B LD ($D3F6),A    ; }
 $F18E JP $F27D        ; Jump to #R$F27D.
*$F191 LD (IX+$00),$06 ; Write #N$06 to *#REGix+#N$00.
 $F195 LD (IX+$01),B   ; Write #REGb to *#REGix+#N$01.
 $F198 LD (IX+$03),$01 ; Write #N$01 to *#REGix+#N$03.
 $F19C POP BC          ; Restore #REGbc from the stack.
 $F19D JP $F114        ; Jump to #R$F114.
*$F1A0 LD A,$01        ; {Write #N$01 to *#R$D247.
 $F1A2 LD ($D247),A    ; }
 $F1A5 LD A,E          ; {Jump to #R$F1AE if #REGe is not equal to #REGc.
 $F1A6 CP C            ;
 $F1A7 JR NZ,$F1AE     ; }
 $F1A9 INC (IX+$02)    ; Increment *#REGix+#N$02 by one.
 $F1AC JR $F17A        ; Jump to #R$F17A.
*$F1AE LD A,D          ; #REGa=#REGd.
 $F1AF RRCA            ; Rotate #REGa right one position, setting the carry
                       ; flag if bit 0 was set.
 $F1B0 LD A,$E8        ; #REGa=#N$E8.
 $F1B2 JP NC,$F276     ; Jump to #R$F276 if the carry flag is not set.
 $F1B5 DEC C           ; Decrease #REGc by one.
 $F1B6 LD (IX+$01),C   ; Write #REGc to *#REGix+#N$01.
 $F1B9 LD A,$E6        ; #REGa=#N$E6.
 $F1BB JP $F276        ; Jump to #R$F276.
*$F1BE LD A,B          ; {Jump to #R$F1D4 if #REGb is equal to #REGc.
 $F1BF CP C            ;
 $F1C0 JR Z,$F1D4      ; }
 $F1C2 LD B,C          ; #REGb=#REGc.
 $F1C3 LD C,E          ; #REGc=#REGe.
 $F1C4 LD A,D          ; #REGa=#REGd.
 $F1C5 RRCA            ; Rotate #REGa right one position, setting the carry
                       ; flag if bit 0 was set.
 $F1C6 LD A,$EC        ; #REGa=#N$EC.
 $F1C8 JP NC,$F276     ; Jump to #R$F276 if the carry flag is not set.
 $F1CB DEC B           ; Decrease #REGb by one.
 $F1CC LD (IX+$01),B   ; Write #REGb to *#REGix+#N$01.
 $F1CF LD A,$EA        ; #REGa=#N$EA.
 $F1D1 JP $F276        ; Jump to #R$F276.
*$F1D4 LD A,E          ; #REGa=#REGe.
 $F1D5 CP $10          ; {Jump to #R$F1E9 if #REGa is higher than #N$10.
 $F1D7 JR NC,$F1E9     ; }
 $F1D9 LD (IX+$00),$08 ; Write #N$08 to *#REGix+#N$00.
 $F1DD LD C,(IX+$02)   ; #REGc=*#REGix+#N$02.
 $F1E0 DEC (IX+$02)    ; Decrease *#REGix+#N$02 by one.
 $F1E3 INC C           ; {Increment #REGc by two.
 $F1E4 INC C           ; }
 $F1E5 LD D,$02        ; #REGd=#N$02.
 $F1E7 JR $F1F2        ; Jump to #R$F1F2.
*$F1E9 LD (IX+$00),$0A ; Write #N$0A to *#REGix+#N$00.
 $F1ED LD C,(IX+$02)   ; #REGc=*#REGix+#N$02.
 $F1F0 LD D,$82        ; #REGd=#N$82.
*$F1F2 LD (IX+$03),$12 ; Write #N$12 to *#REGix+#N$03.
 $F1F6 LD B,$04        ; #REGb=#N$04.
 $F1F8 CALL $F1FF      ; Call #R$F1FF.
 $F1FB POP BC          ; Restore #REGbc from the stack.
 $F1FC JP $F114        ; Jump to #R$F114.
*$F1FF LD A,($D3F9)    ; #REGa=*#R$D3F9.
 $F202 CP $10          ; {Return if #REGa is higher than #N$10.
 $F204 RET NC          ; }
 $F205 ADD A,$03       ; #REGa+=#N$03.
 $F207 LD ($D3F9),A    ; Write #REGa to *#R$D3F9.
 $F20A LD HL,$D2BC     ; #REGhl=#R$D2BC.
*$F20D INC HL          ; {Increment #REGhl by three.
 $F20E INC HL          ;
 $F20F INC HL          ; }
 $F210 LD A,(HL)       ; {Jump to #R$F20D if *#REGhl is not zero.
 $F211 AND A           ;
 $F212 JR NZ,$F20D     ; }
 $F214 LD E,$03        ; #REGe=#N$03.
*$F216 LD (HL),D       ; Write #REGd to *#REGhl.
 $F217 INC HL          ; Increment #REGhl by one.
 $F218 LD (HL),C       ; Write #REGc to *#REGhl.
 $F219 INC HL          ; Increment #REGhl by one.
 $F21A LD (HL),B       ; Write #REGb to *#REGhl.
 $F21B INC HL          ; Increment #REGhl by one.
 $F21C INC B           ; Increment #REGb by one.
 $F21D INC C           ; Increment #REGc by one.
 $F21E LD A,D          ; {Jump to #R$F225 if #REGd is equal to #N$02.
 $F21F CP $02          ;
 $F221 JR Z,$F225      ; }
 $F223 DEC C           ; {Decrease #REGc by two.
 $F224 DEC C           ; }
*$F225 DEC E           ; Decrease #REGe by one.
 $F226 JR NZ,$F216     ; Jump to #R$F216 until #REGe is zero.
; #AUDIO(helicopter.wav)(#INCLUDE(Helicopter))
 $F228 LD A,$02        ; {Write melody ID #N$02 to *#R$FF8D.
 $F22A LD ($FF8D),A    ; }
 $F22D RET             ; Return.
*$F22E LD A,$01        ; {Write #N$01 to *#R$D247.
 $F230 LD ($D247),A    ; }
 $F233 LD A,B          ; {Jump to #R$F245 if #REGb is equal to #REGc.
 $F234 CP C            ;
 $F235 JR Z,$F245      ; }
 $F237 LD A,$EE        ; #REGa=#N$EE.
 $F239 INC C           ; Increment #REGc by one.
 $F23A LD (IX+$01),C   ; Write #REGc to *#REGix+#N$01.
 $F23D INC E           ; Increment #REGe by one.
 $F23E LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $F241 LD B,C          ; #REGb=#REGc.
 $F242 LD C,E          ; #REGc=#REGe.
 $F243 JR $F276        ; Jump to #R$F276.
*$F245 LD (IX+$00),$0C ; Write #N$0C to *#REGix+#N$00.
 $F249 LD (IX+$01),E   ; Write #REGe to *#REGix+#N$01.
 $F24C LD (IX+$02),$22 ; Write #N$22 to *#REGix+#N$02.
 $F250 POP BC          ; Restore #REGbc from the stack.
 $F251 JP $F114        ; Jump to #R$F114.
*$F254 LD A,B          ; {Jump to #R$F266 if #REGb is equal to #REGc.
 $F255 CP C            ;
 $F256 JR Z,$F266      ; }
 $F258 LD A,$EE        ; #REGa=#N$EE.
 $F25A INC C           ; Increment #REGc by one.
 $F25B LD (IX+$01),C   ; Write #REGc to *#REGix+#N$01.
 $F25E DEC E           ; Decrease #REGe by one.
 $F25F LD (IX+$02),E   ; Write #REGe to *#REGix+#N$02.
 $F262 LD B,C          ; #REGb=#REGc.
 $F263 LD C,E          ; #REGc=#REGe.
 $F264 JR $F276        ; Jump to #R$F276.
*$F266 LD (IX+$00),$0E ; Write #N$0E to *#REGix+#N$00.
 $F26A DEC E           ; Decrease #REGe by one.
 $F26B LD (IX+$01),E   ; Write #REGe to *#REGix+#N$01.
 $F26E LD (IX+$02),$FA ; Write #N$FA to *#REGix+#N$02.
 $F272 POP BC          ; Restore #REGbc from the stack.
 $F273 JP $F114        ; Jump to #R$F114.
*$F276 CALL $D6C9      ; Call #R$D6C9.
 $F279 XOR A           ; {Write #N$00 to *#R$D247.
 $F27A LD ($D247),A    ; }
*$F27D INC IX          ; {Increment #REGix by four.
 $F27F INC IX          ;
 $F281 INC IX          ;
 $F283 INC IX          ; }
 $F285 POP BC          ; Restore #REGbc from the stack.
 $F286 DEC B           ; Decrease #REGb by one.
 $F287 JP NZ,$F114     ; Jump to #R$F114 until #REGb is zero.
 $F28A RET             ; Return.

; Handler: Spawn Helicopters
;
; Used by the routine at #R$DE77.
;
; .
;
; Just return if the number of active helicopters is already at the maximum
; amount for this level.
@label=Handler_SpawnHelicopters
c$F28B LD A,($D212)  ; {Return if *#R$D3F5 is equal to *#R$D212.
 $F28E LD B,A        ;
 $F28F LD A,($D3F5)  ;
 $F292 CP B          ;
 $F293 RET Z         ; }
; Add a hint of randomness to whether we proceed or not. Roughly 50% chance.
 $F294 CALL $DA28    ; #REGa=random number #N$00-#N$FF.
 $F297 CP $80        ; {Return if #REGa is higher than #N$80.
 $F299 RET NC        ; }
; Loop to find an empty slot.
 $F29A LD HL,$D292   ; #REGhl=#R$D292 (#R$D295-#N$03).
@label=Handler_SpawnHelicopters_FindSlot
*$F29D INC HL        ; {Move the table pointer to the next helicopter table
 $F29E INC HL        ; data.
 $F29F INC HL        ; }
 $F2A0 LD A,(HL)     ; {Jump to #R$F29D if this helicopter is already active.
 $F2A1 AND A         ;
 $F2A2 JR NZ,$F29D   ; }
; 50/50 chance of jumping to #R$F2B2.
 $F2A4 CALL $DA28    ; {Get a random number of either zero or one.
 $F2A7 AND %00000001 ; }
 $F2A9 JR Z,$F2B2    ; Jump to #R$F2B2 if the result is zero.
; Creates a background helicopter.
 $F2AB LD (HL),$40   ; Write #N$40 (background) to helicopter state.
 $F2AD INC HL        ; Increment the helicopter table pointer by one.
 $F2AE LD (HL),$FC   ; Write #N$FC to helicopter X position.
 $F2B0 JR $F2B7      ; Jump to #R$F2B7.
; Creates a foreground helicopter.
@label=Handler_SpawnForegroundHelicopter
*$F2B2 LD (HL),$80   ; Write #N$80 (foreground) to helicopter state.
 $F2B4 INC HL        ; Increment the helicopter table pointer by one.
 $F2B5 LD (HL),$24   ; Write #N$24 to helicopter X position.
@label=Handler_Helicopter_SetYPos
*$F2B7 INC HL        ; Increment the helicopter table pointer by one.
 $F2B8 LD (HL),$03   ; Write #N$03 to helicopter Y position.
; 25% chance of jumping to #R$F2C2.
 $F2BA CALL $DA28    ; {Get a random number between 0-3.
 $F2BD AND %00000011 ; }
 $F2BF JR Z,$F2C2    ; Jump to #R$F2C2 if the random number is 0.
 $F2C1 LD (HL),A     ; Write the random number to helicopter Y position.
; Keep track of the number of active helicopters.
@label=Helicopter_Update_Count
*$F2C2 LD A,($D3F5)  ; {Increment *#R$D3F5 by one.
 $F2C5 INC A         ;
 $F2C6 LD ($D3F5),A  ; }
 $F2C9 RET           ; Return.

; Handler: Energy
;
; Used by the routine at #R$DE77.
@label=Handler_Energy
c$F2CA LD HL,$5F20   ; #REGhl=#R$5F20.
 $F2CD LD DE,$6820   ; #REGde=#R$6820.
 $F2D0 LD B,$20      ; #REGb=#N$20.
 $F2D2 LD C,$00      ; #REGc=#N$00.
 $F2D4 LD A,$FF      ; #REGa=#N$FF.
*$F2D6 LD (HL),C     ; Write #REGc to *#REGhl.
 $F2D7 LD (DE),A     ; Write #REGa to *#REGde.
 $F2D8 INC L         ; Increment #REGl by one.
 $F2D9 INC E         ; Increment #REGe by one.
 $F2DA DJNZ $F2D6    ; Decrease counter by one and loop back to #R$F2D6 until
                     ; counter is zero.
 $F2DC LD C,$22      ; #REGc=#N$22.
 $F2DE LD H,$6A      ; #REGh=#N$6A.
 $F2E0 LD A,($CFDE)  ; #REGa=*#R$CFDE.
 $F2E3 CALL $F2FB    ; Call #R$F2FB.
 $F2E6 LD C,$2C      ; #REGc=#N$2C.
 $F2E8 LD H,$6C      ; #REGh=#N$6C.
 $F2EA LD A,($D00D)  ; #REGa=*#R$D00D.
 $F2ED CALL $F2FB    ; Call #R$F2FB.
 $F2F0 LD C,$36      ; #REGc=#N$36.
 $F2F2 LD H,$6F      ; #REGh=#N$6F.
 $F2F4 LD A,($D03C)  ; #REGa=*#R$D03C.
 $F2F7 CALL $F2FB    ; Call #R$F2FB.
 $F2FA RET           ; Return.
*$F2FB LD B,$00      ; #REGb=#N$00.
 $F2FD LD D,B        ; #REGd=#REGb.
 $F2FE AND A         ; {Return if #REGa is zero.
 $F2FF RET Z         ; }
 $F300 SUB $08       ; #REGa-=#N$08.
 $F302 JR C,$F30E    ; Jump to #R$F30E if {} is lower.
 $F304 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $F305 LD E,$34      ; #REGe=#N$34.
 $F307 CALL $DA3D    ; Call #R$DA3D.
 $F30A EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $F30B INC C         ; Increment #REGc by one.
 $F30C JR $F2FB      ; Jump to #R$F2FB.
*$F30E ADD A,$08     ; #REGa+=#N$08.
 $F310 LD E,A        ; #REGe=#REGa.
 $F311 LD A,$08      ; #REGa=#N$08.
 $F313 SUB E         ; #REGa-=#REGe.
 $F314 ADD A,$35     ; #REGa+=#N$35.
 $F316 LD E,A        ; #REGe=#REGa.
 $F317 CALL $DA3D    ; Call #R$DA3D.
 $F31A INC C         ; Increment #REGc by one.
 $F31B RET           ; Return.

; Routine at F31C
;
; Used by the routine at #R$DE77.
c$F31C LD C,$22      ; #REGc=#N$22.
 $F31E LD H,$6A      ; #REGh=#N$6A.
 $F320 LD A,($CFDE)  ; #REGa=*#R$CFDE.
 $F323 CALL $F33B    ; Call #R$F33B.
 $F326 LD C,$2C      ; #REGc=#N$2C.
 $F328 LD H,$6C      ; #REGh=#N$6C.
 $F32A LD A,($D00D)  ; #REGa=*#R$D00D.
 $F32D CALL $F33B    ; Call #R$F33B.
 $F330 LD C,$36      ; #REGc=#N$36.
 $F332 LD H,$6F      ; #REGh=#N$6F.
 $F334 LD A,($D03C)  ; #REGa=*#R$D03C.
 $F337 CALL $F33B    ; Call #R$F33B.
 $F33A RET           ; Return.
*$F33B LD B,$00      ; #REGb=#N$00.
 $F33D LD D,B        ; #REGd=#REGb.
 $F33E AND A         ; {Return if #REGa is zero.
 $F33F RET Z         ; }
 $F340 SUB $08       ; #REGa-=#N$08.
 $F342 JR C,$F34C    ; Jump to #R$F34C if {} is lower.
 $F344 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $F345 CALL $F34C    ; Call #R$F34C.
 $F348 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $F349 INC C         ; Increment #REGc by one.
 $F34A JR $F33B      ; Jump to #R$F33B.
*$F34C LD D,$83      ; #REGd=#N$83.
 $F34E LD E,C        ; #REGe=#REGc.
 $F34F LD A,H        ; #REGa=#REGh.
 $F350 LD (DE),A     ; Write #REGa to *#REGde.
 $F351 RET           ; Return.

; Routine at F352
;
; Used by the routines at #R$ECE0, #R$ED31 and #R$EDC2.
c$F352 CALL $EF38    ; Call #R$EF38.
 $F355 LD HL,($D224) ; #REGhl=*#R$D224.
 $F358 LD (HL),B     ; Write #REGb to *#REGhl.
 $F359 INC HL        ; Increment #REGhl by one.
 $F35A LD (HL),C     ; Write #REGc to *#REGhl.
 $F35B INC HL        ; Increment #REGhl by one.
 $F35C LD A,($D246)  ; #REGa=*#R$D246.
 $F35F LD (HL),A     ; Write #REGa to *#REGhl.
 $F360 INC HL        ; Increment #REGhl by one.
 $F361 LD A,($D248)  ; #REGa=*#R$D248.
 $F364 LD (HL),A     ; Write #REGa to *#REGhl.
 $F365 INC HL        ; Increment #REGhl by one.
 $F366 LD A,($D244)  ; #REGa=*#R$D244.
 $F369 LD (HL),A     ; Write #REGa to *#REGhl.
 $F36A INC HL        ; Increment #REGhl by one.
 $F36B LD A,($D247)  ; #REGa=*#R$D247.
 $F36E LD (HL),A     ; Write #REGa to *#REGhl.
 $F36F INC HL        ; Increment #REGhl by one.
 $F370 LD ($D224),HL ; Write #REGhl to *#R$D224.
; This entry point is used by the routines at #R$F3EF and #R$F41A.
*$F373 CALL $DD38    ; Call #R$DD38.
 $F376 LD B,A        ; #REGb=#REGa.
 $F377 LD C,$00      ; #REGc=#N$00.
 $F379 LD A,(HL)     ; #REGa=*#REGhl.
 $F37A CP $C1        ; {Jump to #R$F38B if #REGa is higher than #N$C1.
 $F37C JR NC,$F38B   ; }
 $F37E AND %00111111 ; Keep only bits 0-5.
 $F380 CP $32        ; {Jump to #R$F38B if #REGa is higher than #N$32.
 $F382 JR NC,$F38B   ; }
 $F384 LD A,(HL)     ; #REGa=*#REGhl.
 $F385 AND %11000000 ; Keep only bits 6-7.
 $F387 RLCA          ; RLCA.
 $F388 RLCA          ; RLCA.
 $F389 INC A         ; Increment #REGa by one.
 $F38A LD C,A        ; #REGc=#REGa.
*$F38B CALL $F3AF    ; Call #R$F3AF.
 $F38E INC HL        ; Increment #REGhl by one.
 $F38F CALL $F3AF    ; Call #R$F3AF.
 $F392 LD E,$1F      ; #REGe=#N$1F.
 $F394 ADD HL,DE     ; #REGhl+=#REGde.
 $F395 CALL $F3AF    ; Call #R$F3AF.
 $F398 INC HL        ; Increment #REGhl by one.
 $F399 CALL $F3AF    ; Call #R$F3AF.
*$F39C LD A,($D3FB)  ; {Return if *#R$D3FB is not zero.
 $F39F AND A         ;
 $F3A0 RET NZ        ; }
 $F3A1 LD HL,($D226) ; #REGhl=*#R$D226.
 $F3A4 LD (HL),B     ; Write #REGb to *#REGhl.
 $F3A5 INC HL        ; Increment #REGhl by one.
 $F3A6 LD ($D226),HL ; Write #REGhl to *#R$D226.
 $F3A9 LD A,$01      ; {Write #N$01 to *#R$D218.
 $F3AB LD ($D218),A  ; }
 $F3AE RET           ; Return.
*$F3AF LD A,(HL)     ; {Jump to #R$F3C5 if *#REGhl is zero.
 $F3B0 AND A         ;
 $F3B1 JR Z,$F3C5    ; }
 $F3B3 CP $FF        ; {Jump to #R$F3C5 if #REGa is equal to #N$FF.
 $F3B5 JR Z,$F3C5    ; }
 $F3B7 CP B          ; {Return if #REGa is equal to #REGb.
 $F3B8 RET Z         ; }
 $F3B9 LD A,C        ; {Jump to #R$F3C5 if #REGc is zero.
 $F3BA AND A         ;
 $F3BB JR Z,$F3C5    ; }
 $F3BD LD A,(HL)     ; #REGa=*#REGhl.
 $F3BE AND %11000000 ; Keep only bits 6-7.
 $F3C0 RLCA          ; RLCA.
 $F3C1 RLCA          ; RLCA.
 $F3C2 INC A         ; Increment #REGa by one.
 $F3C3 CP C          ; {Return if #REGa is equal to #REGc.
 $F3C4 RET Z         ; }
*$F3C5 POP DE        ; Restore #REGde from the stack.
 $F3C6 LD B,$00      ; #REGb=#N$00.
 $F3C8 JR $F39C      ; Jump to #R$F39C.

; Routine at F3CA
;
; Used by the routine at #R$E119.
c$F3CA LD A,($D218)  ; #REGa=*#R$D218.
 $F3CD RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $F3CE JR C,$F3EA    ; Jump to #R$F3EA if the carry flag is set.
 $F3D0 LD HL,($D224) ; #REGhl=*#R$D224.
 $F3D3 LD A,$FF      ; #REGa=#N$FF.
 $F3D5 LD (HL),$FF   ; Write #N$FF to *#REGhl.
 $F3D7 INC HL        ; {Increment #REGhl by six.
 $F3D8 INC HL        ;
 $F3D9 INC HL        ;
 $F3DA INC HL        ;
 $F3DB INC HL        ;
 $F3DC INC HL        ; }
 $F3DD LD ($D224),HL ; Write #REGhl to *#R$D224.
 $F3E0 LD HL,($D226) ; #REGhl=*#R$D226.
 $F3E3 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $F3E5 INC HL        ; Increment #REGhl by one.
 $F3E6 LD ($D226),HL ; Write #REGhl to *#R$D226.
 $F3E9 RET           ; Return.
*$F3EA XOR A         ; {Write #N$00 to *#R$D218.
 $F3EB LD ($D218),A  ; }
 $F3EE RET           ; Return.

; Routine at F3EF
;
; Used by the routine at #R$DE77.
c$F3EF LD HL,$D22C   ; #REGhl=#R$D22C.
 $F3F2 LD B,$03      ; #REGb=#N$03.
*$F3F4 PUSH BC       ; Stash #REGbc on the stack.
 $F3F5 LD A,(HL)     ; {Jump to #R$F40B if *#REGhl is equal to #N$FF.
 $F3F6 CP $FF        ;
 $F3F8 JR Z,$F40B    ; }
 $F3FA LD B,A        ; #REGb=#REGa.
 $F3FB INC HL        ; Increment #REGhl by one.
 $F3FC LD C,(HL)     ; #REGc=*#REGhl.
 $F3FD PUSH HL       ; Stash #REGhl on the stack.
 $F3FE CALL $F373    ; Call #R$F373.
 $F401 POP HL        ; Restore #REGhl from the stack.
*$F402 INC HL        ; {Increment #REGhl by five.
 $F403 INC HL        ;
 $F404 INC HL        ;
 $F405 INC HL        ;
 $F406 INC HL        ; }
 $F407 POP BC        ; Restore #REGbc from the stack.
 $F408 DJNZ $F3F4    ; Decrease counter by one and loop back to #R$F3F4 until
                     ; counter is zero.
 $F40A RET           ; Return.
*$F40B LD DE,($D226) ; #REGde=*#R$D226.
 $F40F XOR A         ; {Write #N$00 to *#REGde.
 $F410 LD (DE),A     ; }
 $F411 INC DE        ; Increment #REGde by one.
 $F412 LD ($D226),DE ; Write #REGde to *#R$D226.
 $F416 INC HL        ; Increment #REGhl by one.
 $F417 JP $F402      ; Jump to #R$F402.

; Routine at F41A
;
; Used by the routine at #R$E119.
c$F41A LD A,(HL)     ; {Return if *#REGhl is equal to #N$FF.
 $F41B CP $FF        ;
 $F41D RET Z         ; }
 $F41E LD A,(DE)     ; {Return if *#REGde is not zero.
 $F41F AND A         ;
 $F420 RET NZ        ; }
 $F421 LD B,(HL)     ; #REGb=*#REGhl.
 $F422 INC HL        ; Increment #REGhl by one.
 $F423 LD C,(HL)     ; #REGc=*#REGhl.
 $F424 PUSH DE       ; Stash #REGde on the stack.
 $F425 LD A,$01      ; {Write #N$01 to *#R$D3FB.
 $F427 LD ($D3FB),A  ; }
 $F42A CALL $F373    ; Call #R$F373.
 $F42D XOR A         ; {Write #N$00 to *#R$D3FB.
 $F42E LD ($D3FB),A  ; }
 $F431 POP HL        ; Restore #REGhl from the stack.
 $F432 LD (HL),B     ; Write #REGb to *#REGhl.
 $F433 RET           ; Return.

; Process Monsters
;
; Used by the routine at #R$DE77.
@label=ProcessMonsters
c$F434 LD HL,$D238   ; #REGhl=#R$D238.
; Work backwards from Ralph to George.
 $F437 LD A,$03      ; {Write #N$03 (Ralph) to *#R$DF45.
@label=ProcessMonsters_Loop
*$F439 LD ($DF45),A  ; }
 $F43C PUSH AF       ; {Stash the current monster ID and #REGhl on the stack.
 $F43D PUSH HL       ; }
 $F43E LD A,(HL)     ; {If *#REGhl is not at the terminator jump to #R$F450.
 $F43F CP $FF        ;
 $F441 CALL NZ,$F450 ; }
 $F444 POP HL        ; {Restore #REGhl and the current monster ID from the
 $F445 POP AF        ; stack.}
 $F446 DEC HL        ; {Decrease #REGhl by six.
 $F447 DEC HL        ;
 $F448 DEC HL        ;
 $F449 DEC HL        ;
 $F44A DEC HL        ;
 $F44B DEC HL        ; }
 $F44C DEC A         ; Decrease current monster ID by one.
 $F44D JR NZ,$F439   ; Jump to #R$F439 until all monsters have been processed.
 $F44F RET           ; Return.

; Routine at F450
;
; Used by the routine at #R$F434.
c$F450 LD B,A        ; #REGb=#REGa.
 $F451 INC HL        ; Increment #REGhl by one.
 $F452 LD C,(HL)     ; #REGc=*#REGhl.
 $F453 INC HL        ; Increment #REGhl by one.
 $F454 LD A,(HL)     ; #REGa=*#REGhl.
 $F455 RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $F456 RET NC        ; Return if the carry flag is not set.
 $F457 INC HL        ; Increment #REGhl by one.
 $F458 LD A,(HL)     ; #REGa=*#REGhl.
 $F459 RRCA          ; Rotate #REGa left one position, setting the carry flag
                     ; if bit 0 was set.
 $F45A RET C         ; Return if the carry flag is set.
 $F45B LD ($D228),BC ; Write #REGbc to *#R$D228.
 $F45F LD H,$00      ; #REGh=#N$00.
 $F461 LD L,B        ; #REGl=#REGb.
 $F462 LD D,H        ; #REGd=#REGh.
 $F463 LD E,C        ; #REGe=#REGc.
 $F464 ADD HL,HL     ; {#REGhl*=#N$20+#REGde.
 $F465 ADD HL,HL     ;
 $F466 ADD HL,HL     ;
 $F467 ADD HL,HL     ;
 $F468 ADD HL,HL     ;
 $F469 ADD HL,DE     ; }
 $F46A LD A,$01      ; #REGa=#N$01.
 $F46C LD ($D3FB),A  ; Write #REGa to *#R$D3FB.
 $F46F LD ($D22A),HL ; Write #REGhl to *#R$D22A.
; This entry point is used by the routines at #R$F4B8 and #R$F4D1.
*$F472 LD DE,$013F   ; #REGde=#N$013F.
 $F475 CALL $E0CF    ; Call #R$E0CF.
 $F478 LD A,($D3FC)  ; #REGa=*#R$D3FC.
 $F47B RRCA          ; Rotate #REGa right one position, setting the carry flag
                     ; if bit 0 was set.
 $F47C JR C,$F480    ; Jump to #R$F480 if the carry flag is set.
 $F47E JR Z,$F488    ; Jump to #R$F488 if #REGa is zero.
*$F480 LD BC,$0000   ; #REGbc=#N($0000,$04,$04).
 $F483 LD E,$01      ; #REGe=#N$01.
 $F485 CALL $F543    ; Call #R$F543.
*$F488 LD A,($D215)  ; #REGa=*#R$D215.
 $F48B CP $4D        ; {Jump to #R$F4E6 if #REGa is lower than #N$4D.
 $F48D JR C,$F4E6    ; }
 $F48F SUB $4C       ; #REGa-=#N$4C.
 $F491 AND %00000011 ; Keep only bits 0-1.
 $F493 CP $01        ; {Jump to #R$F4E6 if #REGa is not equal to #N$01.
 $F495 JR NZ,$F4E6   ; }
 $F497 LD A,$01      ; {Write #N$01 to *#R$D3FC.
 $F499 LD ($D3FC),A  ; }
 $F49C LD A,($D215)  ; #REGa=*#R$D215.
 $F49F SUB $4D       ; #REGa-=#N$4D.
 $F4A1 SRL A         ; {Shift #REGa right twice.
 $F4A3 SRL A         ; }
 $F4A5 CP $08        ; {Jump to #R$F4B8 if #REGa is lower than #N$08.
 $F4A7 JR C,$F4B8    ; }
 $F4A9 AND %00000011 ; Keep only bits 0-1.
 $F4AB INC A         ; Increment #REGa by one.
 $F4AC ADD A,A       ; #REGa+=#REGa.
 $F4AD LD D,A        ; #REGd=#REGa.
 $F4AE LD E,$03      ; #REGe=#N$03.
 $F4B0 LD A,($DF45)  ; #REGa=*#R$DF45.
 $F4B3 CALL $DD97    ; Call #R$DD97.
 $F4B6 JR $F4DC      ; Jump to #R$F4DC.

; Handler: Eating
;
; Used by the routine at #R$F450.
;
; .
;
; Monster has eaten something, work out what.
@label=Handler_Eating
c$F4B8 CP $04          ; {Anything with an ID lower than #N$04 is food, if so
 $F4BA JR C,$F4D1      ; jump to #R$F4D1.}
; Else it's something inedible so fetch the monster state and handle it.
 $F4BC LD A,($DF45)    ; #REGa=*#R$DF45.
 $F4BF CALL $DD52      ; Call #R$DD52.
; Take #N$06 away from the monsters energy level.
 $F4C2 LD A,$06        ; #REGa=#N$06.
 $F4C4 CALL $DD6C      ; Call #R$DD6C.
 $F4C7 LD (IY+$00),$1D ; Write #N$1D to monster state (*#REGiy+#N$00).
 $F4CB LD (IY+$07),$04 ; Write #N$04 to *#REGiy+#N$07.
 $F4CF JR $F472        ; Jump to #R$F472.

; Handler: Eaten Food
;
; Used by the routine at #R$F4B8.
@label=Handler_EatFood
c$F4D1 LD A,($DF45)    ; #REGa=*#R$DF45.
 $F4D4 CALL $DD52      ; Call #R$DD52.
; Add #N$08 to the monsters energy level.
 $F4D7 LD A,$08        ; #REGa=#N$08.
 $F4D9 CALL $DD89      ; Call #R$DD89.
; This entry point is used by the routine at #R$F450.
@label=Handler_EatFood_SetState
*$F4DC LD (IY+$00),$1A ; Write "eating" (#N$1A) to monster state
                       ; (*#REGiy+#N$00).
 $F4E0 LD (IY+$07),$04 ; Write #N$04 to *#REGiy+#N$07.
 $F4E4 JR $F472        ; Jump to #R$F472.

; Routine at F4E6
;
; Used by the routine at #R$F450.
c$F4E6 LD DE,$013F     ; #REGde=#N$013F.
 $F4E9 LD BC,($D228)   ; #REGbc=*#R$D228.
 $F4ED INC C           ; Increment #REGc by one.
 $F4EE CALL $E0CF      ; Call #R$E0CF.
 $F4F1 LD A,($D3FC)    ; #REGa=*#R$D3FC.
 $F4F4 RRCA            ; Rotate #REGa right one position, setting the carry
                       ; flag if bit 0 was set.
 $F4F5 JR C,$F4F9      ; Jump to #R$F4F9 if the carry flag is set.
 $F4F7 JR Z,$F501      ; Jump to #R$F501 if #REGa is zero.
*$F4F9 LD BC,$0001     ; #REGbc=#N($0001,$04,$04).
 $F4FC LD E,$02        ; #REGe=#N$02.
 $F4FE CALL $F543      ; Call #R$F543.
*$F501 LD DE,$013F     ; #REGde=#N$013F.
 $F504 LD BC,($D228)   ; #REGbc=*#R$D228.
 $F508 INC B           ; Increment #REGb by one.
 $F509 CALL $E0CF      ; Call #R$E0CF.
 $F50C LD A,($D3FC)    ; #REGa=*#R$D3FC.
 $F50F RRCA            ; Rotate #REGa right one position, setting the carry
                       ; flag if bit 0 was set.
 $F510 JR C,$F514      ; Jump to #R$F514 if the carry flag is set.
 $F512 JR Z,$F51C      ; Jump to #R$F51C if #REGa is zero.
*$F514 LD BC,$0020     ; #REGbc=#N($0020,$04,$04).
 $F517 LD E,$03        ; #REGe=#N$03.
 $F519 CALL $F543      ; Call #R$F543.
*$F51C LD DE,$013F     ; #REGde=#N$013F.
 $F51F LD BC,($D228)   ; #REGbc=*#R$D228.
 $F523 INC B           ; Increment #REGb by one.
 $F524 INC C           ; Increment #REGc by one.
 $F525 CALL $E0CF      ; Call #R$E0CF.
 $F528 LD A,($D3FC)    ; #REGa=*#R$D3FC.
 $F52B RRCA            ; Rotate #REGa right one position, setting the carry
                       ; flag if bit 0 was set.
 $F52C JR C,$F530      ; Jump to #R$F530 if the carry flag is set.
 $F52E JR Z,$F538      ; Jump to #R$F538 if #REGa is zero.
*$F530 LD BC,$0021     ; #REGbc=#N($0021,$04,$04).
 $F533 LD E,$04        ; #REGe=#N$04.
 $F535 CALL $F543      ; Call #R$F543.
*$F538 XOR A           ; {Write #N$00 to: #LIST { *#R$D3FB } { *#R$D3FC } {
 $F539 LD ($D3FB),A    ; *#R$D219 } LIST#
 $F53C LD ($D3FC),A    ;
 $F53F LD ($D219),A    ; }
 $F542 RET             ; Return.
; This entry point is used by the routine at #R$F450.
*$F543 LD A,($D3FC)    ; #REGa=*#R$D3FC.
 $F546 RRCA            ; Rotate #REGa right one position, setting the carry
                       ; flag if bit 0 was set.
 $F547 LD A,($D215)    ; #REGa=*#R$D215.
 $F54A JR NC,$F551     ; Jump to #R$F551 if the carry flag is not set.
 $F54C LD A,$10        ; #REGa=#N$10.
 $F54E LD ($D215),A    ; Write #REGa to *#R$D215.
*$F551 AND A           ; {Return if #REGa is zero.
 $F552 RET Z           ; }
 $F553 CP $09          ; {Jump to #R$F56A if #REGa is lower than #N$09.
 $F555 JR C,$F56A      ; }
 $F557 CP $0E          ; {Jump to #R$F565 if #REGa is higher than #N$0E.
 $F559 JR NC,$F565     ; }
 $F55B LD A,E          ; #REGa=#REGe.
 $F55C AND %00000001   ; Keep only bit 0.
 $F55E XOR %00000001   ; Flip bit 0.
 $F560 ADD A,$0E       ; #REGa+=#N$0E.
 $F562 JP $F61F        ; Jump to #R$F61F.
*$F565 CP $10          ; {Jump to #R$F5E6 if #REGa is not equal to #N$10.
 $F567 JP NZ,$F5E6     ; }
*$F56A LD A,E          ; #REGa=#REGe.
 $F56B CP $01          ; {Jump to #R$F572 if #REGa is not equal to #N$01.
 $F56D JR NZ,$F572     ; }
 $F56F LD ($D219),A    ; Write #REGa to *#R$D219.
*$F572 CP $04          ; {Jump to #R$F59E if #REGa is noot equal to #N$04.
 $F574 JR NZ,$F59E     ; }
 $F576 LD A,($D219)    ; {Jump to #R$F59E if *#R$D219 is zero.
 $F579 AND A           ;
 $F57A JR Z,$F59E      ; }
 $F57C LD A,($D3FC)    ; {Jump to #R$F59E if *#R$D3FC is not zero.
 $F57F AND A           ;
 $F580 JR NZ,$F59E     ; }
 $F582 PUSH DE         ; Stash #REGde on the stack.
 $F583 CALL $DA28      ; Call #R$DA28.
 $F586 POP DE          ; Restore #REGde from the stack.
 $F587 CP $10          ; {Jump to #R$F59E if #REGa is higher than #N$10.
 $F589 JP NC,$F59E     ; }
 $F58C LD A,($D3F7)    ; #REGa=*#R$D3F7.
 $F58F CP $08          ; {Jump to #R$F59E if #REGa is equal to #N$08.
 $F591 JR Z,$F59E      ; }
 $F593 INC A           ; Increment #REGa by one.
 $F594 LD ($D3F7),A    ; Write #REGa to *#R$D3F7.
 $F597 PUSH DE         ; Stash #REGde on the stack.
 $F598 CALL $F5A4      ; Call #R$F5A4.
 $F59B POP DE          ; Restore #REGde from the stack.
 $F59C JR $F538        ; Jump to #R$F538.
*$F59E LD A,E          ; #REGa=#REGe.
 $F59F ADD A,$2F       ; #REGa+=#N$2F.
 $F5A1 JP $F61F        ; Jump to #R$F61F.
*$F5A4 CALL $DA28      ; {Get a random number between 0-3.
 $F5A7 AND %00000011   ; }
 $F5A9 CP $03          ; {Jump to #R$F5A4 if #REGa is equal to #N$03.
 $F5AB JR Z,$F5A4      ; }
 $F5AD ADD A,A         ; {#REGc=#REGa*#N$04.
 $F5AE ADD A,A         ;
 $F5AF LD C,A          ; }
 $F5B0 CALL $DA28      ; {Get a random number between 0-3.
 $F5B3 AND %00000011   ; }
 $F5B5 OR C            ; Set the bits from #REGc.
 $F5B6 ADD A,A         ; {#REGe=#N$4D+#REGa*#N$04.
 $F5B7 ADD A,A         ;
 $F5B8 ADD A,$4D       ;
 $F5BA LD E,A          ; }
 $F5BB LD A,($D218)    ; {#REGd=*#R$D218.
 $F5BE LD D,A          ; }
 $F5BF LD BC,($D22A)   ; #REGbc=*#R$D22A.
 $F5C3 CALL $F5D8      ; Call #R$F5D8.
 $F5C6 INC C           ; Increment #REGc by one.
 $F5C7 CALL $F5D8      ; Call #R$F5D8.
 $F5CA LD HL,$001F     ; #REGhl=#N($001F,$04,$04).
 $F5CD ADD HL,BC       ; #REGhl+=#REGbc.
 $F5CE LD B,H          ; #REGb=#REGh.
 $F5CF LD C,L          ; #REGc=#REGl.
 $F5D0 CALL $F5D8      ; Call #R$F5D8.
 $F5D3 INC C           ; Increment #REGc by one.
 $F5D4 CALL $F5D8      ; Call #R$F5D8.
 $F5D7 RET             ; Return.
*$F5D8 PUSH DE         ; {Stash #REGde and #REGbc on the stack.
 $F5D9 PUSH BC         ; }
 $F5DA CALL $DA3D      ; Call #R$DA3D.
 $F5DD POP BC          ; {Restore #REGbc and #REGde from the stack.
 $F5DE POP DE          ; }
 $F5DF INC E           ; Increment #REGe by one.
; #AUDIO(test.wav)(#INCLUDE(Unknown1))
 $F5E0 LD A,$01        ; {Write melody ID #N$01 to *#R$FF8D.
 $F5E2 LD ($FF8D),A    ; }
 $F5E5 RET             ; Return.
*$F5E6 CP $11          ; {Jump to #R$F5F4 if #REGa is not equal to #N$11.
 $F5E8 JR NZ,$F5F4     ; }
 $F5EA LD A,E          ; #REGa=#REGe.
 $F5EB CP $03          ; Compare #REGa with #N$03...
 $F5ED LD A,$13        ; #REGa=#N$13.
 $F5EF JR NC,$F61F     ; Jump to #R$F61F if #REGa was higher than #N$03 on line
                       ; #R$F5EB.
 $F5F1 DEC A           ; Decrease #REGa by one.
 $F5F2 JR $F61F        ; Jump to #R$F61F.
*$F5F4 CP $0E          ; {Return if #REGa is equal to #N$0E.
 $F5F6 RET Z           ; }
 $F5F7 CP $0F          ; {Return if #REGa is equal to #N$0F.
 $F5F9 RET Z           ; }
 $F5FA CP $12          ; {Return if #REGa is equal to #N$12.
 $F5FC RET Z           ; }
 $F5FD CP $13          ; {Return if #REGa is equal to #N$13.
 $F5FF RET Z           ; }
 $F600 CP $15          ; {Return if #REGa is equal to #N$15.
 $F602 RET Z           ; }
 $F603 CP $16          ; {Return if #REGa is equal to #N$16.
 $F605 RET Z           ; }
 $F606 CP $14          ; {Jump to #R$F614 if #REGa is not equal to #N$14.
 $F608 JR NZ,$F614     ; }
 $F60A LD A,E          ; #REGa=#REGe.
 $F60B CP $03          ; Compare #REGa with #N$03...
 $F60D LD A,$16        ; #REGa=#N$16.
 $F60F JR NC,$F61F     ; Jump to #R$F61F #REGa was higher than #N$03 on line
                       ; #R$F60B.
 $F611 DEC A           ; Decrease #REGa by one.
 $F612 JR $F61F        ; Jump to #R$F61F.
*$F614 CP $30          ; {Jump to #R$F56A if #REGa is lower than #N$30.
 $F616 JP C,$F56A      ; }
 $F619 CP $34          ; {Jump to #R$F56A if #REGa is higher than #N$34.
 $F61B JP NC,$F56A     ; }
 $F61E RET             ; Return.
*$F61F LD E,A          ; #REGe=#REGa.
 $F620 PUSH BC         ; {Stash #REGbc and #REGde on the stack.
 $F621 PUSH DE         ; }
 $F622 LD BC,($D228)   ; #REGbc=*#R$D228.
 $F626 CALL $F63E      ; Call #R$F63E.
 $F629 POP DE          ; {Restore #REGde and #REGbc from the stack.
 $F62A POP BC          ; }
 $F62B LD HL,($D22A)   ; #REGhl=*#R$D22A.
 $F62E ADD HL,BC       ; #REGhl+=#REGbc.
 $F62F LD B,H          ; #REGb=#REGh.
 $F630 LD C,L          ; #REGc=#REGl.
 $F631 LD A,($D218)    ; {#REGd=*#R$D218.
 $F634 LD D,A          ; }
 $F635 CALL $DA3D      ; Call #R$DA3D.
; #AUDIO(test.wav)(#INCLUDE(Unknown1))
 $F638 LD A,$01        ; {Write melody ID #N$01 to *#R$FF8D.
 $F63A LD ($FF8D),A    ; }
 $F63D RET             ; Return.
*$F63E LD HL,$D31F     ; #REGhl=#R$D31F.
 $F641 LD D,$00        ; #REGd=#N$00.
 $F643 LD E,C          ; #REGe=#REGc.
 $F644 ADD HL,DE       ; #REGhl+=#REGde.
 $F645 LD A,(HL)       ; #REGa=*#REGhl.
 $F646 EX AF,AF'       ; Exchange the #REGaf register with the shadow #REGaf
                       ; register.
 $F647 LD E,$01        ; #REGe=#N$01.
 $F649 LD A,(HL)       ; #REGa=*#REGhl.
 $F64A CP $08          ; {Jump to #R$F654 if #REGa is lower than #N$08.
 $F64C JR C,$F654      ; }
 $F64E RRCA            ; {RRCA.
 $F64F RRCA            ;
 $F650 RRCA            ; }
 $F651 AND %00000111   ; Keep only bits 0-2.
 $F653 INC E           ; Increment #REGe by one.
*$F654 LD HL,$D218     ; #REGhl=#R$D218.
 $F657 LD (HL),E       ; Write #REGe to *#REGhl.
 $F658 DEC A           ; Decrease #REGa by one.
 $F659 ADD A,A         ; #REGa+=#REGa.
 $F65A LD H,A          ; #REGh=#REGa.
 $F65B ADD A,A         ; #REGa+=#REGa.
 $F65C LD L,A          ; #REGl=#REGa.
 $F65D ADD A,A         ; #REGa+=#REGa.
 $F65E ADD A,H         ; #REGa+=#REGh.
 $F65F ADD A,L         ; #REGa+=#REGl.
 $F660 LD E,A          ; #REGe=#REGa.
 $F661 LD IX,$D39F     ; #REGix=#R$D39F.
 $F665 ADD IX,DE       ; #REGix+=#REGde.
 $F667 LD A,(IX+$00)   ; #REGa=*#REGix+#N$00.
 $F66A CP $03          ; {Return if #REGa is higher than #N$03.
 $F66C RET NC          ; }
 $F66D LD A,$13        ; #REGa=#N$13.
 $F66F SUB (IX+$05)    ; #REGa-=*#REGix+#N$05.
 $F672 LD B,A          ; #REGb=#REGa.
 $F673 LD A,($D229)    ; #REGa=*#R$D229.
 $F676 DEC A           ; Decrease #REGa by one.
 $F677 CP B            ; {Jump to #R$F681 if #REGa is higher than #REGb.
 $F678 JR NC,$F681     ; }
 $F67A EX AF,AF'       ; Exchange the #REGaf register with the shadow #REGaf
                       ; register.
 $F67B AND %00000111   ; Keep only bits 0-2.
 $F67D LD E,$01        ; #REGe=#N$01.
 $F67F JR $F654        ; Jump to #R$F654.
*$F681 LD A,(IX+$09)   ; #REGa=*#REGix+#N$09.
 $F684 SUB $02         ; #REGa-=#N$02.
 $F686 LD (IX+$09),A   ; Write #REGa to *#REGix+#N$09.
 $F689 JR NC,$F694     ; Jump to #R$F694 if {} is higher.
 $F68B LD (IX+$09),$00 ; Write #N$00 to *#REGix+#N$09.
 $F68F LD (IX+$00),$02 ; Write #N$02 to *#REGix+#N$00.
 $F693 RET             ; Return.
*$F694 LD D,$01        ; #REGd=#N$01.
 $F696 LD E,$02        ; #REGe=#N$02.
 $F698 LD A,($DF45)    ; #REGa=*#R$DF45.
 $F69B CALL $DD97      ; Call #R$DD97.
 $F69E RET             ; Return.

; Handler: Projectiles
;
; Used by the routine at #R$DE77.
@label=Handler_Projectiles
c$F69F LD B,$06      ; #REGb=#N$06 (number of possible projectiles).
 $F6A1 LD HL,$D30D   ; #REGhl=#R$D30D.
@label=Handler_Projectiles_Loop
*$F6A4 PUSH BC       ; Stash current projectile on the stack.
 $F6A5 LD A,(HL)     ; {Jump to #R$F711 if this projectile is not active.
 $F6A6 AND A         ;
 $F6A7 JR Z,$F711    ; }
; This projectile is active so let's process it.
 $F6A9 INC A         ; Increment #REGa by one.
 $F6AA LD (HL),A     ; Write #REGa to *#REGhl.
 $F6AB LD E,A        ; #REGe=#REGa.
 $F6AC INC HL        ; Increment #REGhl by one.
 $F6AD LD B,(HL)     ; #REGb=*#REGhl.
 $F6AE PUSH HL       ; Stash #REGhl on the stack.
 $F6AF INC HL        ; Increment #REGhl by one.
 $F6B0 LD C,(HL)     ; #REGc=*#REGhl.
 $F6B1 CP $41        ; {Jump to #R$F6BA if #REGa is higher than #N$41.
 $F6B3 JR NC,$F6BA   ; }
 $F6B5 LD HL,$C8A9   ; #REGhl=#R$C8A9.
 $F6B8 JR $F6BD      ; Jump to #R$F6BD.
*$F6BA LD HL,$C896   ; #REGhl=#R$C896.
*$F6BD LD A,$01      ; {Write #N$01 to *#R$D3FF.
 $F6BF LD ($D3FF),A  ; }
 $F6C2 LD A,E        ; #REGa=#REGe.
 $F6C3 AND %00111111 ; Keep only bits 0-5.
 $F6C5 DEC A         ; Decrease #REGa by one.
 $F6C6 CALL $EB5A    ; Call #R$EB5A.
 $F6C9 EX AF,AF'     ; Exchange the #REGaf register with the shadow #REGaf
                     ; register.
 $F6CA BIT 4,A       ; {Jump to #R$F6CF if bit 4 of #REGa is not set.
 $F6CC JR Z,$F6CF    ; }
 $F6CE INC B         ; Increment #REGb by one.
*$F6CF XOR A         ; {Write #N$00 to *#R$D3FF.
 $F6D0 LD ($D3FF),A  ; }
 $F6D3 POP HL        ; Restore #REGhl from the stack.
 $F6D4 LD A,C        ; #REGa=#REGc.
 $F6D5 CP $20        ; {Jump to #R$F707 if #REGa is higher than #N$20.
 $F6D7 JR NC,$F707   ; }
 $F6D9 LD A,B        ; #REGa=#REGb.
 $F6DA CP $18        ; {Jump to #R$F707 if #REGa is higher than #N$18.
 $F6DC JR NC,$F707   ; }
 $F6DE PUSH HL       ; Stash #REGhl on the stack.
 $F6DF CALL $DD38    ; Call #R$DD38.
 $F6E2 AND A         ; {Jump to #R$F6FA if #REGa is zero.
 $F6E3 JR Z,$F6FA    ; }
 $F6E5 CP $C1        ; {Jump to #R$F6FA if #REGa is higher than #N$C1.
 $F6E7 JR NC,$F6FA   ; }
 $F6E9 AND %00111111 ; Keep only bits 0-5.
 $F6EB CP $32        ; {Jump to #R$F6FA if #REGa is higher than #N$32.
 $F6ED JR NC,$F6FA   ; }
; There's been a hit, find out which monster.
 $F6EF LD A,(HL)     ; #REGa=*#REGhl.
 $F6F0 CALL $DD4D    ; Call #R$DD4D.
; Take off two hit points from the monsters energy.
 $F6F3 LD A,$02      ; #REGa=#N$02 (damage).
 $F6F5 CALL $DD6C    ; Call #R$DD6C.
 $F6F8 JR $F719      ; Jump to #R$F719.
*$F6FA POP HL        ; Restore #REGhl from the stack.
 $F6FB LD (HL),B     ; Write #REGb to *#REGhl.
 $F6FC INC HL        ; Increment #REGhl by one.
 $F6FD LD (HL),C     ; Write #REGc to *#REGhl.
 $F6FE PUSH HL       ; Stash #REGhl on the stack.
 $F6FF LD A,$F6      ; #REGa=#N$F6.
 $F701 CALL $D6C9    ; Call #R$D6C9.
 $F704 POP HL        ; Restore #REGhl from the stack.
 $F705 JR $F713      ; Jump to #R$F713.
; This entry point is used by the routine at #R$F719.
*$F707 DEC HL        ; Decrease #REGhl by one.
 $F708 LD (HL),$00   ; Write #N$00 to *#REGhl.
 $F70A LD A,($D3FA)  ; {Decrease *#R$D3FA by one.
 $F70D DEC A         ;
 $F70E LD ($D3FA),A  ; }
@label=Collision_Projectiles_Next
*$F711 INC HL        ; {Move onto the next projectile table data.
 $F712 INC HL        ;
*$F713 INC HL        ; }
 $F714 POP BC        ; Restore projectile ID from the stack.
 $F715 DEC B         ; Decrease projectile ID by one.
 $F716 JR NZ,$F6A4   ; Jump to #R$F6A4 until all projectiles have been
                     ; processed.
 $F718 RET           ; Return.

; Sounds: Projectile "Hit"
;
; Used by the routine at #R$F69F.
;
; .
;
; #AUDIO(projectile.wav)(#INCLUDE(Projectile))
@label=Audio_Projectiles_Hit
c$F719 LD A,$05      ; {Write melody ID #N$05 to *#R$FF8D.
 $F71B LD ($FF8D),A  ; }
 $F71E LD A,$75      ; #REGa=#N$75.
 $F720 CALL $D6C9    ; Call #R$D6C9.
 $F723 POP HL        ; Restore #REGhl from the stack.
 $F724 JR $F707      ; Jump to #R$F707.

; Print Banner
;
; Used by the routine at #R$DE77.
;
; .
;
; Handle George.
; .
; Monster state #N$FF means the player is ("Game Over").
@label=PrintBanner
c$F726 LD A,($CFD2)  ; {Jump to #R$F732 if *#R$CFD2 is not equal to #N$FF.
 $F729 CP $FF        ;
 $F72B JR NZ,$F732   ; }
; George is "Game Over"...
 $F72D LD C,$22      ; #REGc=#N$22 (screen co-ordinate).
 $F72F CALL $F775    ; Call #R$F775.
; Displays "George" and George's score.
@label=PrintBanner_George
*$F732 LD C,$02      ; #REGc=#N$02 (screen co-ordinate).
 $F734 LD HL,$D066   ; #REGhl=#R$D066.
 $F737 LD DE,$D05F   ; #REGde=#R$D05F.
 $F73A LD A,($CFE0)  ; #REGa=*#R$CFE0.
 $F73D CALL $F77E    ; Call #R$F77E.
; Handle Lizzy.
; .
; Monster state #N$FF means the player is ("Game Over").
 $F740 LD A,($D001)  ; {Jump to #R$F74C if *#R$D001 is not equal to #N$FF.
 $F743 CP $FF        ;
 $F745 JR NZ,$F74C   ; }
; Lizzy is "Game Over"...
 $F747 LD C,$2C      ; #REGc=#N$2C (screen co-ordinate).
 $F749 CALL $F775    ; Call #R$F775.
; Displays "Lizzy" and Lizzy's score.
@label=PrintBanner_Lizzy
*$F74C LD C,$0C      ; #REGc=#N$0C (screen co-ordinate).
 $F74E LD HL,$D074   ; #REGhl=#R$D074.
 $F751 LD DE,$D06D   ; #REGde=#R$D06D.
 $F754 LD A,($D00F)  ; #REGa=*#R$D00F.
 $F757 CALL $F77E    ; Call #R$F77E.
; Handle Ralph.
; .
; Monster state #N$FF means the player is ("Game Over").
 $F75A LD A,($D030)  ; {Jump to #R$F766 if *#R$D030 is not equal to #N$FF.
 $F75D CP $FF        ;
 $F75F JR NZ,$F766   ; }
; Ralph is "Game Over"...
 $F761 LD C,$36      ; #REGc=#N$36 (screen co-ordinate).
 $F763 CALL $F775    ; Call #R$F775.
; Displays "Ralph" and Ralph's score.
@label=PrintBanner_Ralph
*$F766 LD C,$16      ; #REGc=#N$16 (screen co-ordinate).
 $F768 LD HL,$D082   ; #REGhl=#R$D082.
 $F76B LD DE,$D07B   ; #REGde=#R$D07B.
 $F76E LD A,($D03E)  ; #REGa=*#R$D03E.
 $F771 CALL $F77E    ; Call #R$F77E.
 $F774 RET           ; Return.
; Instead of the monsters score, display "Game Over".
@label=PrintBanner_GameOver
*$F775 LD HL,$D18F   ; #REGhl=#R$D18F.
 $F778 LD B,$00      ; #REGb=#N$00 (screen co-ordinate).
 $F77A CALL $FB5B    ; Call #R$FB5B.
 $F77D RET           ; Return.
; Not actually a "flash" but the display alternates between the players score
; and their name.
@label=PrintBanner_Flash
*$F77E LD B,$00      ; #REGb=#N$00 (screen co-ordinate).
 $F780 AND A         ; {Jump to #R$F784 if #REGa is not zero.
 $F781 JR NZ,$F784   ; }
; #REGde holds the monsters name and #REGhl contains their score.
 $F783 EX DE,HL      ; Switch the #REGde and #REGhl registers.
@label=PrintBanner_Print
*$F784 CALL $FB5B    ; Call #R$FB5B.
 $F787 RET           ; Return.

; Routine at F788
;
; Used by the routine at #R$DE77.
c$F788 LD HL,$D243   ; #REGhl=#R$D243.
 $F78B CALL $F795    ; Call #R$F795.
 $F78E LD HL,$D240   ; #REGhl=#R$D240.
 $F791 CALL $F795    ; Call #R$F795.
 $F794 RET           ; Return.

; Handler: Collision Monsters?
;
; Used by the routine at #R$F788.
;
; HL Either #R$D243 or #R$D240
;
; #REGb is used as the "currently processed monster ID"; we work backwards from
; Ralph, to Lizzy and last George.
@label=Handler_Monsters
c$F795 LD B,$03        ; #REGb=#N$03 (total number of monsters/ players).
@label=Handler_Monsters_Loop
*$F797 LD A,(HL)       ; #REGa=*#REGhl.
 $F798 AND A           ; {Jump to #R$F7DA if #REGa is zero.
 $F799 JR Z,$F7DA      ; }
 $F79B CP $C1          ; {Jump to #R$F7DE if #REGa is higher than #N$C1.
 $F79D JR NC,$F7DE     ; }
 $F79F AND %00111111   ; Keep only bits 0-5.
 $F7A1 CP $32          ; {Jump to #R$F7DE if #REGa is higher than #N$32.
 $F7A3 JR NC,$F7DE     ; }
 $F7A5 LD A,B          ; #REGa=currently processed monster ID.
 $F7A6 CALL $DD52      ; Call #R$DD52.
; #REGix now contains a pointer to the currently processed monster state data.
 $F7A9 PUSH IY         ; {#REGix=#REGiy using the stack.
 $F7AB POP IX          ; }
 $F7AD LD A,(HL)       ; #REGa=*#REGhl.
 $F7AE CALL $DD4D      ; Call #R$DD4D, on return - #REGa will contain the
                       ; action monster ID and #REGiy the monster state.
; Is the action targeting the currently processed monster?
 $F7B1 CP B            ; {Jump to #R$F7DA if the action is for the monster
 $F7B2 JR Z,$F7DA      ; currently being processed.}
 $F7B4 LD A,(IY+$02)   ; {Jump to #R$F7C8 if *#REGiy+#N$02 is not zero.
 $F7B7 AND A           ;
 $F7B8 JR NZ,$F7C8     ; }
 $F7BA LD A,(IY+$03)   ; #REGa=*#REGiy+#N$03.
 $F7BD XOR (IX+$03)    ;
 $F7C0 JR Z,$F7C8      ; Jump to #R$F7C8 if the result is zero.
 $F7C2 LD A,(IX+$03)   ; #REGa=*#REGix+#N$03.
 $F7C5 LD (IY+$03),A   ; Write #REGa to *#REGiy+#N$03.
@label=Handler_Monsters_Punched
*$F7C8 LD (IY+$00),$0A ; Write #N$0A to *#REGiy+#N$00.
 $F7CC LD (IY+$04),$01 ; Write #N$01 to *#REGiy+#N$04.
; Take off two hit points from the monsters energy.
 $F7D0 LD A,$02        ; #REGa=#N$02.
 $F7D2 CALL $DD6C      ; Call #R$DD6C.
; #AUDIO(punched.wav)(#INCLUDE(Punched))
 $F7D5 LD A,$06        ; {Write melody ID #N$06 to *#R$FF8D.
 $F7D7 LD ($FF8D),A    ; }
@label=Handler_Monsters_Next
*$F7DA DEC HL          ; Decrease #REGhl by one.
 $F7DB DJNZ $F797      ; Decrease counter by one and loop back to #R$F797 until
                       ; counter is zero.
 $F7DD RET             ; Return.
*$F7DE LD A,(HL)       ; #REGa=*#REGhl.
 $F7DF PUSH HL         ; {Stash #REGhl and #REGbc on the stack.
 $F7E0 PUSH BC         ; }
 $F7E1 CP $05          ; {Jump to #R$F804 if #REGa is equal to #N$05.
 $F7E3 JR Z,$F804      ; }
 $F7E5 CP $40          ; {Jump to #R$F808 if #REGa is lower than #N$40.
 $F7E7 JR C,$F808      ; }
 $F7E9 CP $79          ; {Jump to #R$F82B if #REGa is equal to #N$79.
 $F7EB JR Z,$F82B      ; }
 $F7ED CP $7B          ; {Jump to #R$F804 if #REGa is equal to #N$7B.
 $F7EF JR Z,$F804      ; }
 $F7F1 CP $7F          ; {Jump to #R$F804 if #REGa is equal to #N$7F.
 $F7F3 JR Z,$F804      ; }
 $F7F5 CP $75          ; {Jump to #R$F804 if #REGa is equal to #N$75.
 $F7F7 JR Z,$F804      ; }
 $F7F9 CP $77          ; {Jump to #R$F804 if #REGa is equal to #N$77.
 $F7FB JR Z,$F804      ; }
 $F7FD CP $DD          ; {Jump to #R$F851 if #REGa is lower than #N$DD.
 $F7FF JR C,$F851      ; }
 $F801 JP $F878        ; Jump to #R$F878.
; Tidies the stack before moving onto the next monster.
@label=Housekeeping_Monsters_Next
*$F804 POP BC          ; {Restore #REGbc and #REGhl from the stack.
 $F805 POP HL          ; }
 $F806 JR $F7DA        ; Jump to #R$F7DA.
; Handles when a vehicle has been punched.
@label=Handler_Vehicle_Punched
*$F808 LD A,$18        ; {Reset *#R$D401 back to #N$18.
 $F80A LD ($D401),A    ; }
 $F80D LD A,B          ; #REGa=currently processed monster ID.
 $F80E LD DE,$0503     ; #REGde=#N$0503.
 $F811 CALL $DD97      ; Call #R$DD97.
 $F814 LD A,($D404)    ; #REGa=*#R$D404.
 $F817 AND %00111111   ; Keep only bits 0-5.
 $F819 INC A           ; Increment #REGa by one.
 $F81A LD B,A          ; #REGb=#REGa.
 $F81B LD A,($D403)    ; {#REGc=*#R$D403.
 $F81E LD C,A          ; }
 $F81F LD A,$77        ; #REGa=explosion sprite (#N$77).
 $F821 CALL $D6C9      ; Call #R$D6C9.
; #AUDIO(punched.wav)(#INCLUDE(Punched))
 $F824 LD A,$06        ; {Write melody ID #N$06 to *#R$FF8D.
 $F826 LD ($FF8D),A    ; }
 $F829 JR $F804        ; Jump to #R$F804.
*$F82B LD A,B          ; #REGa=#REGb.
 $F82C CALL $DD52      ; Call #R$DD52.
 $F82F LD A,($D406)    ; #REGa=*#R$D406.
 $F832 SUB $04         ; #REGa-=#N$04.
 $F834 CP (IY+$09)     ; Compare #REGa with *#REGiy+#N$09.
 $F837 LD A,($D407)    ; #REGa=*#R$D407.
 $F83A JR NC,$F83E     ; Jump to #R$F83E if {} is higher.
 $F83C XOR %10000000   ; Flip bit 7.
*$F83E OR %01000000    ; Set bit 6.
 $F840 LD ($D407),A    ; Write #REGa to *#R$D407.
 $F843 LD A,B          ; #REGa=#REGb.
 $F844 LD DE,$0203     ; #REGde=#N$0203.
 $F847 CALL $DD97      ; Call #R$DD97.
; #AUDIO(punched.wav)(#INCLUDE(Punched))
 $F84A LD A,$06        ; {Write melody ID #N$06 to *#R$FF8D.
 $F84C LD ($FF8D),A    ; }
 $F84F JR $F804        ; Jump to #R$F804.
*$F851 LD A,B          ; #REGa=#REGb.
 $F852 CALL $DD52      ; Call #R$DD52.
 $F855 LD A,(IY+$04)   ; {Jump to #R$F804 if *#REGiy+#N$04 is not zero.
 $F858 AND A           ;
 $F859 JR NZ,$F804     ; }
 $F85B LD A,(IY+$02)   ; {Jump to #R$F804 if *#REGiy+#N$02 is zero.
 $F85E AND A           ;
 $F85F JR Z,$F804      ; }
 $F861 LD (IY+$00),$1A ; Write #N$1A to *#REGiy+#N$00.
 $F865 LD (IY+$07),$04 ; Write #N$04 to *#REGiy+#N$07.
 $F869 LD A,B          ; #REGa=#REGb.
 $F86A LD D,$01        ; #REGd=#N$01.
 $F86C LD E,$03        ; #REGe=#N$03.
 $F86E CALL $DD97      ; Call #R$DD97.
; #AUDIO(punched.wav)(#INCLUDE(Punched))
 $F871 LD A,$06        ; {Write melody ID #N$06 to *#R$FF8D.
 $F873 LD ($FF8D),A    ; }
 $F876 JR $F804        ; Jump to #R$F804.
; Handles when a helicopter has been punched.
@label=Handler_Helicopter_Punched
*$F878 PUSH AF         ; Stash #REGaf on the stack.
 $F879 LD A,B          ; #REGa=#REGb.
 $F87A LD D,$05        ; #REGd=#N$05.
 $F87C LD E,$03        ; #REGe=#N$03.
 $F87E CALL $DD97      ; Call #R$DD97.
 $F881 POP AF          ; Restore #REGaf from the stack.
 $F882 SUB $E6         ; #REGa-=#N$E6.
 $F884 ADD A,A         ; {#REGa*=#N$04.
 $F885 ADD A,A         ; }
 $F886 LD H,$00        ; #REGh=#N$00.
 $F888 LD L,A          ; #REGl=#REGa.
 $F889 LD DE,$D2A7     ; {#REGhl+=#R$D2A7.
 $F88C ADD HL,DE       ; }
 $F88D LD A,(HL)       ; {Jump to #R$F804 if *#REGhl is zero.
 $F88E AND A           ;
 $F88F JP Z,$F804      ; }
 $F892 LD A,($D3F6)    ; {Decrease *#R$D3F6 by one.
 $F895 DEC A           ;
 $F896 LD ($D3F6),A    ; }
 $F899 LD A,(HL)       ; #REGa=*#REGhl.
 $F89A LD (HL),$00     ; Write #N$00 to *#REGhl.
 $F89C INC HL          ; Increment #REGhl by one.
 $F89D RRCA            ; RRCA.
 $F89E AND %00000111   ; Keep only bits 0-2.
 $F8A0 CP $03          ; {Jump to #R$F8B8 if #REGa is lower than #N$03.
 $F8A2 JR C,$F8B8      ; }
 $F8A4 CP $06          ; {Jump to #R$F8B8 if #REGa is higher than #N$06.
 $F8A6 JR NC,$F8B8     ; }
; Set #REGbc to the screen co-ordinates for the explosion.
 $F8A8 LD B,(HL)       ; #REGb=*#REGhl.
 $F8A9 INC HL          ; Increment #REGhl by one.
 $F8AA LD C,(HL)       ; #REGc=*#REGhl.
; Displays an explosion sprite.
@label=Handler_Helicopter_Explosion
*$F8AB LD A,$77        ; #REGa=explosion sprite (#N$77).
 $F8AD CALL $D6C9      ; Call #R$D6C9.
; #AUDIO(punched.wav)(#INCLUDE(Punched))
 $F8B0 LD A,$06        ; {Write melody ID #N$06 to *#R$FF8D.
 $F8B2 LD ($FF8D),A    ; }
 $F8B5 JP $F804        ; Jump to #R$F804.
; Set #REGbc to the screen co-ordinates for the explosion.
@label=SetExplosionCoordinates
*$F8B8 LD C,(HL)       ; #REGc=*#REGhl.
 $F8B9 INC HL          ; {Increment #REGhl by two.
 $F8BA INC HL          ; }
 $F8BB LD B,(HL)       ; #REGb=*#REGhl.
 $F8BC JR $F8AB        ; Jump to #R$F8AB.

; Routine at F8BE
;
; Used by the routine at #R$DE77.
c$F8BE LD HL,$D22C   ; {Write #R$D22C to *#R$D224.
 $F8C1 LD ($D224),HL ; }
 $F8C4 LD HL,$D23E   ; {Write #R$D23E to *#R$D226.
 $F8C7 LD ($D226),HL ; }
 $F8CA XOR A         ; {Write #N$00 to *#R$D218.
 $F8CB LD ($D218),A  ; }
 $F8CE RET           ; Return.

; Controls: Pause/ Quit Game
;
; Used by the routine at #R$DE19.
;
; .
;
; In-game Holding down "SHIFT" and pressing 1, 2 or 3 has the following effect:
; #TABLE(default,centre,centre,centre)
; { =h Key 1 | =h Key 2 | Action }
; { "SHIFT" | "1" | Pause }
; { "SHIFT" | "2" | Resume }
; { "SHIFT" | "3" | Quite }
; TABLE#
@label=Controls_PauseQuit
c$F8CF LD A,$FE      ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FE | SHIFT | Z | X | C | V }
                     ; TABLE#
 $F8D1 CALL $F910    ; Call #R$F910.
 $F8D4 CP $01        ; {Return if "SHIFT" is not being pressed.
 $F8D6 RET NZ        ; }
; "SHIFT" is being held down here. Test for the number keys.
 $F8D7 CALL $F90E    ; Call #R$F90E.
 $F8DA CP $04        ; {Jump to #R$F8F3 if "3" is being pressed.
 $F8DC JR Z,$F8F3    ; }
 $F8DE CP $01        ; {Return if "1" is not being pressed.
 $F8E0 RET NZ        ; }
; If "1" is being pressed - this is where the "in-game pause" loop begins.
@label=PauseGame_Loop
*$F8E1 LD A,$FE      ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FE | SHIFT | Z | X | C | V }
                     ; TABLE#
 $F8E3 CALL $F910    ; Call #R$F910.
 $F8E6 CP $01        ; Test for "SHIFT"...
 $F8E8 LD B,$06      ; #REGb=#N$06.
 $F8EA JR NZ,$F902   ; Jump to #R$F902 if "SHIFT" is not being pressed.
 $F8EC CALL $F90E    ; Call #R$F90E.
 $F8EF CP $04        ; {Jump to #R$F8FC if "3" (quit) is not being pressed.
 $F8F1 JR NZ,$F8FC   ; }
; Action quitting the game.
@label=QuitGame
*$F8F3 LD A,$01      ; {Write #N$01 to *#R$D3FD.
 $F8F5 LD ($D3FD),A  ; }
; To resume the game we just reset the border colour and RETurn from the pause
; loop.
@label=ResumeGame
*$F8F8 XOR A         ; {Set the border to BLACK.
 $F8F9 OUT ($FE),A   ; }
 $F8FB RET           ; Return.
; The game is in the pause loop so test if we want to resume.
@label=TestFor_ResumeGame
*$F8FC CP $02        ; {Jump to #R$F8F8 if "2" is being pressed.
 $F8FE JR Z,$F8F8    ; }
 $F900 LD B,$06      ; #REGb=#N$06.
; Creates a nice border pattern.
@label=GamePaused
*$F902 LD A,B        ; #REGa=#REGb.
 $F903 OUT ($FE),A   ; {#HTML(Change border <em>very quickly</em> to create a
 $F905 OUT ($FE),A   ; rainbow effect.)}
 $F907 DJNZ $F902    ; Decrease counter by one and loop back to #R$F902 until
                     ; counter is zero.
 $F909 CALL $F90E    ; Call #R$F90E.
 $F90C JR $F8E1      ; Loop back to #R$F8E1.
; Testing for the number keys.
@label=ReadKeyboard_1234
*$F90E LD A,$F7      ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$F7 | 1 | 2 | 3 | 4 | 5 }
                     ; TABLE#
@label=ReadKeyboard
*$F910 IN A,($FE)    ; Read from the keyboard.
 $F912 CPL           ; Invert the bits in #REGa.
 $F913 AND %00001111 ; Keep only bits 0-3.
 $F915 RET           ; Return.

; Selection Screen
;
; Used by the routine at #R$DE19.
;
; .
;
; This routine builds the game selection screen.
; .
; #PUSHS #SIM(start=$F916,stop=$F92A) #SIM(start=$F96D,stop=$F973)
; #SCR$02(select-screen) #POPS
@label=SelectionScreen
c$F916 XOR A         ; {Set border colour to BLACK.
 $F917 OUT ($FE),A   ; }
 $F919 CALL $FBDB    ; Call #R$FBDB.
; The admin screens show the right-hand side of level 2.
 $F91C LD A,$02      ; #REGa=level #N$02.
 $F91E CALL $DF90    ; Call #R$DF90.
 $F921 CALL $D409    ; Call #R$D409.
 $F924 CALL $FB8E    ; Call #R$FB8E.
 $F927 CALL $F981    ; Call #R$F981.
; The selection page displays for a period of time, and then the game cycles
; through playareas.
 $F92A LD B,$FF      ; #REGb=#N$FF (counter).
*$F92C HALT          ; Halt operation (suspend CPU until the next interrupt).
 $F92D PUSH BC       ; Stash #REGbc on the stack.
 $F92E CALL $DDC0    ; Call #R$DDC0.
 $F931 POP BC        ; Restore #REGbc from the stack.
 $F932 JR NZ,$F954   ; Jump to #R$F954 if {} is not zero.
 $F934 LD A,D        ; {Jump to #R$F954 if #REGd is equal to #N$FF.
 $F935 CP $FF        ;
 $F937 JR Z,$F954    ; }
 $F939 CP $1E        ; {Return if #REGa is equal to #N$1E.
 $F93B RET Z         ; }
 $F93C CP $0F        ; {Jump to #R$F92C if #REGa is not equal to #N$0F.
 $F93E JR NZ,$F92C   ; }
; Removes the print termination bit from the entire table at #R$FBF2.
 $F940 LD HL,$FBF2   ; #REGhl=#R$FBF2.
 $F943 LD B,$28      ; #REGb=#N$28 (length).
@label=StripPrintTerminationBit_Loop
*$F945 LD A,(HL)     ; #REGa=*#REGhl.
 $F946 AND %01111111 ; Keep only bits 0-6.
 $F948 LD (HL),A     ; Write #REGa to *#REGhl.
 $F949 INC HL        ; Increment #REGhl by one.
 $F94A DJNZ $F945    ; Decrease counter by one and loop back to #R$F945 until
                     ; counter is zero.
 $F94C CALL $FB8E    ; Call #R$FB8E.
 $F94F CALL $F9BF    ; Call #R$F9BF.
 $F952 JR $F916      ; Jump to #R$F916.
*$F954 DJNZ $F92C    ; Decrease counter by one and loop back to #R$F92C until
                     ; counter is zero.
 $F956 CALL $FBC8    ; Call #R$FBC8.
 $F959 JR NZ,$F916   ; Jump to #R$F916 if {} is not zero.
; This loops over some level playareas until a key is pressed or we reach level
; #N$0B.
 $F95B LD B,$01      ; #REGb=level #N$01.
@label=DisplayLevels_Loop
*$F95D PUSH BC       ; {Stash the current level on the stack twice.
 $F95E PUSH BC       ; }
 $F95F CALL $FBDB    ; Call #R$FBDB.
 $F962 POP BC        ; Restore current level from the stack.
 $F963 LD A,B        ; #REGa=current level to display.
 $F964 CALL $DF90    ; Call #R$DF90.
 $F967 CALL $D409    ; Call #R$D409.
 $F96A CALL $FC1A    ; Call #R$FC1A.
 $F96D CALL $D604    ; Call #R$D604.
 $F970 CALL $D5F8    ; Call #R$D5F8.
 $F973 CALL $FBC8    ; Call #R$FBC8.
 $F976 POP BC        ; Restore current level from the stack.
 $F977 JR NZ,$F916   ; Jump to #R$F916 if any key has been pressed.
 $F979 INC B         ; Increment current level by one.
; Only display levels #N$00-#N$0A.
 $F97A LD A,B        ; {Loop back to #R$F95D until #REGb is equal to #N$0B.
 $F97B CP $0B        ;
 $F97D JR NZ,$F95D   ; }
; Display the selection screen options.
 $F97F JR $F916      ; Jump to #R$F916.

; Print Selection Screen
;
; Used by the routine at #R$F916.
@label=Print_SelectionScreen
c$F981 LD HL,$D089   ; #REGhl=#R$D089.
 $F984 LD BC,$0F00   ; #REGbc=#N$0F00 (screen co-ordinates).
@label=SelectionScreen_CreditsLoop
*$F987 PUSH BC       ; Stash #REGbc on the stack.
 $F988 CALL $FB5B    ; Call #R$FB5B.
 $F98B POP BC        ; Restore #REGbc from the stack.
 $F98C INC HL        ; Move onto the start of the next message.
 $F98D INC B         ; Move down one screen row.
; Check if all lines of #R$D089 have been printed.
 $F98E LD A,B        ; {Jump to #R$F987 if #REGb is not equal to #N$17.
 $F98F CP $17        ;
 $F991 JR NZ,$F987   ; }
; Now display #R$D110 (which doesn't use the same mechanism as the lines aren't
; sequential).
 $F993 LD HL,$D110   ; #REGhl=#R$D110.
; Prints "#STR($D110)".
 $F996 LD BC,$0501   ; #REGbc=#N$0501 (screen co-ordinates).
 $F999 CALL $FB5B    ; Call #R$FB5B.
 $F99C INC HL        ; Move onto the start of the next message.
; Prints "#STR($D119)".
 $F99D LD BC,$0605   ; #REGbc=#N$0605 (screen co-ordinates).
 $F9A0 CALL $FB5B    ; Call #R$FB5B.
 $F9A3 INC HL        ; Move onto the start of the next message.
; Prints "#STR($D11D)".
 $F9A4 LD BC,$0901   ; #REGbc=#N$0901 (screen co-ordinates).
 $F9A7 CALL $FB5B    ; Call #R$FB5B.
 $F9AA INC HL        ; Move onto the start of the next message.
; Prints "#STR($D127)".
 $F9AB LD BC,$0A05   ; #REGbc=#N$0A05 (screen co-ordinates).
 $F9AE CALL $FB5B    ; Call #R$FB5B.
; Prints "#STR($D12B)".
 $F9B1 LD BC,$0B05   ; #REGbc=#N$0B05 (screen co-ordinates).
 $F9B4 INC HL        ; Move onto the start of the next message.
 $F9B5 CALL $FB5B    ; Call #R$FB5B.
; Output to the screen buffer.
 $F9B8 CALL $D604    ; Call #R$D604.
 $F9BB CALL $D5F8    ; Call #R$D5F8.
 $F9BE RET           ; Return.

; Change Controls
;
; Used by the routine at #R$F916.
@label=ChangeControls
c$F9BF CALL $FBD4      ; Call #R$FBD4.
 $F9C2 JR NZ,$F9BF     ; Loop back to #R$F9BF until a key is pressed.
; Reset the control type for all monsters.
 $F9C4 LD A,$FF        ; {Write #N$FF to: #LIST { *#R$CFE0 } { *#R$D00F } {
 $F9C6 LD ($CFE0),A    ; *#R$D03E } LIST#
 $F9C9 LD ($D00F),A    ;
 $F9CC LD ($D03E),A    ; }
; Set up a count for how many players will be using the keyboard (see #R$FA53).
 $F9CF LD A,$03        ; {Write #N$03 to *#R$FB5A.
 $F9D1 LD ($FB5A),A    ; }
; Create a "change controls" page for George:
; .
; #PUSHS #SIM(start=$F916,stop=$F924) #SIM(start=#PC,stop=$FA33)
; #SCR$02(controls-george) #POPS
 $F9D4 CALL $FB8E      ; Call #R$FB8E.
 $F9D7 LD HL,$D05F     ; #REGhl=#R$D05F.
 $F9DA LD IX,$CFD2     ; #REGix=#R$CFD2.
 $F9DE CALL $F9FC      ; Call #R$F9FC.
; Create a "change controls" page for Lizzy.
; .
; #PUSHS #SIM(start=$F916,stop=$F924) #SIM(start=#PC,stop=$FA33)
; #SCR$02(controls-lizzy) #POPS
 $F9E1 CALL $FB8E      ; Call #R$FB8E.
 $F9E4 LD IX,$D001     ; #REGix=#R$D001.
 $F9E8 LD HL,$D06D     ; #REGhl=#R$D06D.
 $F9EB CALL $F9FC      ; Call #R$F9FC.
; Create a "change controls" page for Ralph.
; .
; #PUSHS #SIM(start=$F916,stop=$F924) #SIM(start=#PC,stop=$FA33)
; #SCR$02(controls-ralph) #POPS
 $F9EE CALL $FB8E      ; Call #R$FB8E.
 $F9F1 LD IX,$D030     ; #REGix=#R$D030.
 $F9F5 LD HL,$D07B     ; #REGhl=#R$D07B.
 $F9F8 CALL $F9FC      ; Call #R$F9FC.
 $F9FB RET             ; Return.
; Print the monster name.
@label=ChangeControls_Action
*$F9FC LD BC,$0804     ; #REGbc=#N$0804 (screen co-ordinates).
 $F9FF CALL $FB5B      ; Call #R$FB5B.
; Prints "#STR($D0D5) #STR($D0DF)".
 $FA02 LD HL,$D0D5     ; #REGhl=#R$D0D5.
 $FA05 LD BC,$0303     ; #REGbc=#N$0303 (screen co-ordinates).
 $FA08 CALL $FB5B      ; Call #R$FB5B.
 $FA0B INC HL          ; Move onto the start of the next message.
 $FA0C LD BC,$0502     ; #REGbc=#N$0502 (screen co-ordinates).
 $FA0F CALL $FB5B      ; Call #R$FB5B.
; Programmatically display all the #R$D133 options.
 $FA12 LD HL,$D133     ; #REGhl=#R$D133.
 $FA15 XOR A           ; #REGa=#N$00 (option counter).
@label=ChangeControls_PrintLoop
*$FA16 PUSH AF         ; Stash the option counter on the stack.
; The options are two lines apart and start from row #N$0B.
 $FA17 ADD A,A         ; {#REGb=#N$0B+#REGa*#N$02.
 $FA18 ADD A,$0B       ;
 $FA1A LD B,A          ; }
 $FA1B LD C,$01        ; #REGc=#N$01 (screen co-ordinates).
 $FA1D CALL $FB5B      ; Call #R$FB5B.
 $FA20 INC HL          ; Move onto the start of the next message.
 $FA21 POP AF          ; Restore the option counter from the stack.
 $FA22 INC A           ; Increment the option counter by one.
; Note we only show five options "#STR($D181)" is never used.
 $FA23 CP $05          ; {Jump to #R$FA16 until the option counter is equal to
 $FA25 JR NZ,$FA16     ; #N$05.}
; Prints the last line manually "#STR($D173)" (as it's the second line of the
; option before it).
 $FA27 LD BC,$1401     ; #REGbc=#N$1401 (screen co-ordinates).
 $FA2A CALL $FB5B      ; Call #R$FB5B.
; Output to the screen buffer.
 $FA2D CALL $D604      ; Call #R$D604.
 $FA30 CALL $D5F8      ; Call #R$D5F8.
@label=ChangeControls_Input
*$FA33 CALL $DDC0      ; Call #R$DDC0.
 $FA36 JR NZ,$FA33     ; Loop back to #R$FA33 until an option has been
                       ; selected.
; Process the selected option.
 $FA38 LD A,D          ; #REGa=control option.
 $FA39 CP $FF          ; {Jump to #R$FA33 if the control option is invalid.
 $FA3B JR Z,$FA33      ; }
 $FA3D CP $11          ; {Jump to #R$FA53 if "K" was pressed.
 $FA3F JR Z,$FA53      ; }
 $FA41 CP $24          ; {Jump to #R$FA78 if "1" was pressed.
 $FA43 JR Z,$FA78      ; }
 $FA45 CP $1C          ; {Jump to #R$FA7C if "2" was pressed.
 $FA47 JR Z,$FA7C      ; }
 $FA49 CP $14          ; {Jump to #R$FA80 if "3" was pressed.
 $FA4B JR Z,$FA80      ; }
 $FA4D CP $0F          ; {Jump to #R$FA8B if "C" was pressed.
 $FA4F JR Z,$FA8B      ; }
 $FA51 JR $FA33        ; Jump to #R$FA33.
; Set "Keyboard" as the control method.
@label=ChangeControls_Keyboard
*$FA53 CALL $FAA8      ; Call #R$FAA8.
; Each set of user defined keys will have a different control method ID
; starting from #N$04.
 $FA56 LD A,($FB5A)    ; #REGa=*#R$FB5A.
 $FA59 INC A           ; Increment #REGa by one.
 $FA5A LD ($FB5A),A    ; Write #REGa to *#R$FB5A.
 $FA5D LD (IX+$0E),A   ; Write #REGa to *#REGix+#N$0E (monster control type).
; Calculate where the user defined keys will be stored.
 $FA60 SUB $04         ; #REGa-=#N$04.
 $FA62 ADD A,A         ; #REGa*=#N$02.
 $FA63 LD D,A          ; #REGd=#REGa.
 $FA64 ADD A,A         ; {#REGa*=#N$04.
 $FA65 ADD A,A         ; }
 $FA66 ADD A,D         ; #REGa+=#REGd.
 $FA67 LD H,$00        ; {Create an offset using #REGhl.
 $FA69 LD L,A          ; }
 $FA6A LD DE,$C850     ; {#REGhl+=#R$C850.
 $FA6D ADD HL,DE       ; }
 $FA6E EX DE,HL        ; Exchange the #REGde and #REGhl registers.
 $FA6F LD HL,$FB4E     ; #REGhl=#R$FB4E.
 $FA72 LD BC,$000A     ; #REGbc=#N($000A,$04,$04).
 $FA75 LDIR            ; Copy selected keys to monster config.
 $FA77 RET             ; Return.
; Set "Sinclair Interface 2" (port 1) as the control method.
@label=ChangeControls_Sinclair1
*$FA78 LD D,$02        ; #REGd=#N$02.
 $FA7A JR $FA82        ; Jump to #R$FA82.
; Set "Sinclair Interface 2" (port 2) as the control method.
@label=ChangeControls_Sinclair2
*$FA7C LD D,$01        ; #REGd=#N$01.
 $FA7E JR $FA82        ; Jump to #R$FA82.
; Set "Kempston Joystick" as the control method.
@label=ChangeControls_Kempston
*$FA80 LD D,$03        ; #REGd=#N$03.
@label=SetControlType
*$FA82 CALL $FA95      ; Call #R$FA95.
 $FA85 JR Z,$FA33      ; Jump to #R$FA33 if the control type is already
                       ; selected by another monster.
 $FA87 LD (IX+$0E),D   ; Write the control type to *#REGix+#N$0E (monster
                       ; control type).
 $FA8A RET             ; Return.
; Set "Computer Controlled" as the control method.
@label=ChangeControls_Computer
*$FA8B LD (IX+$0E),$00 ; Write #N$00 to *#REGix+#N$0E (monster control type).
@label=ChangeControls_Computer_KeyPress
*$FA8F CALL $FBD4      ; Call #R$FBD4.
 $FA92 JR NZ,$FA8F     ; Loop back to #R$FA8F until a key has been pressed.
 $FA94 RET             ; Return.
; Monsters can't use the same controllers, this is verified here.
@label=CheckExistingControls
*$FA95 LD A,($CFE0)    ; {Return if *#R$CFE0 is equal to the currently selected
 $FA98 CP D            ; control method.
 $FA99 RET Z           ; }
 $FA9A LD A,($D00F)    ; {Return if *#R$D00F is equal to the currently selected
 $FA9D CP D            ; control method.
 $FA9E RET Z           ; }
 $FA9F LD A,($D03E)    ; {Return if *#R$D03E is equal to the currently selected
 $FAA2 CP D            ; control method.
 $FAA3 RET Z           ; }
; Ensure ZERO flag is not set for the return.
 $FAA4 LD A,$01        ; #REGa=#N$01.
 $FAA6 OR A            ; Set the bits from #REGa.
 $FAA7 RET             ; Return.

; User Defined Keys
;
; Used by the routine at #R$F9BF.
@label=UserDefinedKeys
c$FAA8 CALL $FB8E    ; Call #R$FB8E.
 $FAAB CALL $FBD4    ; Call #R$FBD4.
 $FAAE JR NZ,$FAA8   ; Loop back to #R$FAA8 until the pressed key is released.
 $FAB0 LD HL,$FB4E   ; {Write #R$FB4E to *#R$FB58.
 $FAB3 LD ($FB58),HL ; }
; Print "#STR($D0D5) #STR($D0DF)".
 $FAB6 LD HL,$D0D5   ; #REGhl=#R$D0D5.
 $FAB9 LD BC,$0403   ; #REGbc=#N$0403 (screen co-ordinates).
 $FABC CALL $FB5B    ; Call #R$FB5B.
 $FABF INC HL        ; Move onto the start of the next message.
 $FAC0 LD BC,$0602   ; #REGbc=#N$0602 (screen co-ordinates).
 $FAC3 CALL $FB5B    ; Call #R$FB5B.
; Programmatically display all the #R$D0EB options.
 $FAC6 LD HL,$D0EB   ; #REGhl=#R$D0EB.
 $FAC9 LD BC,$0804   ; #REGbc=#N$0804 (screen co-ordinates).
 $FACC LD A,$05      ; #REGa=#N$05 (control counter).
@label=UserDefinedKeys_PrintLoop
*$FACE PUSH AF       ; {Stash the control counter and current screen
 $FACF PUSH BC       ; co-ordinates on the stack.}
 $FAD0 CALL $FB5B    ; Call #R$FB5B.
 $FAD3 POP BC        ; {Restore the current screen co-ordinates and control
 $FAD4 POP AF        ; counter from the stack.}
 $FAD5 INC HL        ; Move onto the start of the next message.
; The options are two lines apart.
 $FAD6 INC B         ; {Increment #REGb by two.
 $FAD7 INC B         ; }
 $FAD8 DEC A         ; Decrease the control counter by one.
 $FAD9 JR NZ,$FACE   ; Jump to #R$FACE until all controls have been printed.
; Prints the last line manually "#STR($D0FF)" (as it's the second line of the
; option before it).
 $FADB DEC B         ; Decrease #REGb by one.
 $FADC CALL $FB5B    ; Call #R$FB5B.
; Set up displaying the "?" indicator to request the user defined keypress.
 $FADF LD BC,$080B   ; #REGbc=#N$080B (screen co-ordinates).
@label=UserDefinedKeys_Request
*$FAE2 PUSH BC       ; {Stash #REGbc on the stack twice.
 $FAE3 PUSH BC       ; }
 $FAE4 LD HL,$D104   ; #REGhl=#R$D104.
 $FAE7 CALL $FB5B    ; Call #R$FB5B.
; Output to the screen buffer.
 $FAEA CALL $D604    ; Call #R$D604.
 $FAED CALL $D5F8    ; Call #R$D5F8.
@label=UserDefinedKeys_Input
*$FAF0 CALL $DDC0    ; Call #R$DDC0.
 $FAF3 JR NZ,$FAF0   ; Loop back to #R$FAF0 until an option has been selected.
 $FAF5 LD A,D        ; #REGa=keypress.
 $FAF6 CP $FF        ; {Jump to #R$FAF0 if the keypress is invalid.
 $FAF8 JR Z,$FAF0    ; }
 $FAFA EX DE,HL      ; Exchange the #REGde and #REGhl registers.
 $FAFB LD HL,$FBF2   ; #REGhl=#R$FBF2.
 $FAFE LD B,$00      ; {Create an offset using #REGbc.
 $FB00 LD C,A        ; }
 $FB01 ADD HL,BC     ; #REGhl+=#REGbc.
 $FB02 LD A,(HL)     ; #REGa=*#REGhl.
 $FB03 CP $80        ; {Jump to #R$FAF0 if #REGa is higher than #N$80.
 $FB05 JR NC,$FAF0   ; }
; Set a print terminator.
 $FB07 OR %10000000  ; Set bit 7.
 $FB09 LD (HL),A     ; Write #REGa to *#REGhl.
 $FB0A LD HL,$D106   ; #REGhl=#R$D106.
; Remove the print terminator and write to the buffer.
 $FB0D AND %01111111 ; Keep only bits 0-6.
 $FB0F LD (HL),A     ; Write #REGa to *#REGhl.
; If "special keys" (e.g. Caps Shift/ Symbol Shift/ Enter/ Space) are selected, provide a means to show that these
;       have been selected.
 $FB10 CP $21        ; {Jump to #R$FB17 if #REGa is not equal to #N$21.
 $FB12 JR NZ,$FB17   ; }
 $FB14 LD HL,$D10E   ; #REGhl=#R$D10E.
@label=UserDefinedKeys_CheckIfCapsShift
*$FB17 CP $27        ; {Jump to #R$FB1E if #REGa is not equal to #N$27.
 $FB19 JR NZ,$FB1E   ; }
 $FB1B LD HL,$D108   ; #REGhl=#R$D108.
@label=UserDefinedKeys_CheckIfSymbolShift
*$FB1E CP $18        ; {Jump to #R$FB25 if #REGa is not equal to #N$18.
 $FB20 JR NZ,$FB25   ; }
 $FB22 LD HL,$D10A   ; #REGhl=#R$D10A.
@label=UserDefinedKeys_CheckIfSpace
*$FB25 CP $20        ; {Jump to #R$FB2C if #REGa is not equal to #N$20.
 $FB27 JR NZ,$FB2C   ; }
 $FB29 LD HL,$D10C   ; #REGhl=#R$D10C.
; Print the user defined key on the screen in the appropriate location.
@label=UserDefinedKeys_PrintKey
*$FB2C POP BC        ; Restore #REGbc from the stack.
 $FB2D PUSH DE       ; Stash #REGde on the stack.
 $FB2E CALL $FB5B    ; Call #R$FB5B.
 $FB31 POP DE        ; Restore #REGde from the stack.
; Store the keypress port and value in the buffer.
 $FB32 LD HL,($FB58) ; #REGhl=*#R$FB58.
 $FB35 LD (HL),E     ; Write #REGe to *#REGhl.
 $FB36 INC HL        ; Increment #REGhl by one.
 $FB37 LD (HL),D     ; Write #REGd to *#REGhl.
 $FB38 INC HL        ; Move onto the next buffer location.
 $FB39 LD ($FB58),HL ; Update the stored buffer at *#R$FB58.
 $FB3C POP BC        ; Restore #REGbc from the stack.
; Move down two lines onto the next option.
 $FB3D INC B         ; {Increment #REGb by two.
 $FB3E INC B         ; }
; Check if we've reached the end?
 $FB3F LD A,B        ; {Jump to #R$FAE2 until #REGb is equal to #N$12.
 $FB40 CP $12        ;
 $FB42 JR NZ,$FAE2   ; }
; Output to the screen buffer.
 $FB44 CALL $D604    ; Call #R$D604.
 $FB47 CALL $D5F8    ; Call #R$D5F8.
 $FB4A CALL $FBEC    ; Call #R$FBEC.
 $FB4D RET           ; Return.

; User Defined Keys Buffer
;
; Used by the routines at #R$F9BF and #R$FAA8.
@label=UserDefinedKeys_Buffer
g$FB4E DEFB $00,$00  ; {Stores in the following format:
 $FB50 DEFB $00,$00  ; #TABLE(default,centre,centre)
 $FB52 DEFB $00,$00  ; { =h Port | =h Bits } #FOR$00,$04(n,{ #N(#PEEK(#PC+n*$02)) | #EVAL(#PEEK(#PC+$01+n*$02),$02,$08) }, )
 $FB54 DEFB $00,$00  ; TABLE#
 $FB56 DEFB $00,$00  ; }

; User Defined Keys Pointer
@label=UserDefinedKeys_Pointer
g$FB58 DEFW $0000

; Keyboard Control Count
@label=Keyboard_Control_Count
g$FB5A DEFB $00

; Print String
;
; Used by the routines at #R$F726, #R$F981, #R$F9BF, #R$FAA8, #R$FB8E and
; #R$FD9E.
;
; BC Screen co-ordinate
; HL Pointer to string data
@label=PrintString
c$FB5B LD A,(HL)     ; Fetch the character.
 $FB5C AND %01111111 ; Keep only bits 0-6.
 $FB5E PUSH HL       ; Stash #REGhl on the stack.
 $FB5F SUB $20       ; #REGa-=#N$20.
 $FB61 LD H,$00      ; {Create an offset using #REGhl.
 $FB63 LD L,A        ; }
 $FB64 ADD HL,HL     ; {#REGhl*=#N$08.
 $FB65 ADD HL,HL     ;
 $FB66 ADD HL,HL     ; }
 $FB67 LD A,H        ; {#REGh+=#N$3D.
 $FB68 ADD A,$3D     ;
 $FB6A LD H,A        ; }
 $FB6B LD A,B        ; #REGa=#REGb.
 $FB6C AND %11111000 ; Keep only bits 3-7.
 $FB6E ADD A,$6B     ; #REGa+=#N$6B.
 $FB70 LD D,A        ; #REGd=#REGa.
 $FB71 LD A,B        ; #REGa=#REGb.
 $FB72 AND %00000111 ; Keep only bits 0-2.
 $FB74 RRCA          ; {RRCA.
 $FB75 RRCA          ;
 $FB76 RRCA          ; }
 $FB77 ADD A,C       ; #REGa+=#REGc.
 $FB78 LD E,A        ; #REGe=#REGa.
 $FB79 PUSH BC       ; Stash #REGbc on the stack.
 $FB7A LD B,$08      ; #REGb=#N$08.
@label=PrintString_Loop
*$FB7C LD A,(HL)     ; #REGa=*#REGhl.
 $FB7D SRL A         ; Shift #REGa right.
 $FB7F OR (HL)       ; Set the bits from *#REGhl.
 $FB80 LD (DE),A     ; Write #REGa to *#REGde.
 $FB81 INC HL        ; Increment #REGhl by one.
 $FB82 INC D         ; Increment #REGd by one.
 $FB83 DJNZ $FB7C    ; Decrease counter by one and loop back to #R$FB7C until
                     ; counter is zero.
 $FB85 POP BC        ; Restore #REGbc from the stack.
 $FB86 INC C         ; Increment #REGc by one.
 $FB87 POP HL        ; Restore #REGhl from the stack.
 $FB88 BIT 7,(HL)    ; {Return if bit 7 of *#REGhl is set.
 $FB8A RET NZ        ; }
 $FB8B INC HL        ; Increment #REGhl by one.
 $FB8C JR $FB5B      ; Jump to #R$FB5B.

; Create Admin Page Template
;
; Used by the routines at #R$F916, #R$F9BF and #R$FAA8.
@label=CreateAdminPageTemplate
c$FB8E LD C,$11      ; #REGc=#N$11 (width).
; Blank half the shadow screen buffer.
 $FB90 LD HL,$6B00   ; #REGhl=#R$6B00.
 $FB93 LD D,$83      ; #REGd=#N$83 (height/ where to stop - relates to the end
                     ; of #R$6B00).
 $FB95 LD E,$00      ; #REGe=#N$00 (value to write).
 $FB97 CALL $FBAE    ; Call #R$FBAE.
; Blank half the shadow attribute buffer.
 $FB9A LD HL,$8300   ; #REGhl=#R$8300.
 $FB9D LD D,$86      ; #REGd=#N$86 (height/ where to stop - relates to the end
                     ; of #R$8300).
 $FB9F LD E,$46      ; #REGe=#N$46 #COLOUR$46 (value to write).
 $FBA1 CALL $FBAE    ; Call #R$FBAE.
; Prints "Rampage tm".
 $FBA4 LD HL,$D0CB   ; #REGhl=#R$D0CB.
 $FBA7 LD BC,$0103   ; #REGbc=#N$0103 (screen co-ordinates).
 $FBAA CALL $FB5B    ; Call #R$FB5B.
 $FBAD RET           ; Return.

; Blank Left-Half Shadow Buffers
;
; Used by the routine at #R$FB8E.
;
; C Width
; D Height (where to stop)
; E Value to write
; HL Buffer location
;
; Used both to blank the left-hand side of the screen shadow buffer, and also to add the rainbow attributes for
;       the attributes shadow buffer.
@label=BlankHalfShadowBuffers
c$FBAE LD B,C        ; #REGb=width.
 $FBAF XOR A         ; #REGa=#N$00.
@label=BlankHalfOfScreen_Row
*$FBB0 LD (HL),E     ; Write the value pass in #REGe to the buffer.
 $FBB1 INC HL        ; Increment the buffer pointer by one.
 $FBB2 DJNZ $FBB0    ; Decrease counter by one and loop back to #R$FBB0 until
                     ; counter is zero.
; Move down one row.
 $FBB4 ADD HL,BC     ; #REGhl+=#REGbc.
 $FBB5 DEC HL        ; {Decrease #REGhl by two (because we always enter with the width being #N$11, so #N$11*#N$02=#N$22 and one row
 $FBB6 DEC HL        ; contains only #N$20 bytes).}
; When writing the attributes, this handles the INK rainbow colouring.
 $FBB7 LD A,E        ; #REGa=#REGe.
 $FBB8 AND %00000111 ; Keep only the INK colour bits.
 $FBBA JR Z,$FBC3    ; Jump to #R$FBC3 if the result is zero (if this is the
                     ; screen buffer loop and not for the attribute buffer).
; Cycle through the INK colours.
 $FBBC INC E         ; Increment the value to write by one.
 $FBBD CP $07        ; {Jump to #R$FBC3 if #REGa is not equal to #N$07
 $FBBF JR NZ,$FBC3   ; (#COLOUR$07).}
; Reset the attribute colour to write (the range is #N42-#N$47).
 $FBC1 LD E,$42      ; #REGe=#N$42 (#COLOUR$42).
; The height parameter isn't a "height" as such, it's where to stop e.g. the
; end of #R$6B00 or the end of #R$8300.
@label=BlankHalfOfScreen_CheckEnd
*$FBC3 LD A,D        ; {Jump to #R$FBAE if #REGd is not equal to #REGh.
 $FBC4 CP H          ;
 $FBC5 JR NZ,$FBAE   ; }
 $FBC7 RET           ; Return.

; Press Any Key/ Pause
;
; Used by the routine at #R$F916.
;
; .
;
; This routine will return on a keypress, or if the counter reaches #N$FF.
@label=PressAnyKey_Pause
c$FBC8 LD B,$FF      ; #REGb=#N$FF (counter).
@label=PressAnyKey_Loop
*$FBCA CALL $FBD4    ; Call #R$FBD4.
 $FBCD JR Z,$FBD0    ; Jump to #R$FBD0 if no key has been pressed.
; A keypress has occurred so return.
 $FBCF RET           ; Return.
; There's not been a keypress, so issue a HALT and loop back round.
@label=Pause_Loop
*$FBD0 HALT          ; Halt operation (suspend CPU until the next interrupt).
 $FBD1 DJNZ $FBCA    ; Decrease counter by one and loop back to #R$FBCA until
                     ; counter is zero.
; The pause counter has expired so just return.
 $FBD3 RET           ; Return.

; Get Keypress
;
; Used by the routines at #R$F9BF, #R$FAA8 and #R$FBC8.
@label=GetKeypress
c$FBD4 XOR A         ; #REGa=#N$00.
 $FBD5 IN A,($FE)    ; Read from the keyboard;
                     ; #TABLE(default,centre,centre,centre,centre,centre,centre)
                     ; { =h,r2 Port Number | =h,c5 Bit }
                     ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                     ; { #N$FE | SHIFT | Z | X | C | V }
                     ; TABLE#
 $FBD7 CPL           ; Invert the bits in #REGa.
 $FBD8 AND %00011111 ; Keep only bits 0-4.
 $FBDA RET           ; Return.

; Update XXXXX Buffer
;
; Used by the routines at #R$DEC6, #R$F916 and #R$FD2B.
;
; .
;
; Todo: Find out what this specific buffer does.
@label=UpdateXXXXXBuffer
c$FBDB CALL $D5D8    ; Call #R$D5D8.
 $FBDE LD HL,$6800   ; #REGhl=#R$6800.
 $FBE1 LD DE,$6801   ; #REGde=#N$6801.
 $FBE4 LD BC,$02FF   ; #REGbc=#N$02FF.
 $FBE7 LD (HL),$FF   ; Write #N$FF to *#REGhl.
 $FBE9 LDIR          ; Copy #N$02FF bytes from #REGhl to #REGde.
 $FBEB RET           ; Return.

; Short Pause
;
; Used by the routines at #R$DE00 and #R$FAA8.
@label=ShortPause
c$FBEC LD B,$4B      ; #REGb=#N$4B (counter).
@label=ShortPause_Loop
*$FBEE HALT          ; Halt operation (suspend CPU until the next interrupt).
 $FBEF DJNZ $FBEE    ; Decrease counter by one and loop back to #R$FBEE until
                     ; counter is zero.
 $FBF1 RET           ; Return.

; ASCII Table
@label=Table_ASCII
b$FBF2 DEFB $42      ; "#STR(#PC,$00,$01)".
 $FBF3 DEFB $48      ; "#STR(#PC,$00,$01)".
 $FBF4 DEFB $59      ; "#STR(#PC,$00,$01)".
 $FBF5 DEFB $36      ; "#STR(#PC,$00,$01)".
 $FBF6 DEFB $35      ; "#STR(#PC,$00,$01)".
 $FBF7 DEFB $54      ; "#STR(#PC,$00,$01)".
 $FBF8 DEFB $47      ; "#STR(#PC,$00,$01)".
 $FBF9 DEFB $56      ; "#STR(#PC,$00,$01)".
 $FBFA DEFB $4E      ; "#STR(#PC,$00,$01)".
 $FBFB DEFB $4A      ; "#STR(#PC,$00,$01)".
 $FBFC DEFB $55      ; "#STR(#PC,$00,$01)".
 $FBFD DEFB $37      ; "#STR(#PC,$00,$01)".
 $FBFE DEFB $34      ; "#STR(#PC,$00,$01)".
 $FBFF DEFB $52      ; "#STR(#PC,$00,$01)".
 $FC00 DEFB $46      ; "#STR(#PC,$00,$01)".
 $FC01 DEFB $43      ; "#STR(#PC,$00,$01)".
 $FC02 DEFB $4D      ; "#STR(#PC,$00,$01)".
 $FC03 DEFB $4B      ; "#STR(#PC,$00,$01)".
 $FC04 DEFB $49      ; "#STR(#PC,$00,$01)".
 $FC05 DEFB $38      ; "#STR(#PC,$00,$01)".
 $FC06 DEFB $33      ; "#STR(#PC,$00,$01)".
 $FC07 DEFB $45      ; "#STR(#PC,$00,$01)".
 $FC08 DEFB $44      ; "#STR(#PC,$00,$01)".
 $FC09 DEFB $58      ; "#STR(#PC,$00,$01)".
 $FC0A DEFB $18      ; "#STR(#PC,$00,$01)".
 $FC0B DEFB $4C      ; "#STR(#PC,$00,$01)".
 $FC0C DEFB $4F      ; "#STR(#PC,$00,$01)".
 $FC0D DEFB $39      ; "#STR(#PC,$00,$01)".
 $FC0E DEFB $32      ; "#STR(#PC,$00,$01)".
 $FC0F DEFB $57      ; "#STR(#PC,$00,$01)".
 $FC10 DEFB $53      ; "#STR(#PC,$00,$01)".
 $FC11 DEFB $5A      ; "#STR(#PC,$00,$01)".
 $FC12 DEFB $20      ; "#STR(#PC,$00,$01)".
 $FC13 DEFB $21      ; "#STR(#PC,$00,$01)".
 $FC14 DEFB $50      ; "#STR(#PC,$00,$01)".
 $FC15 DEFB $30      ; "#STR(#PC,$00,$01)".
 $FC16 DEFB $31      ; "#STR(#PC,$00,$01)".
 $FC17 DEFB $51      ; "#STR(#PC,$00,$01)".
 $FC18 DEFB $41      ; "#STR(#PC,$00,$01)".
 $FC19 DEFB $27      ; "#STR(#PC,$00,$01)".

; Scene: Display Carpet
;
; Used by the routines at #R$DE77 and #R$F916.
;
; .
;
; Return if this scene doesn't contain the carpet.
@label=Scene_DisplayCarpet
c$FC1A LD A,($D3FE)  ; {Return if *#R$D3FE is #N$00.
 $FC1D AND A         ;
 $FC1E RET Z         ; }
 $FC1F LD BC,$1506   ; #REGbc=#N$1506 (screen co-ordinates).
 $FC22 CP $01        ; {Jump to #R$FC28 if *#R$D3FE is #N$01.
 $FC24 JR Z,$FC28    ; }
 $FC26 LD C,$16      ; #REGc=#N$16.
*$FC28 LD A,$7F      ; #REGa=#N$7F.
 $FC2A PUSH BC       ; Stash #REGbc on the stack.
 $FC2B CALL $D6C9    ; Call #R$D6C9.
 $FC2E POP BC        ; Restore #REGbc from the stack.
 $FC2F LD A,C        ; {#REGc+=#N$04.
 $FC30 ADD A,$04     ;
 $FC32 LD C,A        ; }
 $FC33 LD A,$7F      ; #REGa=#N$7F.
 $FC35 CALL $D7F6    ; Call #R$D7F6.
 $FC38 RET           ; Return.

; Handler: Vehicle
;
; Used by the routine at #R$DE77.
;
; O:B Vehicle Y sprite co-ordinates (if active)
; O:C Vehicle X sprite co-ordinates (if active)
;
; Are vehicles permitted to be spawned on this level?
@label=Handler_Vehicle
c$FC39 LD A,($D401)  ; {Return if vehicle spawning is set to be off (*#R$D401
 $FC3C CP $FE        ; is equal to #N$FE).
 $FC3E RET Z         ; }
; Just return if a a vehicle is already being displayed.
 $FC3F CP $FF        ; {Jump to #R$FC72 if a vehicle is already active
 $FC41 JR Z,$FC72    ; (*#R$D401 is equal to #N$FF).}
; Else the counter is a counter, so count it down.
 $FC43 DEC A         ; {Decrease *#R$D401 by one.
 $FC44 LD ($D401),A  ; }
 $FC47 RET NZ        ; Return if *#R$D401 is still in progress.
; Else the countdown is complete so set the counter/ state that a vehicle is
; spawned and spawn a random vehicle!
 $FC48 LD A,$FF      ; {Write #N$FF to *#R$D401.
 $FC4A LD ($D401),A  ; }
; Spawn a new vehicle:
; .
; There are four vehicle types.
 $FC4D CALL $DA28    ; {Get a random number between 0-3.
 $FC50 AND %00000011 ; }
 $FC52 LD ($D402),A  ; Write #REGa to *#R$D402.
; Randomly bring the vehicle in from either the left or right hand side of the
; play area.
 $FC55 CALL $DA28    ; {Get a random number which is either zero or one.
 $FC58 AND %00000001 ; }
 $FC5A JR NZ,$FC68   ; Jump to #R$FC68 if the random number is one.
; Vehicle moves from left-to-right.
 $FC5C LD A,$14      ; {Write #N$14 to *#R$D404.
 $FC5E LD ($D404),A  ; }
 $FC61 LD A,$FA      ; {Write #N$FA to *#R$D403.
 $FC63 LD ($D403),A  ; }
 $FC66 JR $FC72      ; Jump to #R$FC72.
; Bit 7 signifies that this vehicle moves from right-to-left.
@label=Handler_SpawnVehicleRight
*$FC68 LD A,$94      ; {Write #N$94 (#N$14 + bit 7 set) to *#R$D404.
 $FC6A LD ($D404),A  ; }
 $FC6D LD A,$20      ; {Write #N$20 to *#R$D403.
 $FC6F LD ($D403),A  ; }
@label=Handler_Vehicle_Movement
*$FC72 LD A,($D404)  ; #REGa=*#R$D404.
 $FC75 CP $80        ; {Jump to #R$FC97 if #REGa is higher than #N$80 (if bit 7
 $FC77 JR NC,$FC97   ; is set).}
 $FC79 LD B,A        ; #REGb=vehicle Y position.
; Handles moving the vehicle from the left-to-right hand side of the play area.
 $FC7A LD A,($D403)  ; #REGa=*#R$D403.
 $FC7D INC A         ; Increment #REGa by one.
@label=Handler_Vehicle_SetXPos
*$FC7E LD ($D403),A  ; Write #REGa to *#R$D403.
; Check if the vehicle is off-screen.
 $FC81 CP $20        ; {Jump to #R$FCA7 if #REGa is equal to #N$20.
 $FC83 JR Z,$FCA7    ; }
 $FC85 LD C,A        ; #REGc=vehicle X position.
; Has the vehicle been destroyed?
 $FC86 LD A,($D402)  ; #REGa=*#R$D402.
 $FC89 CP $03        ; {Return if the vehicle has been destroyed (*#R$D402 is
 $FC8B RET Z         ; equal to #N$03).}
 $FC8C ADD A,A       ; {#REGa*=#N$02+#N$3B.
 $FC8D ADD A,$3B     ; }
 $FC8F CALL $D6C9    ; Call #R$D6C9.
 $FC92 XOR A         ; {Write #N$00 to *#R$D247.
 $FC93 LD ($D247),A  ; }
 $FC96 RET           ; Return.
; Handles moving the vehicle from the right-to-left hand side of the play area.
@label=Handler_MoveVehicle_RightToLeft
*$FC97 AND %01111111 ; Strip off the right-to-left flag.
 $FC99 LD B,A        ; #REGb=vehicle Y position.
 $FC9A LD A,$01      ; {Write #N$01 to *#R$D247.
 $FC9C LD ($D247),A  ; }
 $FC9F LD A,($D403)  ; #REGa=*#R$D403.
 $FCA2 DEC A         ; Decrease #REGa by one.
; Check if the vehicle is off-screen.
 $FCA3 CP $FA        ; {Jump to #R$FC7E if #REGa is not equal to #N$FA.
 $FCA5 JR NZ,$FC7E   ; }
; Initialise a new countdown.
@label=Handler_Vehicle_SetCountdown
*$FCA7 CALL $DA28    ; {Get a random number between 8-23.
 $FCAA AND %00001111 ;
 $FCAC ADD A,$08     ; }
 $FCAE LD ($D401),A  ; Write the random number to *#R$D401.
 $FCB1 XOR A         ; {Write #N$00 to *#R$D247.
 $FCB2 LD ($D247),A  ; }
 $FCB5 RET           ; Return.

; Handler: Train
;
; Used by the routine at #R$DE77.
@label=Handler_Train
c$FCB6 LD A,($D405)  ; {Return if train spawning is set to be off (*#R$D405 is
 $FCB9 CP $FE        ; equal to #N$FE).
 $FCBB RET Z         ; }
 $FCBC CP $FF        ; {Jump to #R$FCE7 if a train is already active (*#R$D405
 $FCBE JR Z,$FCE7    ; is equal to #N$FF).}
; Else the counter is a counter, so count it down.
 $FCC0 DEC A         ; {Decrease *#R$D405 by one.
 $FCC1 LD ($D405),A  ; }
 $FCC4 RET NZ        ; Return if *#R$D405 is still in progress.
; Else the countdown is complete so set the counter/ state to indicate that a train has been spawned and then
;       spawn a train!
 $FCC5 LD A,$FF      ; {Write #N$FF to *#R$D405.
 $FCC7 LD ($D405),A  ; }
; Randomly bring the train in from either the left or right hand side of the
; play area.
 $FCCA CALL $DA28    ; {Get a random number of either zero or one.
 $FCCD AND %00000001 ; }
 $FCCF JR NZ,$FCDD   ; Jump to #R$FCDD if the random number is one.
; Train moves from left-to-right.
 $FCD1 LD A,$13      ; {Write #N$13 to *#R$D407.
 $FCD3 LD ($D407),A  ; }
 $FCD6 LD A,$F0      ; {Write #N$F0 to *#R$D406.
 $FCD8 LD ($D406),A  ; }
 $FCDB JR $FCE7      ; Jump to #R$FCE7.
; Bit 7 signifies that this train moves from right-to-left.
@label=Handler_SpawnTrainRight
*$FCDD LD A,$93      ; {Write #N$93 (#N$13 + bit 7 set) to *#R$D407.
 $FCDF LD ($D407),A  ; }
 $FCE2 LD A,$20      ; {Write #N$20 to *#R$D406.
 $FCE4 LD ($D406),A  ; }
@label=Handler_Train_Movement
*$FCE7 LD A,($D407)  ; #REGa=*#R$D407.
 $FCEA AND %01000000 ; Keep only bit 6.
 $FCEC RLCA          ; {Rotate #REGa left twice, moving bit 6 to bit 0.
 $FCED RLCA          ; }
 $FCEE LD C,A        ; #REGc=#REGa.
 $FCEF LD A,($D407)  ; {Jump to #R$FD21 if *#R$D407 is higher than #N$80.
 $FCF2 CP $80        ;
 $FCF4 JR NC,$FD21   ; }
 $FCF6 AND %00111111 ; Keep only bits 0-5.
 $FCF8 LD B,A        ; #REGb=train X position.
 $FCF9 LD A,($D406)  ; #REGa=*#R$D406.
 $FCFC INC A         ; Increment #REGa by one.
 $FCFD ADD A,C       ; #REGa+=#REGc.
@label=Handler_Train_SetXPos
*$FCFE LD ($D406),A  ; Write #REGa to *#R$D406.
 $FD01 LD C,A        ; #REGc=train X position.
 $FD02 LD A,$79      ; #REGa=#N$79.
 $FD04 PUSH BC       ; Stash #REGbc on the stack.
 $FD05 CALL $D6C9    ; Call #R$D6C9.
 $FD08 POP BC        ; Restore #REGbc from the stack.
 $FD09 LD A,$03      ; #REGa=#N$03.
*$FD0B PUSH AF       ; Stash #REGaf on the stack.
 $FD0C INC C         ; {Increment #REGc by two.
 $FD0D INC C         ; }
 $FD0E LD A,$7B      ; #REGa=#N$7B.
 $FD10 PUSH BC       ; Stash #REGbc on the stack.
 $FD11 CALL $D6C9    ; Call #R$D6C9.
 $FD14 POP BC        ; {Restore #REGbc and #REGaf from the stack.
 $FD15 POP AF        ; }
 $FD16 DEC A         ; Decrease #REGa by one.
 $FD17 JR NZ,$FD0B   ; Jump to #R$FD0B until #REGa is zero.
 $FD19 INC C         ; {Increment #REGc by two.
 $FD1A INC C         ; }
 $FD1B LD A,$79      ; #REGa=#N$79.
 $FD1D CALL $D7F6    ; Call #R$D7F6.
 $FD20 RET           ; Return.
; Handles moving the train from the right-to-left hand side of the play area.
@label=Handler_MoveTrain_RightToLeft
*$FD21 AND %00111111 ; Strip off the right-to-left flag.
 $FD23 LD B,A        ; #REGb=train Y position.
 $FD24 LD A,($D406)  ; #REGa=*#R$D406.
 $FD27 DEC A         ; Decrease #REGa by one.
 $FD28 SUB C         ; #REGa-=#REGc.
 $FD29 JR $FCFE      ; Jump to #R$FCFE.

; Play Telecast Intro
;
; Used by the routine at #R$DE19.
@label=PlayTelecastIntro
c$FD2B CALL $FBDB    ; Call #R$FBDB.
 $FD2E LD A,($CFD2)  ; #REGa=*#R$CFD2.
 $FD31 CALL $FD64    ; Call #R$FD64.
 $FD34 LD A,($D001)  ; #REGa=*#R$D001.
 $FD37 CALL $FD86    ; Call #R$FD86.
 $FD3A LD A,($D030)  ; #REGa=*#R$D030.
 $FD3D CALL $FD86    ; Call #R$FD86.
 $FD40 XOR A         ; {Set the border colour to BLACK.
 $FD41 OUT ($FE),A   ; }
 $FD43 RET           ; Return.

; Print Ticker
;
; Used by the routine at #R$FD64.
@label=Print_Ticker
c$FD44 LD DE,$6100   ; #REGde=#R$6100.
 $FD47 LD BC,$FEDF   ; #REGbc=#R$FEDF.
@label=Print_Ticker_Loop
*$FD4A LD A,(BC)     ; #REGa=*#REGbc.
; Check if the character is the terminator.
 $FD4B CP $FF        ; {Return if #REGa is equal to #N$FF.
 $FD4D RET Z         ; }
 $FD4E PUSH DE       ; Stash #REGde on the stack.
 $FD4F ADD A,A       ; {#REGa*=#N$08.
 $FD50 ADD A,A       ;
 $FD51 ADD A,A       ; }
; #REGhl will point to the set of eight bytes of data starting from
; #R$D198(#N$D198).
 $FD52 LD H,$00      ; {Create an offset using #REGhl.
 $FD54 LD L,A        ; }
 $FD55 LD DE,$D198   ; {#REGhl+=#R$D198.
 $FD58 ADD HL,DE     ; }
 $FD59 POP DE        ; Restore #REGde from the stack.
 $FD5A PUSH BC       ; Stash #REGbc on the stack.
 $FD5B LD BC,$0008   ; {Copy #N($0008,$04,$04) bytes of data from #REGhl to
 $FD5E LDIR          ; #REGde.}
 $FD60 POP BC        ; Restore #REGbc from the stack.
 $FD61 INC BC        ; Increment #REGbc by one.
 $FD62 JR $FD4A      ; Jump to #R$FD4A.

; Handler: Ticker News
;
; Used by the routines at #R$FD2B and #R$FD86.
@label=Handler_TickerNews
c$FD64 CALL $FD44    ; Call #R$FD44.
 $FD67 LD HL,$6A00   ; #REGhl=#R$6A00.
 $FD6A LD DE,$6A01   ; #REGde=#N$6A01.
 $FD6D LD BC,$00FF   ; #REGbc=#N($00FF,$04,$04).
 $FD70 LD (HL),C     ; Write #REGc to *#REGhl.
 $FD71 LDIR          ;
 $FD73 CALL $D409    ; Call #R$D409.
 $FD76 CALL $FD9E    ; Call #R$FD9E.
 $FD79 CALL $D604    ; Call #R$D604.
 $FD7C CALL $D5F8    ; Call #R$D5F8.
 $FD7F CALL $DA28    ; Call #R$DA28.
 $FD82 CALL $FDC4    ; Call #R$FDC4.
 $FD85 RET           ; Return.

; Shift Up Ticker News
;
; Used by the routine at #R$FD2B.
;
; .
;
; This creates the ticker "scrolling" effect, where the initial news moves to the middle, and then the bottom two
;       news stories move to the top.
@label=ShiftUpTickerNews
c$FD86 LD HL,$7300   ; #REGhl=#R$7300.
 $FD89 LD DE,$6B00   ; #REGde=#R$6B00.
 $FD8C LD BC,$1000   ; #REGbc=#N$1000.
 $FD8F LDIR          ; Copy the bottom two-thirds of the shadow screen buffer
                     ; "up" to the top of the buffer.
 $FD91 LD HL,$8400   ; #REGhl=#R$8400.
 $FD94 LD DE,$8300   ; #REGde=#R$8300.
 $FD97 LD BC,$0200   ; #REGbc=#N$0200.
 $FD9A LDIR          ; Copy the bottom two-thirds of the shadow attribute
                     ; buffer "up" to the top of the buffer.
 $FD9C JR $FD64      ; Jump to #R$FD64.

; Print Ticker News Copy
;
; Used by the routine at #R$FD64.
@label=Print_TickerNewsCopy
c$FD9E CALL $DA28    ; {Get a random number between 0-7.
 $FDA1 AND %00000111 ; }
; Multiply the random number by two, as the messages are address pointers
;       in a table (so two bytes in length each).
 $FDA3 ADD A,A       ; #REGa*=#N$02.
 $FDA4 LD H,$00      ; {Create an offset in #REGhl.
 $FDA6 LD L,A        ; }
 $FDA7 LD DE,$FECF   ; {#REGhl+=#R$FECF.
 $FDAA ADD HL,DE     ; }
 $FDAB LD A,(HL)     ; {Grab the ticker news messaging address.
 $FDAC INC HL        ;
 $FDAD LD H,(HL)     ;
 $FDAE LD L,A        ; }
; Print the three lines of the ticker news data to the screen.
 $FDAF LD BC,$1207   ; #REGbc=#N$1207 (screen co-ordinates).
 $FDB2 CALL $FB5B    ; Call #R$FB5B.
 $FDB5 LD BC,$1407   ; #REGbc=#N$1407 (screen co-ordinates).
 $FDB8 INC HL        ; Move onto the start of the next message.
 $FDB9 CALL $FB5B    ; Call #R$FB5B.
 $FDBC LD BC,$1607   ; #REGbc=#N$1607 (screen co-ordinates).
 $FDBF INC HL        ; Move onto the start of the next message.
 $FDC0 CALL $FB5B    ; Call #R$FB5B.
 $FDC3 RET           ; Return.

; Sounds: Annoying Telecast Beeping
;
; Used by the routine at #R$FD64.
;
; .
;
; #AUDIO(telecast.wav)(#INCLUDE(Telecast))
@label=Sounds_Telecast
c$FDC4 LD B,$0A      ; #REGb=#N$0A (counter).
@label=Sounds_Telecast_Loop
*$FDC6 CALL $DA28    ; {Get a random number which is either #N$00 or #N$01.
 $FDC9 AND %00000001 ; }
; There's a 50/50 chance of playing either melody #N$03 or melody #N$07.
 $FDCB LD A,$07      ; #REGa=melody #N$07.
 $FDCD JR Z,$FDD1    ; Jump to #R$FDD1 if the random number was #N$00.
 $FDCF LD A,$03      ; #REGa=melody #N$03.
@label=Sounds_Telecast_Write
*$FDD1 LD ($FF8D),A  ; Write melody ID to #R$FF8D.
 $FDD4 PUSH BC       ; Stash the note counter on the stack.
 $FDD5 CALL $FF00    ; Call #R$FF00.
 $FDD8 POP BC        ; Restore the note counter from the stack.
 $FDD9 HALT          ; {Halt operation (suspend CPU until the next interrupt,
 $FDDA HALT          ; and do this twice).}
 $FDDB DJNZ $FDC6    ; Decrease counter by one and loop back to #R$FDC6 until
                     ; counter is zero.
 $FDDD RET           ; Return.

; Messaging: Ticker News
@label=Messaging_TickerNews_1
t$FDDE DEFM "EXPERIMENTA","L"+$80    ; "#STR(#PC)".
 $FDEA DEFM "VITAMIN HA","S"+$80     ; "#STR(#PC)".
 $FDF5 DEFM "ILL EFFECT","S"+$80     ; "#STR(#PC)".
@label=Messaging_TickerNews_2
 $FE00 DEFM "WOMAN FIND","S"+$80     ; "#STR(#PC)".
 $FE0B DEFM "LAKE TO B","E"+$80      ; "#STR(#PC)".
 $FE15 DEFM "RADIOACTIV","E"+$80     ; "#STR(#PC)".
@label=Messaging_TickerNews_3
 $FE20 DEFM "UNUSUAL FOO","D"+$80    ; "#STR(#PC)".
 $FE2C DEFM "ADDITIVE MA","Y"+$80    ; "#STR(#PC)".
 $FE38 DEFM "BE RECALLE","D"+$80     ; "#STR(#PC)".
@label=Messaging_TickerNews_4
 $FE43 DEFM "IS THERE NO EN","D"+$80 ; "#STR(#PC)".
 $FE52 DEFM "TO THIS RAMPAG","E"+$80 ; "#STR(#PC)".
 $FE61 DEFM " "+$80,                 ; "#STR(#PC)".
@label=Messaging_TickerNews_5
 $FE62 DEFM "JOB OPENINGS I","N"+$80 ; "#STR(#PC)".
 $FE71 DEFM "NATIONAL GUAR","D"+$80  ; "#STR(#PC)".
 $FE7F DEFM " "+$80,                 ; "#STR(#PC)".
@label=Messaging_TickerNews_6
 $FE80 DEFM "MAYOR SPEAKS ","-"+$80  ; "#STR(#PC)".
 $FE8E DEFM "THIS RAMPAG","E"+$80    ; "#STR(#PC)".
 $FE9A DEFM "MUST STOP !!","!"+$80   ; "#STR(#PC)".
@label=Messaging_TickerNews_7
 $FEA7 DEFM "CITY HOWLIN","G"+$80    ; "#STR(#PC)".
 $FEB3 DEFM "MAD ","!"+$80           ; "#STR(#PC)".
 $FEB8 DEFM " "+$80,                 ; "#STR(#PC)".
@label=Messaging_TickerNews_8
 $FEB9 DEFM "SAUSAGE SCA","M"+$80    ; "#STR(#PC)".
 $FEC5 DEFM "EXPOSED ","!"+$80       ; "#STR(#PC)".
 $FECE DEFM " "+$80,                 ; "#STR(#PC)".

; Table: Ticker News
@label=Table_TickerNews
w$FECF DEFW $FDDE
 $FED1 DEFW $FE00
 $FED3 DEFW $FE20
 $FED5 DEFW $FE43
 $FED7 DEFW $FE62
 $FED9 DEFW $FE80
 $FEDB DEFW $FEA7
 $FEDD DEFW $FEB9

; Data: Ticker
;
; See #R$FD44.
@label=Data_Ticker
g$FEDF DEFB $00      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEE0 DEFB $01      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEE1 DEFB $01      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEE2 DEFB $02      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEE3 DEFB $03      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEE4 DEFB $01      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEE5 DEFB $01      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEE6 DEFB $08      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEE7 DEFB $04      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEE8 DEFB $01      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEE9 DEFB $01      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEEA DEFB $09      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEEB DEFB $05      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEEC DEFB $01      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEED DEFB $01      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEEE DEFB $0A      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEEF DEFB $06      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEF0 DEFB $01      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEF1 DEFB $01      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEF2 DEFB $0B      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEF3 DEFB $07      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEF4 DEFB $01      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEF5 DEFB $01      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEF6 DEFB $0B      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEF7 DEFB $00      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEF8 DEFB $01      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEF9 DEFB $01      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEFA DEFB $0B      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEFB DEFB $0C      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEFC DEFB $0D      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEFD DEFB $0D      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEFE DEFB $0E      ; #R($D198+#PEEK(#PC)*$08)(#N($D198+#PEEK(#PC)*$08)).
 $FEFF DEFB $FF      ; Terminator.

; Play Sounds
;
; Used by the routines at #R$DE77 and #R$FDC4.
@label=PlaySounds
c$FF00 LD A,($FF8D)                         ; {Return if no sound(s) are set to
 $FF03 AND A                                ; play (via *#R$FF8D).
 $FF04 RET Z                                ; }
 $FF05 LD L,A                               ; Store the melody ID in #REGl
                                            ; temporarily.
; Reset the *#R$FF8D (so it doesn't carry on playing).
 $FF06 XOR A                                ; {Write #N$00 to *#R$FF8D.
 $FF07 LD ($FF8D),A                         ; }
 $FF0A LD A,L                               ; Restore the melody ID back to
                                            ; #REGa.
; Handle special cases for the in-game buildings crumbling and then collapsing.
 $FF0B CP $08                               ; {Jump to #R$FF6B if the melody is
 $FF0D JR Z,$FF6B                           ; for the building collapsing
                                            ; (#N$08).}
 $FF0F CP $09                               ; {Jump to #R$FF72 if the melody is
 $FF11 JR Z,$FF72                           ; for the building crumbling
                                            ; (#N$09).}
; Fetch the melody data using the melody ID as an offset.
 $FF13 DEC A                                ; Decrease the melody ID by one for
                                            ; the table lookup.
 $FF14 ADD A,A                              ; {Multiple the melody ID by #N$08
 $FF15 ADD A,A                              ; as the table holds eight bytes of
 $FF16 ADD A,A                              ; data for the melodies.}
 $FF17 LD H,$00                             ; {Create an offset using #REGhl.
 $FF19 LD L,A                               ; }
 $FF1A LD DE,$FF8E                          ; {#REGhl+=#R$FF8E.
 $FF1D ADD HL,DE                            ; }
 $FF1E LD DE,$FF85                          ; #REGde=#R$FF85.
 $FF21 LD BC,$0008                          ; #REGbc=#N($0008,$04,$04).
 $FF24 LDIR                                 ; Copy the selected melody data
                                            ; into #R$FF85.
 $FF26 LD A,($FF8C)                         ; {Jump to #R$FF2D if *#R$FF8C is
 $FF29 CP $02                               ; equal to #N$02.
 $FF2B JR Z,$FF2D                           ; }
@label=PlaySounds_Loop
*$FF2D LD A,($FF8B)                         ; {Jump to #R$FF67 if *#R$FF8B is
 $FF30 AND A                                ; zero.
 $FF31 JR Z,$FF67                           ; }
 $FF33 DEC A                                ; Decrease #REGa by one.
 $FF34 LD ($FF8B),A                         ; Write #REGa to *#R$FF8B.
 $FF37 CALL $FF55                           ; Call #R$FF55.
 $FF3A ADD HL,BC                            ; #REGhl+=#REGbc.
 $FF3B LD ($FF85),HL                        ; Write #REGhl to *#R$FF85.
 $FF3E JR $FF2D                             ; Jump to #R$FF2D.
@label=Unused_PlaySound_Loop
*$FF40 LD A,($FF8B)                         ; {Jump to #R$FF67 if *#R$FF8B is
 $FF43 AND A                                ; zero.
 $FF44 JR Z,$FF67                           ; }
 $FF46 DEC A                                ; Decrease #REGa by one.
 $FF47 LD ($FF8B),A                         ; Write #REGa to *#R$FF8B.
 $FF4A CALL $FF55                           ; Call #R$FF55.
 $FF4D OR A                                 ; Set the bits from #REGa.
 $FF4E SBC HL,BC                            ; #REGhl-=#REGbc.
 $FF50 LD ($FF85),HL                        ; Write #REGhl to *#R$FF85.
 $FF53 JR $FF40                             ; Jump to #R$FF40.
@label=PlayBeeper
*$FF55 LD HL,($FF85)                        ; #REGhl=Loop delay parameter
                                            ; (*#R$FF85(#N$FF85)).
 $FF58 LD DE,($FF87)                        ; #REGde=Number of passes to make
                                            ; through the sound generation loop
                                            ; (*#R$FF87).
 $FF5C CALL $03B5                           ; #HTML(Call <a
                                            ; href="https://skoolkit.ca/disassemblies/rom/hex/asm/03B5.html">BEEPER</a>.)
 $FF5F LD HL,($FF85)                        ; #REGhl=*#R$FF85.
 $FF62 LD BC,($FF89)                        ; #REGbc=*#R$FF89.
 $FF66 RET                                  ; Return.
; Flip speaker off (unset bit 4).
@label=Sounds_SpeakerOff
*$FF67 XOR A                                ; {Speaker off.
 $FF68 OUT ($FE),A                          ; }
 $FF6A RET                                  ; Return.
@label=InitSound_BuildingCollapsing
*$FF6B LD HL,$007D                          ; #REGhl=#N($007D,$04,$04).
 $FF6E LD C,$64                             ; #REGc=#N$64.
 $FF70 JR $FF77                             ; Jump to #R$FF77.
@label=InitSound_BuildingCrumbling
*$FF72 LD HL,$00FA                          ; #REGhl=#N($00FA,$04,$04).
 $FF75 LD C,$19                             ; #REGc=#N$19.
@label=PlaySounds_Building_Loop
*$FF77 LD A,(HL)                            ; #REGa=*#REGhl.
 $FF78 AND %11111000                        ; Keep only bits 3-7.
 $FF7A OUT ($FE),A                          ; OUT #N$FE
 $FF7C LD B,C                               ; #REGb=#REGc.
@label=PlaySounds_Building_Delay
*$FF7D DJNZ $FF7D                           ; Decrease counter by one and loop
                                            ; back to #R$FF7D until counter is
                                            ; zero.
 $FF7F DEC HL                               ; Decrease #REGhl by one.
 $FF80 LD A,H                               ; {Jump to #R$FF77 until #REGhl is
 $FF81 OR L                                 ; zero.
 $FF82 JR NZ,$FF77                          ; }
 $FF84 RET                                  ; Return.
@label=MelodyBuffer
 $FF85 DEFB $00,$00                         ;
 $FF87 DEFB $00,$00                         ;
 $FF89 DEFB $00,$00                         ;
 $FF8B DEFB $00                             ;
 $FF8C DEFB $00                             ;
@label=MelodyID
 $FF8D DEFB $00                             ;
@label=Table_Melodies
 $FF8E DEFB $F4,$01,$00,$00,$32,$00,$0A,$01 ;
 $FF96 DEFB $F4,$01,$00,$00,$F4,$01,$01,$02 ;
 $FF9E DEFB $96,$00,$F4,$01,$C8,$00,$01,$02 ;
 $FFA6 DEFB $64,$00,$19,$00,$64,$00,$04,$00 ;
 $FFAE DEFB $E8,$03,$01,$00,$E8,$03,$05,$01 ;
 $FFB6 DEFB $E8,$03,$01,$00,$F4,$01,$06,$01 ;
 $FFBE DEFB $96,$00,$2C,$01,$C8,$00,$01,$02 ;
 $FFC6 DEFB $42,$00,$00,$3C,$42,$42,$42,$42 ;
 $FFCE DEFB $3C,$00,$00,$7C,$42,$42,$7C,$40 ;
 $FFD6 DEFB $40,$00,$00,$3C,$42,$42,$52,$4A ;
 $FFDE DEFB $3C,$00,$00,$7C,$42,$42,$7C,$44 ;
 $FFE6 DEFB $42,$00,$00,$3C,$40,$3C,$02,$42 ;
 $FFEE DEFB $3C,$00,$00,$FE,$10,$10,$10,$10 ;
 $FFF6 DEFB $10,$00,$00,$42,$42,$42,$42,$42 ;
 $FFFE DEFB $3C,$00                         ;
